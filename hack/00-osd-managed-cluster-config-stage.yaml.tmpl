apiVersion: v1
kind: Template
parameters:
- name: IMAGE_TAG
  required: true
- name: REPO_NAME
  value: managed-cluster-config
  required: true
- name: IDENTITY_ATTR_EMAIL
  required: true
- name: IDENTITY_ATTR_ID
  required: true
- name: IDENTITY_ATTR_NAME
  required: true
- name: IDENTITY_ATTR_PREFERRED_USERNAME
  required: true
- name: IDENTITY_BIND_DN
  required: true
- name: IDENTITY_URL
  required: true
- name: IDENTITY_SRE_GOOGLE_CLIENTID
  required: true
- name: IDENTITY_NAME
  required: true
- name: IDENTITY_MAPPING_METHOD
  required: true
- name: TELEMETER_SERVER_URL
  required: true
- name: CS_SRE_USERS
  required: true
- name: CEE_USERS
  required: true
- name: SREP_USERS
  required: true
metadata:
  name: selectorsyncset-template
objects:
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-default
  spec:
    clusterDeploymentSelector:
      matchExpressions:
      - key: api.openshift.com/managed
        operator: In
        values:
        - 'true'
      - key: api.openshift.com/storage-quota-gib
        operator: DoesNotExist
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 100Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-100gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '100'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 100Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-600gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '600'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 600Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-1100gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '1100'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 1100Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-1600gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '1600'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 1600Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-2100gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '2100'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 2100Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-2600gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '2600'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 2600Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-3100gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '3100'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 3100Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-3600gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '3600'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 3600Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-4100gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '4100'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 4100Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-service-lb-default
  spec:
    clusterDeploymentSelector:
      matchExpressions:
      - key: api.openshift.com/managed
        operator: In
        values:
        - 'true'
      - key: api.openshift.com/service-lb-quota
        operator: DoesNotExist
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: loadbalancer-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/service-lb-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            services.loadbalancers: '0'
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-service-lb-0
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/service-lb-quota: '0'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: loadbalancer-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/service-lb-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            services.loadbalancers: '0'
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-service-lb-4
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/service-lb-quota: '4'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: loadbalancer-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/service-lb-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            services.loadbalancers: '4'
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-service-lb-8
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/service-lb-quota: '8'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: loadbalancer-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/service-lb-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            services.loadbalancers: '8'
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-service-lb-12
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/service-lb-quota: '12'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: loadbalancer-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/service-lb-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            services.loadbalancers: '12'
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-service-lb-16
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/service-lb-quota: '16'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: loadbalancer-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/service-lb-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            services.loadbalancers: '16'
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-service-lb-20
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/service-lb-quota: '20'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: loadbalancer-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/service-lb-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            services.loadbalancers: '20'
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncIdentityProvider
  metadata:
    name: osd-sre-identityprovider
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/environment
        operator: NotIn
        values:
        - production
    identityProviders:
    - challenge: true
      ldap:
        attributes:
          email:
          - ${IDENTITY_ATTR_EMAIL}
          id:
          - ${IDENTITY_ATTR_ID}
          name:
          - ${IDENTITY_ATTR_NAME}
          preferredUsername:
          - ${IDENTITY_ATTR_PREFERRED_USERNAME}
        bindDN: ${IDENTITY_BIND_DN}
        bindPassword:
          name: osd-ldap-secret
        ca:
          name: osd-ldap-ca-configmap
        insecure: false
        url: ${IDENTITY_URL}
      login: true
      mappingMethod: ${IDENTITY_MAPPING_METHOD}
      name: ${IDENTITY_NAME}
      type: LDAP
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncIdentityProvider
  metadata:
    name: osd-sre-google-identityprovider
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/environment: production
    identityProviders:
    - google:
        clientID: ${IDENTITY_SRE_GOOGLE_CLIENTID}
        clientSecret:
          name: osd-google-secret
        hostedDomain: redhat.com
      mappingMethod: claim
      name: OpenShift_SRE
      type: Google
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: ccs-dedicated-admins-ccs
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/ccs: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          managed.openshift.io/aggregate-to-dedicated-admins: project
        name: dedicated-admins-manage-operators
      rules:
      - apiGroups:
        - operators.coreos.com
        resources:
        - '*'
        verbs:
        - '*'
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: dedicated-admins-customer-monitoring
        namespace: openshift-rbac-permissions
      spec:
        subjectKind: Group
        subjectName: dedicated-admins
        permissions:
        - clusterRoleName: dedicated-admins-project
          namespacesAllowedRegex: ^openshift-customer-monitoring$
          allowFirst: true
        - clusterRoleName: admin
          namespacesAllowedRegex: ^openshift-customer-monitoring$
          allowFirst: true
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: ccs-dedicated-admins-extended-dedicated-admin
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/extended-dedicated-admin: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          managed.openshift.io/aggregate-to-dedicated-admins: project
        name: dedicated-admins-manage-operators
      rules:
      - apiGroups:
        - operators.coreos.com
        resources:
        - '*'
        verbs:
        - '*'
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: dedicated-admins-customer-monitoring
        namespace: openshift-rbac-permissions
      spec:
        subjectKind: Group
        subjectName: dedicated-admins
        permissions:
        - clusterRoleName: dedicated-admins-project
          namespacesAllowedRegex: ^openshift-customer-monitoring$
          allowFirst: true
        - clusterRoleName: admin
          namespacesAllowedRegex: ^openshift-customer-monitoring$
          allowFirst: true
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: ccs-dedicated-admins-environment
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/environment: staging
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          managed.openshift.io/aggregate-to-dedicated-admins: project
        name: dedicated-admins-manage-operators
      rules:
      - apiGroups:
        - operators.coreos.com
        resources:
        - '*'
        verbs:
        - '*'
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: dedicated-admins-customer-monitoring
        namespace: openshift-rbac-permissions
      spec:
        subjectKind: Group
        subjectName: dedicated-admins
        permissions:
        - clusterRoleName: dedicated-admins-project
          namespacesAllowedRegex: ^openshift-customer-monitoring$
          allowFirst: true
        - clusterRoleName: admin
          namespacesAllowedRegex: ^openshift-customer-monitoring$
          allowFirst: true
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: ccs-dedicated-admins-cluster-platform
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        hive.openshift.io/cluster-platform: gcp
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          managed.openshift.io/aggregate-to-dedicated-admins: project
        name: dedicated-admins-manage-operators
      rules:
      - apiGroups:
        - operators.coreos.com
        resources:
        - '*'
        verbs:
        - '*'
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: dedicated-admins-customer-monitoring
        namespace: openshift-rbac-permissions
      spec:
        subjectKind: Group
        subjectName: dedicated-admins
        permissions:
        - clusterRoleName: dedicated-admins-project
          namespacesAllowedRegex: ^openshift-customer-monitoring$
          allowFirst: true
        - clusterRoleName: admin
          namespacesAllowedRegex: ^openshift-customer-monitoring$
          allowFirst: true
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: cluster-monitoring-config
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: cluster-monitoring-config
        namespace: openshift-monitoring
      data:
        config.yaml: "prometheusK8s:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations: \n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\n  retention: 7d\n  volumeClaimTemplate:\n    metadata:\n\
          \      name: prometheus-data\n    spec:\n      resources:\n        requests:\n\
          \          storage: 50Gi\nalertmanagerMain:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations: \n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\n  volumeClaimTemplate:\n    metadata:\n      name:\
          \ alertmanager-data\n    spec:\n      resources:\n        requests:\n  \
          \        storage: 10Gi\ntelemeterClient:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations: \n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\n  telemeterServerURL: ${TELEMETER_SERVER_URL}\n\
          prometheusOperator:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations: \n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\ngrafana:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations: \n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\nk8sPrometheusAdapter:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations: \n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\nkubeStateMetrics:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations: \n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\n"
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: customer-registry-cas
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: dedicated-admins-registry-cas-cluster
      rules:
      - apiGroups:
        - config.openshift.io
        resources:
        - images
        resourceNames:
        - cluster
        verbs:
        - get
        - list
        - watch
        - patch
        - update
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-registry-cas-project
        namespace: openshift-config
      rules:
      - apiGroups:
        - ''
        resources:
        - configmaps
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - configmaps
        verbs:
        - '*'
        resourceNames:
        - registry-cas
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: dedicated-admins-registry-cas-cluster
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: dedicated-admins-registry-cas-cluster
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-registry-cas-project
        namespace: openshift-config
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-registry-cas-project
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: kubelet-config
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    patches:
    - kind: MachineConfigPool
      apiVersion: machineconfiguration.openshift.io/v1
      name: worker
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"managed.openshift.io/custom-kubelet":""}
        } }'
      patchType: merge
    - kind: MachineConfigPool
      apiVersion: machineconfiguration.openshift.io/v1
      name: master
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"managed.openshift.io/custom-kubelet":""}
        } }'
      patchType: merge
    resources:
    - apiVersion: machineconfiguration.openshift.io/v1
      kind: KubeletConfig
      metadata:
        name: custom-kubelet
      spec:
        machineConfigPoolSelector:
          matchLabels:
            managed.openshift.io/custom-kubelet: ''
        kubeletConfig:
          systemReserved:
            cpu: 1000m
            memory: 1Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: layered-sre-authorization-addon-rhmi-operator
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/addon-rhmi-operator: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: layered-sre-cluster-admins
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: Group
        name: layered-sre-cluster-admins
    - apiVersion: user.openshift.io/v1
      kind: Group
      metadata:
        name: layered-sre-cluster-admins
      users: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: layered-cs-sre-admin-cluster
      rules:
      - apiGroups:
        - config.openshift.io
        resources:
        - projects
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - config.openshift.io
        resources:
        - infrastructures
        - oauths
        verbs:
        - get
      - apiGroups:
        - project.openshift.io
        resources:
        - projects
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - namespaces
        - namespaces/finalize
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - user.openshift.io
        resources:
        - groups
        verbs:
        - patch
        - update
        - get
      - apiGroups:
        - quota.openshift.io
        resources:
        - clusterresourcequotas/status
        - clusterresourcequotas
        verbs:
        - '*'
      - apiGroups:
        - apiextensions.k8s.io
        - admin-enmasse.io
        - apicur.io
        - applicationmonitoring.integreatly.org
        - apps.3scale.net
        - capabilities.3scale.net
        - enmasse.io
        - iot.enmasse.io
        - keycloak.org
        - monitoring.coreos.com
        - push.aerogear.org
        - org.eclipse.che
        - syndesis.io
        resources:
        - '*'
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: layered-cs-sre-admin-project
      rules:
      - apiGroups:
        - ''
        resources:
        - pods/exec
        verbs:
        - create
      - apiGroups:
        - batch
        resources:
        - jobs
        - cronjobs
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/attach
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/log
        verbs:
        - get
      - apiGroups:
        - ''
        resources:
        - pods
        verbs:
        - delete
      - apiGroups:
        - integreatly.org
        resources:
        - '*'
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        resources:
        - secrets
        - configmaps
        - persistentvolumeclaims
        verbs:
        - '*'
      - apiGroups:
        - operators.coreos.com
        resources:
        - installplans
        verbs:
        - patch
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - list
        - get
      - apiGroups:
        - apps
        resources:
        - statefulsets
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - events
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - endpoints
        verbs:
        - list
        - get
    - apiVersion: user.openshift.io/v1
      kind: Group
      metadata:
        name: layered-cs-sre-admins
      users: ${{CS_SRE_USERS}}
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: layered-cs-sre-admin
        namespace: openshift-rbac-permissions
      spec:
        clusterPermissions:
        - dedicated-admins-cluster
        - layered-cs-sre-admin-cluster
        permissions:
        - allowFirst: true
          clusterRoleName: layered-cs-sre-admin-project
          namespacesAllowedRegex: .*
          namespacesDeniedRegex: (^openshift-.*|^kube-.*|^ops-health-monitoring$|^management-infra$|^default$|^logging$|^sre-app-check$)
        subjectKind: Group
        subjectName: layered-cs-sre-admins
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: layered-sre-authorization-addon-rhmi-operator-internal
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/addon-rhmi-operator-internal: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: layered-sre-cluster-admins
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: Group
        name: layered-sre-cluster-admins
    - apiVersion: user.openshift.io/v1
      kind: Group
      metadata:
        name: layered-sre-cluster-admins
      users: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: layered-cs-sre-admin-cluster
      rules:
      - apiGroups:
        - config.openshift.io
        resources:
        - projects
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - config.openshift.io
        resources:
        - infrastructures
        - oauths
        verbs:
        - get
      - apiGroups:
        - project.openshift.io
        resources:
        - projects
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - namespaces
        - namespaces/finalize
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - user.openshift.io
        resources:
        - groups
        verbs:
        - patch
        - update
        - get
      - apiGroups:
        - quota.openshift.io
        resources:
        - clusterresourcequotas/status
        - clusterresourcequotas
        verbs:
        - '*'
      - apiGroups:
        - apiextensions.k8s.io
        - admin-enmasse.io
        - apicur.io
        - applicationmonitoring.integreatly.org
        - apps.3scale.net
        - capabilities.3scale.net
        - enmasse.io
        - iot.enmasse.io
        - keycloak.org
        - monitoring.coreos.com
        - push.aerogear.org
        - org.eclipse.che
        - syndesis.io
        resources:
        - '*'
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: layered-cs-sre-admin-project
      rules:
      - apiGroups:
        - ''
        resources:
        - pods/exec
        verbs:
        - create
      - apiGroups:
        - batch
        resources:
        - jobs
        - cronjobs
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/attach
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/log
        verbs:
        - get
      - apiGroups:
        - ''
        resources:
        - pods
        verbs:
        - delete
      - apiGroups:
        - integreatly.org
        resources:
        - '*'
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        resources:
        - secrets
        - configmaps
        - persistentvolumeclaims
        verbs:
        - '*'
      - apiGroups:
        - operators.coreos.com
        resources:
        - installplans
        verbs:
        - patch
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - list
        - get
      - apiGroups:
        - apps
        resources:
        - statefulsets
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - events
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - endpoints
        verbs:
        - list
        - get
    - apiVersion: user.openshift.io/v1
      kind: Group
      metadata:
        name: layered-cs-sre-admins
      users: ${{CS_SRE_USERS}}
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: layered-cs-sre-admin
        namespace: openshift-rbac-permissions
      spec:
        clusterPermissions:
        - dedicated-admins-cluster
        - layered-cs-sre-admin-cluster
        permissions:
        - allowFirst: true
          clusterRoleName: layered-cs-sre-admin-project
          namespacesAllowedRegex: .*
          namespacesDeniedRegex: (^openshift-.*|^kube-.*|^ops-health-monitoring$|^management-infra$|^default$|^logging$|^sre-app-check$)
        subjectKind: Group
        subjectName: layered-cs-sre-admins
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: managed-upgrade-operator-config
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: managed-upgrade-operator-config
        namespace: openshift-managed-upgrade-operator
      data:
        config.yaml: "maintenance:\n  controlPlaneTime: 90\n  workerNodeTime: 8\n\
          \  ignoredAlerts:\n    controlPlaneCriticals:\n    - etcdMembersDown\n \
          \   - KubeDeploymentReplicasMismatch\n    - ClusterOperatorDown\n    - MachineWithNoRunningPhase\n\
          \    - ClusterOperatorDegraded\nscale:\n  timeOut: 30\nupgradeWindow:\n\
          \  timeOut: 60\nnodeDrain:\n  timeOut: 45\nhealthCheck:\n  ignoredCriticals:\n\
          \  - DNSErrors05MinSRE\n  - MetricsClientSendFailingSRE\n  - UpgradeNodeScalingFailedSRE\n\
          \  - UpgradeClusterCheckFailedSRE\n"
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: managed-velero-operator-rolebinding
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        creationTimestamp: null
        name: cluster-config-v1-reader
        namespace: kube-system
      rules:
      - apiGroups:
        - ''
        resourceNames:
        - cluster-config-v1
        resources:
        - configmaps
        verbs:
        - get
    - kind: RoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: managed-velero-operator-cluster-config-v1-reader
        namespace: kube-system
        labels:
          owner: managed-velero-operator
          owner.namespace: managed-velero-operator
      subjects:
      - kind: ServiceAccount
        name: managed-velero-operator
        namespace: openshift-velero
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: cluster-config-v1-reader
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-aquasec-operator
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-aqua
        annotations:
          openshift.io/node-selector: ''
    - apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        annotations:
          olm.providedAPIs: AquaCsp.v1alpha1.operator.aquasec.com,AquaDatabase.v1alpha1.operator.aquasec.com,AquaEnforcer.v1alpha1.operator.aquasec.com,AquaGateway.v1alpha1.operator.aquasec.com,AquaScanner.v1alpha1.operator.aquasec.com,AquaServer.v1alpha1.operator.aquasec.com
        name: openshift-aqua
        namespace: openshift-aqua
      spec:
        serviceAccount:
          metadata:
            creationTimestamp: null
        targetNamespaces:
        - openshift-aqua
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-aqua
        namespace: openshift-aqua
      rules:
      - apiGroups:
        - ''
        resources:
        - namespaces
        - pods
        - pods/log
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - operators.coreos.com
        resources:
        - subscriptions
        - clusterserviceversions
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - secrets
        resourceNames:
        - aqua-database-password
        - aqua-registry
        verbs:
        - '*'
      - apiGroups:
        - operator.aquasec.com
        resources:
        - aquacsps
        - aquadatabases
        - aquaenforcers
        - aquagateways
        - aquascanners
        - aquaservers
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - secrets
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - serviceaccounts
        resourceNames:
        - aqua-sa
        verbs:
        - patch
        - update
      - apiGroups:
        - ''
        - project.openshift.io
        resources:
        - projects
        verbs:
        - get
      - apiGroups:
        - ''
        resources:
        - configmaps
        - endpoints
        - persistentvolumeclaims
        - replicationcontrollers
        - replicationcontrollers/scale
        - services
        - services/proxy
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - apps
        resources:
        - daemonsets
        - deployments
        - deployments/rollback
        - deployments/scale
        - replicasets
        - replicasets/scale
        - statefulsets
        - statefulsets/scale
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - autoscaling
        resources:
        - horizontalpodautoscalers
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - batch
        resources:
        - cronjobs
        - jobs
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - extensions
        resources:
        - daemonsets
        - deployments
        - deployments/rollback
        - deployments/scale
        - ingresses
        - networkpolicies
        - replicasets
        - replicasets/scale
        - replicationcontrollers/scale
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - networking.k8s.io
        resources:
        - networkpolicies
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - metrics.k8s.io
        resources:
        - pods
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - builds/details
        verbs:
        - update
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        verbs:
        - get
      - apiGroups:
        - build.openshift.io
        resources:
        - buildconfigs
        - buildconfigs/webhooks
        - builds
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - builds/log
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - buildconfigs/instantiate
        - buildconfigs/instantiatebinary
        - builds/clone
        verbs:
        - create
      - apiGroups:
        - build.openshift.io
        resources:
        - jenkins
        verbs:
        - edit
        - view
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigs
        - deploymentconfigs/scale
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigrollbacks
        - deploymentconfigs/instantiate
        - deploymentconfigs/rollback
        verbs:
        - create
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigs/log
        - deploymentconfigs/status
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - image.openshift.io
        resources:
        - imagestreams/status
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - quota.openshift.io
        resources:
        - appliedclusterresourcequotas
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - route.openshift.io
        resources:
        - routes
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - route.openshift.io
        resources:
        - routes/custom-host
        verbs:
        - create
      - apiGroups:
        - route.openshift.io
        resources:
        - routes/status
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - template.openshift.io
        resources:
        - processedtemplates
        - templateconfigs
        - templateinstances
        - templates
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - extensions
        - networking.k8s.io
        resources:
        - networkpolicies
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - buildlogs
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        resources:
        - resourcequotausages
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        resources:
        - configmaps
        - endpoints
        - persistentvolumeclaims
        - pods
        - replicationcontrollers
        - replicationcontrollers/scale
        - services
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        resources:
        - bindings
        - events
        - limitranges
        - namespaces/status
        - pods/log
        - pods/status
        - replicationcontrollers/status
        - resourcequotas
        - resourcequotas/status
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        resources:
        - namespaces
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - apps
        resources:
        - controllerrevisions
        - daemonsets
        - deployments
        - deployments/scale
        - replicasets
        - replicasets/scale
        - statefulsets
        - statefulsets/scale
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - autoscaling
        resources:
        - horizontalpodautoscalers
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - batch
        resources:
        - cronjobs
        - jobs
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - extensions
        resources:
        - daemonsets
        - deployments
        - deployments/scale
        - ingresses
        - networkpolicies
        - replicasets
        - replicasets/scale
        - replicationcontrollers/scale
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - networking.k8s.io
        resources:
        - networkpolicies
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - buildconfigs
        - buildconfigs/webhooks
        - builds
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - jenkins
        verbs:
        - view
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigs
        - deploymentconfigs/scale
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - buildlogs
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - packages.operators.coreos.com
        resources:
        - packagemanifests
        verbs:
        - '*'
      - apiGroups:
        - authorization.openshift.io
        resources:
        - localresourceaccessreviews
        - localsubjectaccessreviews
        - subjectrulesreviews
        verbs:
        - create
      - apiGroups:
        - authorization.k8s.io
        resources:
        - localsubjectaccessreviews
        verbs:
        - create
      - apiGroups:
        - authorization.openshift.io
        resources:
        - resourceaccessreviews
        - subjectaccessreviews
        verbs:
        - create
      - apiGroups:
        - security.openshift.io
        resources:
        - podsecuritypolicyreviews
        - podsecuritypolicyselfsubjectreviews
        - podsecuritypolicysubjectreviews
        verbs:
        - create
      - apiGroups:
        - route.openshift.io
        resources:
        - routes/status
        verbs:
        - update
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-openshift-aqua
        namespace: openshift-aqua
      subjects:
      - kind: Group
        name: dedicated-admins
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-openshift-aqua
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        annotations:
          openshift.io/description: A user who can search and scan images from an
            OpenShift integrated registry.
        name: image-scanner
      rules:
      - apiGroups:
        - image.openshift.io
        resources:
        - imagestreams
        - imagestreams/layers
        verbs:
        - get
        - list
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: aqua-scanner-binding
      roleRef:
        kind: ClusterRole
        name: image-scanner
        apiGroup: rbac.authorization.k8s.io
      subjects:
      - kind: ServiceAccount
        name: aqua-sa
        namespace: openshift-aqua
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-cluster-admin
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/cluster-admin: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: osd-cluster-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: cluster-admins
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-codeready-workspaces
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-codeready-workspaces
        annotations:
          openshift.io/node-selector: ''
        labels:
          openshift.io/cluster-logging: 'true'
          openshift.io/cluster-monitoring: 'true'
    - apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        name: openshift-codeready-workspaces
        namespace: openshift-codeready-workspaces
      spec:
        serviceAccount:
          metadata:
            creationTimestamp: null
        targetNamespaces:
        - openshift-codeready-workspaces
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-codeready-workspaces
        namespace: openshift-codeready-workspaces
      rules:
      - apiGroups:
        - ''
        resources:
        - namespaces
        - pods
        - pods/log
        - events
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - operators.coreos.com
        resources:
        - subscriptions
        - clusterserviceversions
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - configmaps
        verbs:
        - list
      - apiGroups:
        - org.eclipse.che
        resources:
        - '*'
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-openshift-codeready-workspaces
        namespace: openshift-codeready-workspaces
      subjects:
      - kind: Group
        name: dedicated-admins
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-openshift-codeready-workspaces
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-console-branding
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: operator.openshift.io/v1
      kind: Console
      metadata:
        name: cluster
      spec:
        managementState: Managed
        authentication:
          logoutRedirect: https://www.redhat.com/i/should/logout
        customization:
          brand: dedicated
          documentationBaseURL: https://docs.openshift.com/dedicated/4/
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-curated-operatorsources
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
      - key: api.openshift.com/extended-dedicated-admin
        operator: In
        values:
        - 'false'
      - key: api.openshift.com/environment
        operator: NotIn
        values:
        - staging
      - key: hive.openshift.io/cluster-platform
        operator: NotIn
        values:
        - gcp
      - key: api.openshift.com/cluster-admin
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      applyMode: AlwaysApply
      kind: OperatorHub
      name: cluster
      patch: '{"spec":{"disableAllDefaultSources":true}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-curated-operatorsources-revert
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/extended-dedicated-admin
        operator: NotIn
        values:
        - 'false'
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      applyMode: AlwaysApply
      kind: OperatorHub
      name: cluster
      patch: '{"spec":{"disableAllDefaultSources":false}}'
      patchType: merge
    resources:
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: osd-patch-subscription-source
        namespace: openshift-marketplace
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: osd-patch-subscription-source
      rules:
      - apiGroups:
        - operators.coreos.com
        resources:
        - subscriptions
        verbs:
        - patch
        - get
        - list
    - kind: ClusterRoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: osd-patch-subscription-source
      subjects:
      - kind: ServiceAccount
        name: osd-patch-subscription-source
        namespace: openshift-marketplace
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: osd-patch-subscription-source
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: osd-patch-subscription-source
        namespace: openshift-marketplace
      spec:
        failedJobsHistoryLimit: 5
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Replace
        schedule: 0 */1 * * *
        jobTemplate:
          spec:
            template:
              spec:
                serviceAccountName: osd-patch-subscription-source
                restartPolicy: Never
                containers:
                - name: osd-patch-subscription-source
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  imagePullPolicy: Always
                  args:
                  - /bin/bash
                  - -c
                  - "# Script run as an idempotent cronjob to fix existing subscriptions\
                    \ when disabling OSD operator curation.\n\n# for each type of\
                    \ source (redhat, certified, communit)\n# AND for each namespace\
                    \ having a subscription with a curated community source\n# AND\
                    \ for each subscription having a curated source\n# patch the source\n\
                    # NOTE there are loops for each source to keep the jsonpath simple\
                    \ and the logic easy to read\n\necho START\nfor NS in $(oc get\
                    \ subscription -A -o jsonpath='{.items[?(@.spec.source==\"osd-curated-redhat-operators\"\
                    )].metadata.namespace}');\ndo\n  for SUB in $(oc -n $NS get subscription\
                    \ -o jsonpath='{.items[?(@.spec.source==\"osd-curated-redhat-operators\"\
                    )].metadata.name}');\n  do\n    echo \"Patching subscription '$SUB'\
                    \ in namespace '$NS'\"\n    oc -n $NS patch subscription $SUB\
                    \ --patch '{\"spec\":{\"source\":\"redhat-operators\"}}' --type\
                    \ merge\n  done\ndone\n\nfor NS in $(oc get subscription -A -o\
                    \ jsonpath='{.items[?(@.spec.source==\"osd-curated-certified-operators\"\
                    )].metadata.namespace}');\ndo\n  for SUB in $(oc -n $NS get subscription\
                    \ -o jsonpath='{.items[?(@.spec.source==\"osd-curated-certified-operators\"\
                    )].metadata.name}');\n  do\n    echo \"Patching subscription '$SUB'\
                    \ in namespace '$NS'\"\n    oc -n $NS patch subscription $SUB\
                    \ --patch '{\"spec\":{\"source\":\"certified-operators\"}}' --type\
                    \ merge\n  done\ndone\n\nfor NS in $(oc get subscription -A -o\
                    \ jsonpath='{.items[?(@.spec.source==\"osd-curated-community-operators\"\
                    )].metadata.namespace}');\ndo\n  for SUB in $(oc -n $NS get subscription\
                    \ -o jsonpath='{.items[?(@.spec.source==\"osd-curated-community-operators\"\
                    )].metadata.name}');\n  do\n    echo \"Patching subscription '$SUB'\
                    \ in namespace '$NS'\"\n    oc -n $NS patch subscription $SUB\
                    \ --patch '{\"spec\":{\"source\":\"community-operators\"}}' --type\
                    \ merge\n  done\ndone\necho FINISH\n"
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-customer-monitoring
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-customer-monitoring
        annotations:
          openshift.io/node-selector: ''
        labels:
          name: openshift-customer-monitoring
          openshift.io/cluster-logging: 'true'
          openshift.io/cluster-monitoring: 'false'
    - apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        name: openshift-customer-monitoring
        namespace: openshift-customer-monitoring
      spec:
        serviceAccount:
          metadata:
            creationTimestamp: null
        targetNamespaces:
        - openshift-customer-monitoring
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: prometheus-k8s-openshift-customer-monitoring
        namespace: openshift-customer-monitoring
      rules:
      - apiGroups:
        - ''
        resources:
        - secrets
        resourceNames:
        - alertmanager-main
        - alertmanager-main-proxy
        - prometheus-additional-scrape-config
        - prometheus-additional-alertmanager-config
        - alertmanager-instance
        - prometheus-auth-proxy
        - alertmanager-auth-proxy
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-customer-monitoring
        namespace: openshift-customer-monitoring
      rules:
      - apiGroups:
        - ''
        resources:
        - namespaces
        - pods
        - pods/log
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - operators.coreos.com
        resources:
        - subscriptions
        - clusterserviceversions
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - secrets
        resourceNames:
        - alertmanager-main
        - alertmanager-main-proxy
        - prometheus-additional-scrape-config
        - prometheus-additional-alertmanager-config
        - alertmanager-instance
        - prometheus-auth-proxy
        - alertmanager-auth-proxy
        verbs:
        - '*'
      - apiGroups:
        - monitoring.coreos.com
        resources:
        - prometheuses
        - prometheusrules
        - servicemonitors
        - podmonitors
        verbs:
        - '*'
      - apiGroups:
        - monitoring.coreos.com
        resources:
        - alertmanagers
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - secrets
        verbs:
        - create
      - apiGroups:
        - ''
        - project.openshift.io
        resources:
        - projects
        verbs:
        - get
      - apiGroups:
        - ''
        resources:
        - configmaps
        - endpoints
        - persistentvolumeclaims
        - replicationcontrollers
        - replicationcontrollers/scale
        - services
        - services/proxy
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - apps
        resources:
        - daemonsets
        - deployments
        - deployments/rollback
        - deployments/scale
        - replicasets
        - replicasets/scale
        - statefulsets
        - statefulsets/scale
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - autoscaling
        resources:
        - horizontalpodautoscalers
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - batch
        resources:
        - cronjobs
        - jobs
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - extensions
        resources:
        - daemonsets
        - deployments
        - deployments/rollback
        - deployments/scale
        - ingresses
        - networkpolicies
        - replicasets
        - replicasets/scale
        - replicationcontrollers/scale
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - networking.k8s.io
        resources:
        - networkpolicies
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - metrics.k8s.io
        resources:
        - pods
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - builds/details
        verbs:
        - update
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        verbs:
        - get
      - apiGroups:
        - build.openshift.io
        resources:
        - buildconfigs
        - buildconfigs/webhooks
        - builds
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - builds/log
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - buildconfigs/instantiate
        - buildconfigs/instantiatebinary
        - builds/clone
        verbs:
        - create
      - apiGroups:
        - build.openshift.io
        resources:
        - jenkins
        verbs:
        - edit
        - view
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigs
        - deploymentconfigs/scale
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigrollbacks
        - deploymentconfigs/instantiate
        - deploymentconfigs/rollback
        verbs:
        - create
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigs/log
        - deploymentconfigs/status
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - image.openshift.io
        resources:
        - imagestreams/status
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - quota.openshift.io
        resources:
        - appliedclusterresourcequotas
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - route.openshift.io
        resources:
        - routes
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - route.openshift.io
        resources:
        - routes/custom-host
        verbs:
        - create
      - apiGroups:
        - route.openshift.io
        resources:
        - routes/status
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - template.openshift.io
        resources:
        - processedtemplates
        - templateconfigs
        - templateinstances
        - templates
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - extensions
        - networking.k8s.io
        resources:
        - networkpolicies
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - buildlogs
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        resources:
        - resourcequotausages
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        resources:
        - configmaps
        - endpoints
        - persistentvolumeclaims
        - pods
        - replicationcontrollers
        - replicationcontrollers/scale
        - services
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        resources:
        - bindings
        - events
        - limitranges
        - namespaces/status
        - pods/log
        - pods/status
        - replicationcontrollers/status
        - resourcequotas
        - resourcequotas/status
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        resources:
        - namespaces
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - apps
        resources:
        - controllerrevisions
        - daemonsets
        - deployments
        - deployments/scale
        - replicasets
        - replicasets/scale
        - statefulsets
        - statefulsets/scale
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - autoscaling
        resources:
        - horizontalpodautoscalers
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - batch
        resources:
        - cronjobs
        - jobs
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - extensions
        resources:
        - daemonsets
        - deployments
        - deployments/scale
        - ingresses
        - networkpolicies
        - replicasets
        - replicasets/scale
        - replicationcontrollers/scale
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - networking.k8s.io
        resources:
        - networkpolicies
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - buildconfigs
        - buildconfigs/webhooks
        - builds
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - jenkins
        verbs:
        - view
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigs
        - deploymentconfigs/scale
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - buildlogs
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - packages.operators.coreos.com
        resources:
        - packagemanifests
        verbs:
        - '*'
      - apiGroups:
        - authorization.openshift.io
        resources:
        - localresourceaccessreviews
        - localsubjectaccessreviews
        - subjectrulesreviews
        verbs:
        - create
      - apiGroups:
        - authorization.k8s.io
        resources:
        - localsubjectaccessreviews
        verbs:
        - create
      - apiGroups:
        - authorization.openshift.io
        resources:
        - resourceaccessreviews
        - subjectaccessreviews
        verbs:
        - create
      - apiGroups:
        - security.openshift.io
        resources:
        - podsecuritypolicyreviews
        - podsecuritypolicyselfsubjectreviews
        - podsecuritypolicysubjectreviews
        verbs:
        - create
      - apiGroups:
        - route.openshift.io
        resources:
        - routes/status
        verbs:
        - update
      - apiGroups:
        - ''
        resources:
        - pods/portforward
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: prometheus-k8s-openshift-customer-monitoring
        namespace: openshift-customer-monitoring
      subjects:
      - kind: ServiceAccount
        name: prometheus-k8s
        namespace: openshift-customer-monitoring
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: prometheus-k8s-openshift-customer-monitoring
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-openshift-customer-monitoring
        namespace: openshift-customer-monitoring
      subjects:
      - kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-openshift-customer-monitoring
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-devaccess
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: user.openshift.io/v1
      kind: Group
      metadata:
        name: osd-devaccess
      users: ${{CEE_USERS}}
    - aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: rbac.authorization.k8s.io/aggregate-to-view
            operator: In
            values:
            - 'true'
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-devaccess
            operator: In
            values:
            - 'true'
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: osd-devaccess
      rules: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: osd-devaccess-aggregate
        labels:
          managed.openshift.io/aggregate-to-devaccess: 'true'
      rules:
      - apiGroups:
        - ''
        resources:
        - nodes
        verbs:
        - get
        - list
      - apiGroups:
        - ''
        resources:
        - pods/exec
        verbs:
        - create
      - apiGroups:
        - config.openshift.io
        resources:
        - projects
        verbs:
        - get
        - list
      - apiGroups:
        - project.openshift.io
        resources:
        - projects
        verbs:
        - get
        - list
      - apiGroups:
        - user.openshift.io
        resources:
        - groups
        verbs:
        - get
        - list
      - apiGroups:
        - ''
        resources:
        - namespaces
        - namespaces/finalize
        verbs:
        - get
        - list
      - apiGroups:
        - ''
        resources:
        - pods
        verbs:
        - get
        - list
      - apiGroups:
        - security.openshift.io
        resources:
        - podsecuritypolicyreviews
        - podsecuritypolicyselfsubjectreviews
        - podsecuritypolicysubjectreviews
        verbs:
        - create
      - apiGroups:
        - authorization.openshift.io
        resources:
        - localresourceaccessreviews
        verbs:
        - create
      - apiGroups:
        - ''
        - image.openshift.io
        resources:
        - images
        verbs:
        - get
        - list
      - nonResourceURLs:
        - '*'
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: osd-devaccess
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: osd-devaccess
      subjects:
      - kind: Group
        name: osd-devaccess
    - apiVersion: v1
      data:
        ca.crt: '-----BEGIN CERTIFICATE-----

          MIIENDCCAxygAwIBAgIJANunI0D662cnMA0GCSqGSIb3DQEBCwUAMIGlMQswCQYD

          VQQGEwJVUzEXMBUGA1UECAwOTm9ydGggQ2Fyb2xpbmExEDAOBgNVBAcMB1JhbGVp

          Z2gxFjAUBgNVBAoMDVJlZCBIYXQsIEluYy4xEzARBgNVBAsMClJlZCBIYXQgSVQx

          GzAZBgNVBAMMElJlZCBIYXQgSVQgUm9vdCBDQTEhMB8GCSqGSIb3DQEJARYSaW5m

          b3NlY0ByZWRoYXQuY29tMCAXDTE1MDcwNjE3MzgxMVoYDzIwNTUwNjI2MTczODEx

          WjCBpTELMAkGA1UEBhMCVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRAwDgYD

          VQQHDAdSYWxlaWdoMRYwFAYDVQQKDA1SZWQgSGF0LCBJbmMuMRMwEQYDVQQLDApS

          ZWQgSGF0IElUMRswGQYDVQQDDBJSZWQgSGF0IElUIFJvb3QgQ0ExITAfBgkqhkiG

          9w0BCQEWEmluZm9zZWNAcmVkaGF0LmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEP

          ADCCAQoCggEBALQt9OJQh6GC5LT1g80qNh0u50BQ4sZ/yZ8aETxt+5lnPVX6MHKz

          bfwI6nO1aMG6j9bSw+6UUyPBHP796+FT/pTS+K0wsDV7c9XvHoxJBJJU38cdLkI2

          c/i7lDqTfTcfLL2nyUBd2fQDk1B0fxrskhGIIZ3ifP1Ps4ltTkv8hRSob3VtNqSo

          GxkKfvD2PKjTPxDPWYyruy9irLZioMffi3i/gCut0ZWtAyO3MVH5qWF/enKwgPES

          X9po+TdCvRB/RUObBaM761EcrLSM1GqHNueSfqnho3AjLQ6dBnPWlo638Zm1VebK

          BELyhkLWMSFkKwDmne0jQ02Y4g075vCKvCsCAwEAAaNjMGEwHQYDVR0OBBYEFH7R

          4yC+UehIIPeuL8Zqw3PzbgcZMB8GA1UdIwQYMBaAFH7R4yC+UehIIPeuL8Zqw3Pz

          bgcZMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMA0GCSqGSIb3DQEB

          CwUAA4IBAQBDNvD2Vm9sA5A9AlOJR8+en5Xz9hXcxJB5phxcZQ8jFoG04Vshvd0e

          LEnUrMcfFgIZ4njMKTQCM4ZFUPAieyLx4f52HuDopp3e5JyIMfW+KFcNIpKwCsak

          oSoKtIUOsUJK7qBVZxcrIyeQV2qcYOeZhtS5wBqIwOAhFwlCET7Ze58QHmS48slj

          S9K0JAcps2xdnGu0fkzhSQxY8GPQNFTlr6rYld5+ID/hHeS76gq0YG3q6RLWRkHf

          4eTkRjivAlExrFzKcljC4axKQlnOvVAzz+Gm32U0xPBF4ByePVxCJUHw1TsyTmel

          RxNEp7yHoXcwn+fXna+t5JWh1gxUZty3

          -----END CERTIFICATE-----

          '
      kind: ConfigMap
      metadata:
        name: osd-devaccess-ldap-ca-configmap
        namespace: openshift-config
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-ingress
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-sre-sshd
    patches:
    - apiVersion: operator.openshift.io/v1
      applyMode: AlwaysApply
      kind: IngressController
      name: default
      namespace: openshift-ingress-operator
      patch: '{"spec":{"nodePlacement":{"nodeSelector":{"matchLabels":{"node-role.kubernetes.io/infra":""}},"tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/infra","operator":"Exists"}]}}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-logging
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-logging
        annotations:
          openshift.io/node-selector: ''
        labels:
          managed.openshift.io/service-lb-quota-exempt: 'true'
          managed.openshift.io/storage-pv-quota-exempt: 'true'
          openshift.io/cluster-logging: 'true'
          openshift.io/cluster-monitoring: 'true'
    - apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        annotations:
          olm.providedAPIs: ClusterLogging.v1.logging.openshift.io
        name: openshift-logging
        namespace: openshift-logging
      spec:
        serviceAccount:
          metadata:
            creationTimestamp: null
        targetNamespaces:
        - openshift-logging
    - apiVersion: v1
      data:
        actions.yaml: '# ---

          # Remember, leave a key empty if there is no value.  None will be a string,

          # not a Python "NoneType"

          #

          # Also remember that all examples have ''disable_action'' set to True.  If
          you

          # want to use this action as a template, be sure to set this to False after

          # copying it.

          # actions:

          #   1:

          #     action: delete_indices

          #     description: >-

          #       Delete .operations indices older than 30 days.

          #       Ignore the error if the filter does not

          #       result in an actionable list of indices (ignore_empty_list).

          #       See https://www.elastic.co/guide/en/elasticsearch/client/curator/5.2/ex_delete_indices.html

          #     options:

          #       # Swallow curator.exception.NoIndices exception

          #       ignore_empty_list: True

          #       # In seconds, default is 300

          #       timeout_override: ${CURATOR_TIMEOUT}

          #       # Don''t swallow any other exceptions

          #       continue_if_exception: False

          #       # Optionally disable action, useful for debugging

          #       disable_action: False

          #     # All filters are bound by logical AND

          #     filters:

          #     - filtertype: pattern

          #       kind: regex

          #       value: ''^\.operations\..*$''

          #       exclude: False

          #     - filtertype: age

          #       # Parse timestamp from index name

          #       source: name

          #       direction: older

          #       timestring: ''%Y.%m.%d''

          #       unit: days

          #       unit_count: 30

          #       exclude: False

          '
        config.yaml: "# Logging example curator config file\n\n# uncomment and use\
          \ this to override the defaults from env vars\n#.defaults:\n#  delete:\n\
          #    days: 30\n.defaults:\n  delete:\n    days: 7\n\n# to keep ops logs\
          \ for a different duration:\n.operations:\n  delete:\n    days: 0\n\n# example\
          \ for a normal project\n#myapp:\n#  delete:\n#    weeks: 1\n"
        curator5.yaml: "---\nclient:\n  hosts:\n  - ${ES_HOST}\n  port: ${ES_PORT}\n\
          \  use_ssl: True\n  certificate: ${ES_CA}\n  client_cert: ${ES_CLIENT_CERT}\n\
          \  client_key: ${ES_CLIENT_KEY}\n  ssl_no_validate: False\n  timeout: ${CURATOR_TIMEOUT}\n\
          \  master_only: False\nlogging:\n  loglevel: ${CURATOR_LOG_LEVEL}\n  logformat:\
          \ default\n  blacklist: ['elasticsearch', 'urllib3']\n  \n"
      kind: ConfigMap
      metadata:
        name: curator
        namespace: openshift-logging
    - apiVersion: v1
      kind: ResourceQuota
      metadata:
        name: logging-storage-quota
        namespace: openshift-logging
      spec:
        hard:
          requests.storage: 1200Gi
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-logging
        namespace: openshift-logging
      rules:
      - apiGroups:
        - ''
        resources:
        - namespaces
        - pods
        - pods/log
        - events
        - persistentvolumes
        - persistentvolumeclaims
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - logging.openshift.io
        resources:
        - clusterloggings
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - operators.coreos.com
        resources:
        - subscriptions
        - clusterserviceversions
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - persistentvolumeclaims
        verbs:
        - '*'
      - apiGroups:
        - apps
        - extensions
        resources:
        - daemonsets
        verbs:
        - get
        - list
        - patch
        - update
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-openshift-logging
        namespace: openshift-logging
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-openshift-logging
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-machine-api
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: machine.openshift.io/v1beta1
      kind: MachineHealthCheck
      metadata:
        name: srep-infra-healthcheck
        namespace: openshift-machine-api
      spec:
        selector:
          matchLabels:
            machine.openshift.io/cluster-api-machine-role: infra
        unhealthyConditions:
        - type: Ready
          timeout: 480s
          status: 'False'
        - type: Ready
          timeout: 480s
          status: Unknown
        maxUnhealthy: 40%
    - apiVersion: machine.openshift.io/v1beta1
      kind: MachineHealthCheck
      metadata:
        name: srep-worker-healthcheck
        namespace: openshift-machine-api
      spec:
        selector:
          matchLabels:
            machine.openshift.io/cluster-api-machine-role: worker
        unhealthyConditions:
        - type: Ready
          timeout: 480s
          status: 'False'
        - type: Ready
          timeout: 480s
          status: Unknown
        maxUnhealthy: 40%
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-namespace-labels
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    patches:
    - kind: Namespace
      apiVersion: v1
      name: openshift-kube-apiserver
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"name":"openshift-kube-apiserver"} } }'
      patchType: merge
    - kind: Namespace
      apiVersion: v1
      name: openshift-operator-lifecycle-manager
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"name":"openshift-operator-lifecycle-manager"}
        } }'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-oauth-templates
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      applyMode: AlwaysApply
      kind: OAuth
      name: cluster
      patch: '{"spec":{"templates": {"login": {"name": "osd-oauth-templates-login"},"providerSelection":
        {"name": "osd-oauth-templates-providers"},"error": {"name": "osd-oauth-templates-errors"}}}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-oauth-templates-errors
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      data:
        errors.html: 
      kind: Secret
      metadata:
        creationTimestamp: null
        name: osd-oauth-templates-errors
        namespace: openshift-config
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-oauth-templates-login
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      data:
        login.html: 
      kind: Secret
      metadata:
        creationTimestamp: null
        name: osd-oauth-templates-login
        namespace: openshift-config
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-oauth-templates-providers
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      data:
        providers.html: 
      kind: Secret
      metadata:
        creationTimestamp: null
        name: osd-oauth-templates-providers
        namespace: openshift-config
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-project-request-template
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: dedicated-admins-project-config
      rules:
      - apiGroups:
        - config.openshift.io
        resources:
        - projects
        verbs:
        - get
        - patch
        - update
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: dedicated-admins-project-config
        namespace: openshift-config
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: dedicated-admins-project-config
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-project-request
        namespace: openshift-config
      rules:
      - apiGroups:
        - template.openshift.io
        resources:
        - templates
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-project-request
        namespace: openshift-config
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-project-request
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
    patches:
    - kind: Namespace
      apiVersion: v1
      name: default
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"name":"default"} } }'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-registry
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    patches:
    - apiVersion: imageregistry.operator.openshift.io/v1
      applyMode: AlwaysApply
      kind: Config
      name: cluster
      patch: '{"spec":{"defaultRoute":true,"nodeSelector":{"node-role.kubernetes.io/infra":""},"tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/infra","operator":"Exists"}]}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-strimzi-operator
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-strimzi
        annotations:
          openshift.io/node-selector: ''
        labels:
          openshift.io/cluster-logging: 'true'
    - apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        name: openshift-strimzi
        namespace: openshift-strimzi
      spec:
        serviceAccount:
          metadata:
            creationTimestamp: null
        targetNamespaces:
        - openshift-strimzi
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-strimzi
        namespace: openshift-strimzi
      rules:
      - apiGroups:
        - ''
        resources:
        - namespaces
        - pods
        - pods/log
        - events
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - operators.coreos.com
        resources:
        - subscriptions
        - clusterserviceversions
        verbs:
        - '*'
      - apiGroups:
        - monitoring.coreos.com
        resources:
        - prometheusrules
        - servicemonitors
        - podmonitors
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - secrets
        verbs:
        - create
        - update
        - get
        - list
        - watch
        - delete
      - apiGroups:
        - ''
        resources:
        - configmaps
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - kafka.strimzi.io
        resources:
        - '*'
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-openshift-strimzi
        namespace: openshift-strimzi
      subjects:
      - kind: Group
        name: dedicated-admins
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-openshift-strimzi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: rbac-permissions-operator-config
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: dedicated-admin
        annotations:
          openshift.io/node-selector: ''
    - apiVersion: template.openshift.io/v1
      kind: Template
      metadata:
        annotations:
          description: Switches the ClusterRole for the 'admin' RoleBinding from 'admin'
            to 'dedicated-admins-project'.
        name: osd-project-request
        namespace: openshift-config
      objects:
      - apiVersion: project.openshift.io/v1
        kind: Project
        metadata:
          annotations:
            openshift.io/description: ${PROJECT_DESCRIPTION}
            openshift.io/display-name: ${PROJECT_DISPLAYNAME}
            openshift.io/requester: ${PROJECT_REQUESTING_USER}
          creationTimestamp: null
          labels:
            name: ${PROJECT_NAME}
          name: ${PROJECT_NAME}
        spec: {}
        status: {}
      - apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          creationTimestamp: null
          name: admin
          namespace: ${PROJECT_NAME}
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: admin
        subjects:
        - apiGroup: rbac.authorization.k8s.io
          kind: User
          name: ${PROJECT_ADMIN_USER}
      parameters:
      - name: PROJECT_NAME
      - name: PROJECT_DISPLAYNAME
      - name: PROJECT_DESCRIPTION
      - name: PROJECT_ADMIN_USER
      - name: PROJECT_REQUESTING_USER
    - aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-dedicated-admins
            operator: In
            values:
            - cluster
        - matchExpressions:
          - key: olm.opgroup.permissions/aggregate-to-admin
            operator: In
            values:
            - openshift-logging
            - openshift-operators
            - openshift-operators-redhat
        - matchExpressions:
          - key: olm.owner.kind
            operator: In
            values:
            - OperatorGroup
          - key: olm.owner
            operator: NotIn
            values:
            - openshift-cluster-monitoring
            - olm-operators
            - cloud-ingress-operator
            - rbac-permissions-operator
            - splunk-forwarder-operator-og
            - redhat-layered-product-og
            - addon-rhmi-og
            - addon-rhmi-internal-og
            - rhmi-registry-og
          - key: olm.owner.namespace
            operator: NotIn
            values:
            - openshift-monitoring
            - openshift-operator-lifecycle-manager
            - openshift-cloud-ingress-operator
            - openshift-rbac-permissions
            - openshift-splunk-forwarder-operator
            - openshift-managed-upgrade-operator
            - openshift-velero
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: dedicated-admins-cluster
      rules: []
    - aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-dedicated-admins
            operator: In
            values:
            - project
        - matchExpressions:
          - key: rbac.authorization.k8s.io/aggregate-to-admin
            operator: In
            values:
            - 'true'
        - matchExpressions:
          - key: olm.opgroup.permissions/aggregate-to-admin
            operator: In
            values:
            - openshift-logging
            - openshift-operators
            - openshift-operators-redhat
        - matchExpressions:
          - key: olm.owner.kind
            operator: In
            values:
            - OperatorGroup
          - key: olm.owner.namespace
            operator: NotIn
            values:
            - openshift-cloud-ingress-operator
            - openshift-monitoring
            - openshift-operator-lifecycle-manager
            - openshift-rbac-permissions
            - openshift-splunk-forwarder-operator
            - openshift-velero
            - openshift-managed-upgrade-operator
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: dedicated-admins-project
      rules: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          managed.openshift.io/aggregate-to-dedicated-admins: cluster
        name: dedicated-admins-aggregate-cluster
      rules:
      - apiGroups:
        - rbac.authorization.k8s.io
        attributeRestrictions: null
        resources:
        - clusterroles
        - clusterrolebindings
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        - oauth.openshift.io
        attributeRestrictions: null
        resources:
        - oauthclientauthorizations
        verbs:
        - delete
        - get
        - list
        - watch
      - apiGroups:
        - ''
        - authorization.openshift.io
        attributeRestrictions: null
        resources:
        - resourceaccessreviews
        - subjectaccessreviews
        verbs:
        - create
      - apiGroups:
        - authorization.k8s.io
        attributeRestrictions: null
        resources:
        - subjectaccessreviews
        - selfsubjectaccessreviews
        verbs:
        - create
      - apiGroups:
        - ''
        - project.openshift.io
        attributeRestrictions: null
        resources:
        - projectrequests
        verbs:
        - create
      - apiGroups:
        - ''
        - security.openshift.io
        attributeRestrictions: null
        resources:
        - securitycontextconstraints
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        - network.openshift.io
        attributeRestrictions: null
        resources:
        - netnamespaces
        verbs:
        - get
        - list
        - update
      - apiGroups:
        - route.openshift.io
        resources:
        - routers/metrics
        verbs:
        - get
      - apiGroups:
        - ''
        resources:
        - namespaces
        verbs:
        - get
        - list
        - update
        - patch
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        - buildconfigs
        verbs:
        - list
      - apiGroups:
        - apps
        resources:
        - daemonsets
        - deployments
        - replicasets
        - statefulsets
        verbs:
        - list
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigs
        verbs:
        - list
      - apiGroups:
        - ''
        resources:
        - pods
        - replicationcontrollers
        - services
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - project.openshift.io
        resources:
        - projects
        verbs:
        - get
      - apiGroups:
        - route.openshift.io
        resources:
        - routes
        verbs:
        - list
        - get
      - apiGroups:
        - authentication.k8s.io
        resources:
        - tokenreviews
        verbs:
        - create
      - apiGroups:
        - authorization.k8s.io
        resources:
        - subjectaccessreviews
        verbs:
        - create
      - apiGroups:
        - operators.coreos.com
        - packages.operators.coreos.com
        resources:
        - '*'
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - '*'
        resources:
        - packagemanifests
        verbs:
        - list
      - apiGroups:
        - certificates.certmanager.k8s.io
        - issuers.certmanager.k8s.io
        - clusterissuers.certmanager.k8s.io
        - orders.certmanager.k8s.io
        - challenges.certmanager.k8s.io
        - anchoreengines.anchore.com
        - atlasmaps.atlasmap.io
        - builds.camel.apache.org
        - camelcatalogs.camel.apache.org
        - integrations.camel.apache.org
        - integrationcontexts.camel.apache.org
        - integrationplatforms.camel.apache.org
        - couchbaseclusters.couchbase.com
        - openliberties.openliberty.io
        - opsmxspinnakeroperators.charts.helm.k8s.io
        - seldondeployments.machinelearning.seldon.io
        - spinnakeroperators.charts.helm.k8s.io
        - twistlockconsoles.charts.helm.k8s.io
        resources:
        - '*'
        verbs:
        - '*'
      - apiGroups:
        - user.openshift.io
        resources:
        - groups
        - identities
        - users
        verbs:
        - get
        - list
        - update
        - patch
        - create
        - delete
      - apiGroups:
        - operator.openshift.io
        resources:
        - dnses
        resourceNames:
        - default
        verbs:
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        - image.openshift.io
        attributeRestrictions: null
        resources:
        - images
        - imagestreamtags
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - security.openshift.io
        resourceNames:
        - anyuid
        - nonroot
        resources:
        - securitycontextconstraints
        verbs:
        - use
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          managed.openshift.io/aggregate-to-dedicated-admins: project
        name: dedicated-admins-aggregate-project
      rules:
      - apiGroups:
        - ''
        attributeRestrictions: null
        resources:
        - limitranges
        - resourcequotas
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        - network.openshift.io
        attributeRestrictions: null
        resources:
        - egressnetworkpolicies
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - extensions
        attributeRestrictions: null
        resources:
        - daemonsets
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - rbac.authorization.k8s.io
        attributeRestrictions: null
        resources:
        - clusterrolebindings
        - rolebindings
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        attributeRestrictions: null
        resources:
        - events
        - namespaces
        - pods
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        - network.openshift.io
        attributeRestrictions: null
        resources:
        - clusternetworks
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        - image.openshift.io
        attributeRestrictions: null
        resources:
        - images
        - imagestreamtags
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        - build.openshift.io
        attributeRestrictions: null
        resources:
        - buildconfigs
        - builds
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - monitoring.coreos.com
        resources:
        - alertmanagers
        verbs:
        - '*'
      - apiGroups:
        - monitoring.coreos.com
        resources:
        - prometheuses
        - prometheusrules
        - servicemonitors
        - podmonitors
        verbs:
        - '*'
      - apiGroups:
        - kafka.strimzi.io
        resources:
        - '*'
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - apiextensions.k8s.io
        resources:
        - customresourcedefinitions
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - prow.k8s.io
        resources:
        - prowjobs
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - events
        verbs:
        - create
      - apiGroups:
        - metering.openshift.io
        resources:
        - reports/export
        verbs:
        - '*'
      - apiGroups:
        - coordination.k8s.io
        resources:
        - leases
        verbs:
        - '*'
    - aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: rbac.authorization.k8s.io/aggregate-to-view
            operator: In
            values:
            - 'true'
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-dedicated-readers
            operator: In
            values:
            - 'true'
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          managed.openshift.io/aggregate-to-dedicated-admins: cluster
        name: dedicated-readers
      rules: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          managed.openshift.io/aggregate-to-dedicated-readers: 'true'
          managed.openshift.io/aggregate-to-devaccess: 'true'
        name: osd-readers-aggregate
      rules:
      - apiGroups:
        - ''
        attributeRestrictions: null
        resources:
        - nodes
        - persistentvolumes
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        - quota.openshift.io
        attributeRestrictions: null
        resources:
        - clusterresourcequotas
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        - authorization.openshift.io
        attributeRestrictions: null
        resources:
        - clusterpolicybindings
        verbs:
        - get
        - list
      - apiGroups:
        - config.openshift.io
        resources:
        - clusterversions
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - metrics.k8s.io
        resources:
        - nodes
        - pods
        verbs:
        - list
      - apiGroups:
        - config.openshift.io
        resources:
        - infrastructures
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - coordination.k8s.io
        resources:
        - leases
        verbs:
        - get
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: dedicated-admins-cluster
      subjects:
      - kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: dedicated-admins-cluster
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-operators
        namespace: openshift-operators
      rules:
      - apiGroups:
        - operators.coreos.com
        resources:
        - subscriptions
        - clusterserviceversions
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - events
        verbs:
        - list
        - get
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-openshift-operators
        namespace: openshift-operators
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-openshift-operators
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-marketplace
        namespace: openshift-marketplace
      rules:
      - apiGroups:
        - operators.coreos.com
        resources:
        - catalogsourceconfigs
        verbs:
        - '*'
      - apiGroups:
        - '*'
        resources:
        - packagemanifests
        verbs:
        - list
        - get
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-openshift-marketplace
        namespace: openshift-marketplace
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-openshift-marketplace
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-dns
        namespace: openshift-dns
      rules:
      - apiGroups:
        - ''
        resources:
        - configmaps
        verbs:
        - list
        - get
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-openshift-dns
        namespace: openshift-dns
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-openshift-dns
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: dedicated-admin-serviceaccounts
        namespace: openshift-rbac-permissions
      spec:
        subjectKind: Group
        subjectName: system:serviceaccounts:dedicated-admin
        clusterPermissions:
        - dedicated-admins-cluster
        permissions:
        - clusterRoleName: dedicated-admins-project
          namespacesAllowedRegex: .*
          namespacesDeniedRegex: (^kube$|^kube-.*|^openshift$|^openshift-.*|^default$|^redhat-.*)
          allowFirst: true
        - clusterRoleName: admin
          namespacesAllowedRegex: .*
          namespacesDeniedRegex: (^kube$|^kube-.*|^openshift$|^openshift-.*|^default$|^redhat-.*)
          allowFirst: true
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: dedicated-admins
        namespace: openshift-rbac-permissions
      spec:
        subjectKind: Group
        subjectName: dedicated-admins
        clusterPermissions:
        - dedicated-admins-cluster
        permissions:
        - clusterRoleName: dedicated-admins-project
          namespacesAllowedRegex: .*
          namespacesDeniedRegex: (^kube$|^kube-.*|^openshift$|^openshift-.*|^default$|^redhat-.*)
          allowFirst: true
        - clusterRoleName: admin
          namespacesAllowedRegex: .*
          namespacesDeniedRegex: (^kube$|^kube-.*|^openshift$|^openshift-.*|^default$|^redhat-.*)
          allowFirst: true
    patches:
    - apiVersion: config.openshift.io/v1
      kind: Project
      name: cluster
      applyMode: AlwaysApply
      patch: '{"spec":{"projectRequestTemplate":{"name":"osd-project-request"}}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: resource-quotas
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    patches:
    - kind: Namespace
      apiVersion: v1
      name: openshift-etcd
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"managed.openshift.io/storage-pv-quota-exempt":"true"}
        } }'
      patchType: merge
    - kind: Namespace
      apiVersion: v1
      name: openshift-ingress
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"managed.openshift.io/service-lb-quota-exempt":"true"}
        } }'
      patchType: merge
    - kind: Namespace
      apiVersion: v1
      name: openshift-kube-apiserver
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"managed.openshift.io/service-lb-quota-exempt":"true"}
        } }'
      patchType: merge
    - kind: Namespace
      apiVersion: v1
      name: openshift-monitoring
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"managed.openshift.io/storage-pv-quota-exempt":"true"}
        } }'
      patchType: merge
    - kind: Namespace
      apiVersion: v1
      name: openshift-sre-sshd
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"managed.openshift.io/service-lb-quota-exempt":"true"}
        } }'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: sre-authorization
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: user.openshift.io/v1
      kind: Group
      metadata:
        name: osd-sre-cluster-admins
      users: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: osd-sre-cluster-admins
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: Group
        name: osd-sre-cluster-admins
    - apiVersion: user.openshift.io/v1
      kind: Group
      metadata:
        name: osd-sre-admins
      users: ${{SREP_USERS}}
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: osd-sre-admin
      rules:
      - apiGroups:
        - '*'
        resources:
        - '*'
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        resources:
        - nodes
        verbs:
        - patch
      - apiGroups:
        - ''
        resources:
        - pods/eviction
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - pods/exec
        verbs:
        - create
      - apiGroups:
        - batch
        resources:
        - jobs
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - config.openshift.io
        resources:
        - projects
        verbs:
        - '*'
      - apiGroups:
        - project.openshift.io
        resources:
        - projects
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - namespaces
        - namespaces/finalize
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/attach
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - pods
        verbs:
        - delete
      - apiGroups:
        - security.openshift.io
        resources:
        - podsecuritypolicyreviews
        - podsecuritypolicyselfsubjectreviews
        - podsecuritypolicysubjectreviews
        verbs:
        - create
      - apiGroups:
        - user.openshift.io
        resources:
        - groups
        verbs:
        - patch
        - update
      - apiGroups:
        - config.openshift.io
        resources:
        - clusterversions
        verbs:
        - patch
        - update
      - apiGroups:
        - authorization.openshift.io
        resources:
        - localresourceaccessreviews
        verbs:
        - create
      - nonResourceURLs:
        - '*'
        verbs:
        - '*'
      - apiGroups:
        - logging.openshift.io
        resources:
        - '*'
        verbs:
        - '*'
      - apiGroups:
        - certificates.k8s.io
        resources:
        - certificatesigningrequests/approval
        verbs:
        - update
      - apiGroups:
        - velero.io
        resources:
        - backups
        verbs:
        - create
      - apiGroups:
        - velero.io
        resources:
        - deletebackuprequests
        - downloadrequests
        - serverstatusrequests
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: osd-sre-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: osd-sre-admin
      subjects:
      - kind: Group
        name: osd-sre-admins
    - apiVersion: v1
      data:
        ca.crt: '-----BEGIN CERTIFICATE-----

          MIIENDCCAxygAwIBAgIJANunI0D662cnMA0GCSqGSIb3DQEBCwUAMIGlMQswCQYD

          VQQGEwJVUzEXMBUGA1UECAwOTm9ydGggQ2Fyb2xpbmExEDAOBgNVBAcMB1JhbGVp

          Z2gxFjAUBgNVBAoMDVJlZCBIYXQsIEluYy4xEzARBgNVBAsMClJlZCBIYXQgSVQx

          GzAZBgNVBAMMElJlZCBIYXQgSVQgUm9vdCBDQTEhMB8GCSqGSIb3DQEJARYSaW5m

          b3NlY0ByZWRoYXQuY29tMCAXDTE1MDcwNjE3MzgxMVoYDzIwNTUwNjI2MTczODEx

          WjCBpTELMAkGA1UEBhMCVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRAwDgYD

          VQQHDAdSYWxlaWdoMRYwFAYDVQQKDA1SZWQgSGF0LCBJbmMuMRMwEQYDVQQLDApS

          ZWQgSGF0IElUMRswGQYDVQQDDBJSZWQgSGF0IElUIFJvb3QgQ0ExITAfBgkqhkiG

          9w0BCQEWEmluZm9zZWNAcmVkaGF0LmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEP

          ADCCAQoCggEBALQt9OJQh6GC5LT1g80qNh0u50BQ4sZ/yZ8aETxt+5lnPVX6MHKz

          bfwI6nO1aMG6j9bSw+6UUyPBHP796+FT/pTS+K0wsDV7c9XvHoxJBJJU38cdLkI2

          c/i7lDqTfTcfLL2nyUBd2fQDk1B0fxrskhGIIZ3ifP1Ps4ltTkv8hRSob3VtNqSo

          GxkKfvD2PKjTPxDPWYyruy9irLZioMffi3i/gCut0ZWtAyO3MVH5qWF/enKwgPES

          X9po+TdCvRB/RUObBaM761EcrLSM1GqHNueSfqnho3AjLQ6dBnPWlo638Zm1VebK

          BELyhkLWMSFkKwDmne0jQ02Y4g075vCKvCsCAwEAAaNjMGEwHQYDVR0OBBYEFH7R

          4yC+UehIIPeuL8Zqw3PzbgcZMB8GA1UdIwQYMBaAFH7R4yC+UehIIPeuL8Zqw3Pz

          bgcZMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMA0GCSqGSIb3DQEB

          CwUAA4IBAQBDNvD2Vm9sA5A9AlOJR8+en5Xz9hXcxJB5phxcZQ8jFoG04Vshvd0e

          LEnUrMcfFgIZ4njMKTQCM4ZFUPAieyLx4f52HuDopp3e5JyIMfW+KFcNIpKwCsak

          oSoKtIUOsUJK7qBVZxcrIyeQV2qcYOeZhtS5wBqIwOAhFwlCET7Ze58QHmS48slj

          S9K0JAcps2xdnGu0fkzhSQxY8GPQNFTlr6rYld5+ID/hHeS76gq0YG3q6RLWRkHf

          4eTkRjivAlExrFzKcljC4axKQlnOvVAzz+Gm32U0xPBF4ByePVxCJUHw1TsyTmel

          RxNEp7yHoXcwn+fXna+t5JWh1gxUZty3

          -----END CERTIFICATE-----

          '
      kind: ConfigMap
      metadata:
        name: osd-ldap-ca-configmap
        namespace: openshift-config
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: sre-build-test
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-build-test
        labels:
          openshift.io/cluster-monitoring: 'true'
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: sre-build-test
        namespace: openshift-build-test
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: sre-build-test
      rules:
      - apiGroups:
        - ''
        resources:
        - namespaces
        verbs:
        - create
        - delete
      - apiGroups:
        - build.openshift.io
        resources:
        - buildconfigs
        - builds
        verbs:
        - create
        - list
      - apiGroups:
        - image.openshift.io
        resources:
        - imagestreams
        verbs:
        - create
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: sre-build-test
      roleRef:
        kind: ClusterRole
        name: sre-build-test
        apiGroup: rbac.authorization.k8s.io
      subjects:
      - kind: ServiceAccount
        name: sre-build-test
        namespace: openshift-build-test
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: sre-build-test
        namespace: openshift-build-test
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: sre-build-test
      subjects:
      - kind: ServiceAccount
        name: sre-build-test
        namespace: openshift-build-test
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: sre-build-test
        namespace: openshift-build-test
      rules:
      - apiGroups:
        - batch
        resources:
        - jobs
        verbs:
        - list
        - delete
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: sre-build-test
        namespace: openshift-build-test
      spec:
        failedJobsHistoryLimit: 5
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Forbid
        schedule: 11 * * * *
        jobTemplate:
          spec:
            template:
              spec:
                affinity:
                  nodeAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                      nodeSelectorTerms:
                      - matchExpressions:
                        - key: node-role.kubernetes.io
                          operator: In
                          values:
                          - infra
                tolerations:
                - operator: Equal
                  key: node-role.kubernetes.io
                  value: infra
                  effect: NoSchedule
                serviceAccountName: sre-build-test
                restartPolicy: Never
                containers:
                - name: sre-build-test
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  imagePullPolicy: Always
                  env:
                  - name: POD_NAME
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.name
                  - name: POD_NS
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
                  command:
                  - /bin/bash
                  - -c
                  - "# ensure we fail if something exits non-zero\nset -o errexit\n\
                    set -o nounset\nset -o pipefail\n\n# cleanup traps on exiting,\
                    \ so these always run\ncleanup () {\n  echo \"$(date): Done, deleting\
                    \ build NS=$NS\"\n  oc delete ns \"${NS}\"\n}\ntrap \"cleanup\"\
                    \ EXIT SIGINT\n\n# set NS to include job name, to ease linking\
                    \ namespace to a specific job\nJOB_PREFIX=sre-build-test\nNS=\"\
                    ${POD_NS}-${POD_NAME##${JOB_PREFIX}-}\"\nJOB_NAME=$(echo \"${POD_NAME}\"\
                    \ | rev | cut -d- -f2- | rev)\n\nGET_FAILED_JOBS=$(cat <<END\n\
                    import json,sys\nr = json.load(sys.stdin)\n# create a list of\
                    \ jobs\njobs = [ job['metadata']['name'] for job in r['items']\
                    \ if\n  # no jobs are currently running \n  ( not 'active' in\
                    \ job['status']) and\n  # if '.status.failed' exists on job\n\
                    \  'failed' in job['status'] and\n  # if job failed count is bigger\
                    \ than backoffLimit\n  #\n  # this check is because the failed\
                    \ tries can be one less than limit\n  # see code in https://github.com/kubernetes/kubernetes/blob/master/pkg/controller/job/job_controller.go#L509\n\
                    \  # if this changes we should consider using an easier implementation\n\
                    \  job['spec']['backoffLimit'] - 1 <= job['status']['failed']]\n\
                    print(\" \".join(jobs))\nEND\n)\noc create ns \"${NS}\"\n\n# run\
                    \ build\noc -n \"${NS}\" new-build nodejs~https://github.com/openshift/nodejs-ex\
                    \ --name=\"${JOB_PREFIX}\"\necho \"$(date): Waiting for build\
                    \ to complete.\"\nwhile :\ndo\n  ST=$(oc -n \"${NS}\" get build\
                    \ -o custom-columns=STATUS:.status.phase --no-headers)\n  case\
                    \ ${ST} in\n    \"\")\n      # if build status is blank, assume\
                    \ we are still starting the build\n      ST=\"Starting\"\n   \
                    \   ;;\n    Failed)\n      echo \"$(date): Build Failed\" >&2\n\
                    \      exit 1\n      ;;\n    Cancelled)\n      echo \"$(date):\
                    \ Build was Cancelled\" >&2\n      exit 1\n      ;;\n    Complete)\n\
                    \      echo \"$(date): Build Complete\"\n      # Get all job names\
                    \ that have exceeded failed retries\n      JOBS=$(oc -n \"${POD_NS}\"\
                    \ get job -o json)\n      JOBS_TO_DELETE=$(echo \"${JOBS}\" |\
                    \ python -c \"$GET_FAILED_JOBS\")\n\n      if [[ -n \"${JOBS_TO_DELETE}\"\
                    \ ]] ; then\n        echo \"$(date): Selected jobs for deletion:\
                    \ ${JOBS_TO_DELETE}\"\n        echo \"${JOBS_TO_DELETE}\" | xargs\
                    \ oc -n \"${POD_NS}\" delete job\n      fi\n      break\n    \
                    \  ;;\n  esac\n  echo \"$(date): Build is ${ST}; checking build\
                    \ again in 15 seconds, NS=${NS}\"\n  sleep 15\ndone\nexit 0\n"
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-alerts-stuck-builds
          role: alert-rules
        name: sre-alerts-stuck-builds
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-alerts-stuck-builds
          rules:
          - alert: StuckNewBuilds3MinSRE
            expr: count(openshift_build_active_time_seconds{phase="New",exported_namespace=~"^openshift-build-test.*"}
              < time() - 180) > 0
            labels:
              severity: warning
              namespace: openshift-monitoring
          - alert: StuckPendingBuilds3MinSRE
            expr: count(openshift_build_active_time_seconds{phase="Pending",exported_namespace=~"^openshift-build-test.*"}
              < time() - 180) > 0
            labels:
              severity: warning
              namespace: openshift-monitoring
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: sre-prometheus
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-alertmanager-silences-active
          role: alert-rules
        name: sre-alertmanager-silences-active
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-alertmanager-silences-active
          rules:
          - alert: AlertmanagerSilencesActiveSRE
            expr: count(alertmanager_silences{state="active"} == 1) > 0 unless (count(cluster_version{type="updating"})
              > 0)
            for: 15m
            labels:
              severity: warning
              namespace: openshift-monitoring
            annotations:
              message: Active AlertManager silences have been detected on the cluster
                for the last 15 minutes. As a result, active alerts may potentially
                not be being reported back.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-configure-alertmanager-operator-offline-alerts
          role: alert-rules
        name: sre-configure-alertmanager-operator-offline-alerts
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-configure-alertmanager-operator-offline-alerts
          rules:
          - alert: ConfigureAlertmanagerOperatorOfflineSRE
            expr: absent(up{service="configure-alertmanager-operator"})
            for: 15m
            labels:
              severity: critical
              namespace: openshift-monitoring
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-csv-abnormal
          role: alert-rules
        name: sre-csv-abnormal
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-csv-abnormal-alerts
          rules:
          - alert: CsvAbnormalReplacingOver30MinSRE
            expr: csv_abnormal{phase=~"(^Replacing$|^Failed$|^Unknown$)",exported_namespace=~"(^openshift.*|^kube.*|^redhat.*|^default$)"}
            for: 30m
            labels:
              severity: warning
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: 'CSV {{ $labels.name }} version {{ $labels.version }} is in
                an abnormal state. Reason: {{ $labels.reason }}'
              link: https://github.com/openshift/ops-sop/blob/master/v4/alerts/CsvAbnormalSRE.md
          - alert: CsvAbnormalReplacingOver4HrSRE
            expr: csv_abnormal{phase=~"(^Replacing$|^Failed$|^Unknown$)",exported_namespace=~"(^openshift.*|^kube.*|^redhat.*|^default$)"}
            for: 4h
            labels:
              severity: critical
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: 'CSV {{ $labels.name }} version {{ $labels.version }} is in
                an abnormal state. Reason: {{ $labels.reason }}'
              link: https://github.com/openshift/ops-sop/blob/master/v4/alerts/CsvAbnormalSRE.md
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-dns-alerts
          role: alert-rules
        name: sre-dns-alerts
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-dns-alerts
          rules:
          - alert: DNSLatencyOver200ms5MinSRE
            expr: max_over_time(dns_latency_milliseconds_sum[5m]) > 0.2
            labels:
              severity: critical
              namespace: openshift-monitoring
          - alert: DNSErrors05MinSRE
            expr: rate(dns_failure_failure_total[5m]) > 0
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              message: DNS checks have been failing for the past 5 minutes on pod-
                {{ $labels.pod }}
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-excessive-memory
          role: alert-rules
        name: sre-excessive-memory
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-excessive-memory
          rules:
          - alert: ExcessiveContainerMemoryWarningSRE
            expr: container_memory_rss{namespace=~"(^openshift.*|^kube.*|^default$)",namespace!="openshift-customer-monitoring",container_name!="",container_name!="POD",pod!~"(^prometheus-k8s-.*|^elasticsearch-.*)"}/1024/1024/1024>3
            for: 30m
            labels:
              severity: warning
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: System container {{ $labels.namespace }}/{{ $labels.pod_name
                }}/{{ $labels.container_name }} is using in excess of 3G of memory
                for over 30 minutes.
          - alert: ExcessiveContainerMemoryCriticalSRE
            expr: container_memory_rss{namespace=~"(^openshift.*|^kube.*|^default$)",namespace!="openshift-customer-monitoring",container_name!="",container_name!="POD",pod!~"(^prometheus-k8s-.*|^elasticsearch-.*)"}/1024/1024/1024>5
            for: 30m
            labels:
              severity: critical
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: System container {{ $labels.namespace }}/{{ $labels.pod_name
                }}/{{ $labels.container_name }} is using in excess of 5G of memory
                for over 30 minutes.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: k8s
          role: alert-rules
        name: sre-ocp-overrides
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-ocp-overrides
          rules:
          - alert: KubeAPILatencyHighSRE
            annotations:
              message: The API server has a 99th percentile latency of {{ $value }}
                seconds for {{ $labels.verb }} {{ $labels.resource }}.
            expr: 'cluster_quantile:apiserver_request_duration_seconds:histogram_quantile{job="apiserver",quantile="0.99",subresource!="log",verb!~"^(?:LIST|WATCH|WATCHLIST|PROXY|CONNECT)$"}
              > 1

              '
            for: 25m
            labels:
              severity: warning
              namespace: openshift-monitoring
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: layered-sre-cluster-admins
          role: alert-rules
        name: layered-sre-cluster-admins
        namespace: openshift-monitoring
      spec:
        groups:
        - name: layered-sre-cluster-admins
          rules:
          - alert: ElevatingClusterAdminLayeredSRE
            expr: openshift_group_user_account{group="layered-sre-cluster-admins"}
              == 1
            for: 130m
            labels:
              severity: warning
              namespace: redhat-layered
            annotations:
              message: Layered SRE "{{ $labels.user }}" elevated to layered cluster-admin({{
                $labels.group }}) more than 2 hours.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-managed-upgrade-operator-alerts
          role: alert-rules
        name: sre-managed-upgrade-operator-alerts
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-managed-upgrade-operator-alerts
          rules:
          - alert: UpgradeConfigValidationFailedSRE
            expr: upgradeoperator_upgradeconfig_validation_failed > 0
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              summary: Upgrade config validation failed
              description: Upgrade config validation failed
          - alert: UpgradeClusterCheckFailedSRE
            expr: upgradeoperator_cluster_check_failed > 0
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              summary: cluster check failed
              description: basic cluster checks failed on either before the upgrade
                or after the upgrade
          - alert: UpgradeNodeScalingFailedSRE
            expr: upgradeoperator_scaling_failed > 0
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              summary: node scaling failed
              description: The extra machine/node was not ready before the upgrade
                started
          - alert: UpgradeClusterVerificationFailedSRE
            expr: upgradeoperator_cluster_verification_failed > 0
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              summary: cluster verification failed
              description: Some of the infra components which are running on the cluster
                are not working well after the upgrade
          - alert: UpgradeControlPlaneUpgradeTimeoutSRE
            expr: upgradeoperator_controlplane_timeout > 0
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              summary: Controlplane upgrade timeout for {{ $labels.version }}
              description: controlplane upgrade for {{ $labels.version }} cannot be
                finished in the given time period
          - alert: UpgradeNodeUpgradeTimeoutSRE
            expr: upgradeoperator_worker_timeout > 0
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              summary: Nodes upgrade timeout for {{ $labels.version }}
              description: nodes upgrade for {{ $labels.version }} cannot be finished
                after the silence expired
          - alert: UpgradeWindowBreachedSRE
            expr: upgradeoperator_upgrade_window_breached > 0
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              summary: Cluster upgrade window breached
              description: A cluster has not commenced upgrading during its scheduled
                upgrade window.
          - alert: UpgradeNodeDrainFailedSRE
            expr: upgradeoperator_node_drain_timeout > 0
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              summary: Node drain failed in the given time period which is not caused
                by the PDB
              description: node drain takes too long and cannot be finished in the
                given time period during cluster upgrade
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-managed-velero-operator-alerts
          role: alert-rules
        name: sre-managed-velero-operator-alerts
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-managed-velero-operator-alerts
          rules:
          - alert: VeleroHourlyObjectBackupMissed
            expr: 'time() - clamp_min(velero_backup_last_successful_timestamp{namespace="openshift-velero",schedule="hourly-object-backup"},

              scalar(max(kube_deployment_created{namespace="openshift-velero",deployment="velero"})))
              > 3600 + 600

              '
            labels:
              severity: warning
              namespace: openshift-monitoring
            annotations:
              message: The hourly Velero backup has not successfully completed
          - alert: VeleroDailyFullBackupMissed
            expr: 'time() - clamp_min(velero_backup_last_successful_timestamp{namespace="openshift-velero",schedule="daily-full-backup"},

              scalar(max(kube_deployment_created{namespace="openshift-velero",deployment="velero"})))
              > 86400 + 600

              '
            labels:
              severity: warning
              namespace: openshift-monitoring
            annotations:
              message: The daily Velero backup has not successfully completed
          - alert: VeleroWeeklyFullBackupMissed
            expr: 'time() - clamp_min(velero_backup_last_successful_timestamp{namespace="openshift-velero",schedule="weekly-full-backup"},

              scalar(max(kube_deployment_created{namespace="openshift-velero",deployment="velero"})))
              > 604800 + 600

              '
            labels:
              severity: warning
              namespace: openshift-monitoring
            annotations:
              message: The weekly Velero backup has not successfully completed
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-node-unschedulable
          role: alert-rules
        name: sre-node-unschedulable
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-node-unschedulable
          rules:
          - alert: KubeNodeUnschedulableSRE
            expr: kube_node_spec_unschedulable > 0
            for: 1h
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              message: The node {{ $labels.node }} has been unscedulable for more
                than an hour.
              link: https://github.com/openshift/ops-sop/blob/master/v3/alerts/openshift_node_not_schedulable.asciidoc
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-router-health
          role: alert-rules
        name: sre-router-health
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-router-health
          rules:
          - alert: RouterAvailabilityLT50PctSRE
            expr: "(sum(avg_over_time(kube_replicationcontroller_status_ready_replicas[1h]))\
              \ by (replicationcontroller,namespace) \n/\non(replicationcontroller,namespace)\n\
              max(kube_replicationcontroller_status_replicas{namespace=\"default\"\
              ,replicationcontroller=~\"router.?-.*\"} >0) by (replicationcontroller,namespace))\
              \ < 0.5\n"
            labels:
              severity: warning
              namespace: openshift-monitoring
          - alert: RouterAvailabilityLT30PctSRE
            expr: "(sum(avg_over_time(kube_replicationcontroller_status_ready_replicas[1h]))\
              \ by (replicationcontroller,namespace) \n/\non(replicationcontroller,namespace)\n\
              max(kube_replicationcontroller_status_replicas{namespace=\"default\"\
              ,replicationcontroller=~\"router.?-.*\"} >0) by (replicationcontroller,namespace))\
              \ < 0.3\n"
            labels:
              severity: critical
              namespace: openshift-monitoring
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: k8s
          role: alert-rules
        name: sre-uptime-sla
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-uptime-sla
          rules:
          - alert: SLAUptimeSRE
            annotations:
              message: The API server has had 100 percent request failures for 300
                seconds.
            expr: '(sum(rate(apiserver_request_total{job="apiserver", code=~"(400|5..)"}[5m]))
              / sum(rate(apiserver_request_total{job="apiserver", code=~"([1-5]..)"}[5m]))
              >= 1)

              '
            for: 5m
            labels:
              severity: warning
              namespace: openshift-monitoring
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: osd-sre-cluster-admins
          role: alert-rules
        name: osd-sre-cluster-admins
        namespace: openshift-monitoring
      spec:
        groups:
        - name: osd-sre-cluster-admins
          rules:
          - alert: ElevatingClusterAdminSRE
            expr: openshift_group_user_account{group="osd-sre-cluster-admins"} ==
              1
            for: 130m
            labels:
              severity: warning
              namespace: openshift-monitoring
            annotations:
              message: SRE "{{ $labels.user }}" elevated to cluster-admin({{ $labels.group
                }}) more than 2 hours.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-kubequotaexceeded
          role: alert-rules
        name: sre-kubequotaexceeded
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-kubequotaexceeded
          rules:
          - alert: KubeQuotaExceededSRE
            expr: 'kube_resourcequota{namespace=~"(^kube$|^kube-.*|^openshift$|^openshift-.*|^default$)",job="kube-state-metrics",
              type="used"}

              / ignoring(instance, job, type)

              (kube_resourcequota{namespace=~"(^kube$|^kube-.*|^openshift$|^openshift-.*|^default$)",job="kube-state-metrics",
              type="hard"} > 0)

              > 1

              '
            for: 30m
            labels:
              severity: warning
              namespace: openshift-monitoring
            annotations:
              message: Quota limit exceeded in namespace {{ $labels.namespace }}.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-pruning
          role: alert-rules
        name: sre-pruning
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-pruning
          rules:
          - alert: PruningCronjobErrorSRE
            expr: kube_cronjob_status_active{namespace="openshift-sre-pruning"}>0
            for: 30m
            labels:
              severity: critical
              namespace: openshift-sre-pruning
            annotations:
              message: SRE Pruning Job {{ $labels.namespace }}/{{ $labels.cronjob
                }} is taking more than thirty minutes to complete.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-pv
          role: alert-rules
        name: sre-pv
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-pv-customer
          rules:
          - alert: KubePersistentVolumeUsageCriticalCustomer
            expr: '100

              * kubelet_volume_stats_available_bytes{job="kubelet",namespace!~"(^openshift-.*|^kube-.*|^default$|^redhat-.*)"}

              / kubelet_volume_stats_capacity_bytes{job="kubelet",namespace!~"(^openshift-.*|^kube-.*|^default$|^redhat-.*)"}

              < 3

              '
            labels:
              severity: critical
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: The customer PersistentVolume claimed by {{ $labels.persistentvolumeclaim
                }} in Namespace {{ $labels.namespace }} is only {{ printf "%0.2f"
                $value }}% free.
          - alert: KubePersistentVolumeFullInFourDaysCustomer
            expr: '100

              * (kubelet_volume_stats_available_bytes{job="kubelet",namespace!~"(^openshift-.*|^kube-.*|^default$|^redhat-.*)"}

              / kubelet_volume_stats_capacity_bytes{job="kubelet",namespace!~"(^openshift-.*|^kube-.*|^default$|^redhat-.*)"})

              < 15 and predict_linear(kubelet_volume_stats_available_bytes{job="kubelet",namespace!~"(^openshift-.*|^kube-.*|^default$|^redhat-.*)"}[6h],

              4 * 24 * 3600) < 0

              '
            labels:
              severity: warning
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: Based on recent sampling, the customer PersistentVolume claimed
                by {{ $labels.persistentvolumeclaim }} in Namespace {{ $labels.namespace
                }} is expected to fill up within four days. Currently {{ printf "%0.2f"
                $value }}% is available.
        - name: sre-pv-lp
          rules:
          - alert: KubePersistentVolumeUsageCriticalLayeredProduct
            expr: '100

              * kubelet_volume_stats_available_bytes{job="kubelet",namespace=~"(^redhat-.*)",namespace!~"(^redhat-rhmi.*)"}

              / kubelet_volume_stats_capacity_bytes{job="kubelet",namespace=~"(^redhat-.*)",namespace!~"(^redhat-rhmi.*)"}

              < 3

              '
            labels:
              severity: critical
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: The customer PersistentVolume claimed by {{ $labels.persistentvolumeclaim
                }} in Namespace {{ $labels.namespace }} is only {{ printf "%0.2f"
                $value }}% free.
          - alert: KubePersistentVolumeFullInFourDaysLayeredProduct
            expr: '100

              * (kubelet_volume_stats_available_bytes{job="kubelet",namespace=~"(^redhat-.*)",namespace!~"(^redhat-rhmi.*)"}

              / kubelet_volume_stats_capacity_bytes{job="kubelet",namespace=~"(^redhat-.*)",namespace!~"(^redhat-rhmi.*)"})

              < 15 and predict_linear(kubelet_volume_stats_available_bytes{job="kubelet",namespace=~"(^redhat-.*)",namespace!~"(^redhat-rhmi.*)"}[6h],

              4 * 24 * 3600) < 0

              '
            labels:
              severity: warning
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: Based on recent sampling, the customer PersistentVolume claimed
                by {{ $labels.persistentvolumeclaim }} in Namespace {{ $labels.namespace
                }} is expected to fill up within four days. Currently {{ printf "%0.2f"
                $value }}% is available.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-telemeter-client
          role: alert-rules
        name: sre-telemeter-client
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-telemeter-client
          rules:
          - alert: MetricsClientSendFailingSRE
            expr: absent(rate(metricsclient_request_send{status_code="200"}[5m]) >
              0) or rate(metricsclient_request_send{status_code!="200"}[5m]) > 0
            for: 15m
            labels:
              severity: critical
              namespace: openshift-monitoring
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: sre-prometheus-aws
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        hive.openshift.io/cluster-platform: aws
    resourceApplyMode: Sync
    resources:
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-cloud-ingress-operator-offline-alerts
          role: alert-rules
        name: sre-cloud-ingress-operator-offline-alerts
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-cloud-ingress-operator-offline-alerts
          rules:
          - alert: CloudIngressOperatorOfflineSRE
            expr: absent(up{service="localmetrics-cloud-ingress-operator", namespace="openshift-cloud-ingress-operator"})
            for: 15m
            labels:
              severity: critical
              namespace: openshift-monitoring
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-ebs-iops-burstbalance
          role: alert-rules
        name: sre-ebs-iops-burstbalance
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-ebs-iops-burstbalance
          rules:
          - alert: EbsVolumeBurstBalanceLT40PctSRE
            expr: avg(ebs_iops_credits) < 40
            for: 60m
            labels:
              severity: warning
              namespace: openshift-monitoring
          - alert: EbsVolumeBurstBalanceLT20PctSRE
            expr: avg(ebs_iops_credits) < 20
            for: 60m
            labels:
              severity: critical
              namespace: openshift-monitoring
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-alerts-stuck-volumes
          role: alert-rules
        name: sre-alerts-stuck-volumes
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-alerts-stuck-volumes
          rules:
          - alert: EbsVolumeStuckAttaching5MinSRE
            expr: ebs_volume_state{ebs_volume_state="attaching"} > 0
            for: 5m
            labels:
              severity: warning
              namespace: openshift-monitoring
          - alert: EbsVolumeStuckAttaching10MinSRE
            expr: ebs_volume_state{ebs_volume_state="attaching"} > 0
            for: 10m
            labels:
              severity: critical
              namespace: openshift-monitoring
          - alert: EbsVolumeStuckDetaching5MinSRE
            expr: ebs_volume_state{ebs_volume_state="detaching"} > 0
            for: 5m
            labels:
              severity: warning
              namespace: openshift-monitoring
          - alert: EbsVolumeStuckDetaching10MinSRE
            expr: ebs_volume_state{ebs_volume_state="detaching"} > 0
            for: 10m
            labels:
              severity: critical
              namespace: openshift-monitoring
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: sre-pruning
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-sre-pruning
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: sre-pruner-sa
        namespace: openshift-sre-pruning
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: sre-pruner-images
      roleRef:
        kind: ClusterRole
        name: system:image-pruner
        apiGroup: rbac.authorization.k8s.io
      subjects:
      - kind: ServiceAccount
        name: sre-pruner-sa
        namespace: openshift-sre-pruning
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: sre-pruner-buildsdeploys-cr
      rules:
      - apiGroups:
        - ''
        resources:
        - pods
        - replicationcontrollers
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - replicationcontrollers
        verbs:
        - delete
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigs
        verbs:
        - get
        - list
      - apiGroups:
        - build.openshift.io
        resources:
        - buildconfigs
        - builds
        verbs:
        - list
        - get
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        verbs:
        - delete
      - apiGroups:
        - monitoring.coreos.com
        resources:
        - prometheusrules
        verbs:
        - delete
      - apiGroups:
        - apiextensions.k8s.io
        resources:
        - customresourcedefinitions
        verbs:
        - delete
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: sre-pruner-buildsdeploys-pruning
      roleRef:
        kind: ClusterRole
        name: sre-pruner-buildsdeploys-cr
        apiGroup: rbac.authorization.k8s.io
      subjects:
      - kind: ServiceAccount
        name: sre-pruner-sa
        namespace: openshift-sre-pruning
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: alert-pruner
        namespace: openshift-sre-pruning
      spec:
        failedJobsHistoryLimit: 5
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Replace
        schedule: 0 */1 * * *
        jobTemplate:
          spec:
            template:
              spec:
                serviceAccountName: sre-pruner-sa
                restartPolicy: Never
                containers:
                - name: alert-pruner
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  imagePullPolicy: Always
                  args:
                  - /bin/bash
                  - -c
                  - oc delete prometheusrules.monitoring.coreos.com/kube-apiserver
                    --namespace=openshift-kube-apiserver --ignore-not-found
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: builds-pruner
        namespace: openshift-sre-pruning
      spec:
        failedJobsHistoryLimit: 5
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Replace
        schedule: 0 */1 * * *
        jobTemplate:
          spec:
            template:
              spec:
                serviceAccountName: sre-pruner-sa
                restartPolicy: Never
                containers:
                - name: builds-pruner
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  imagePullPolicy: Always
                  command:
                  - oc
                  - adm
                  - prune
                  - builds
                  - --keep-younger-than=24h
                  - --keep-complete=1
                  - --keep-failed=1
                  - --confirm
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: crd-pruner
        namespace: openshift-sre-pruning
      spec:
        failedJobsHistoryLimit: 5
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Replace
        schedule: 0 */1 * * *
        jobTemplate:
          spec:
            template:
              spec:
                serviceAccountName: sre-pruner-sa
                restartPolicy: Never
                containers:
                - name: crd-pruner
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  imagePullPolicy: Always
                  args:
                  - /bin/bash
                  - -c
                  - oc delete customresourcedefinition.apiextensions.k8s.io/machinedisruptionbudgets.healthchecking.openshift.io
                    customresourcedefinition.apiextensions.k8s.io/machinehealthchecks.healthchecking.openshift.io
                    --ignore-not-found
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: deployments-pruner
        namespace: openshift-sre-pruning
      spec:
        failedJobsHistoryLimit: 5
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Replace
        schedule: 0 */1 * * *
        jobTemplate:
          spec:
            template:
              spec:
                serviceAccountName: sre-pruner-sa
                restartPolicy: Never
                containers:
                - name: deployments-pruner
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  imagePullPolicy: Always
                  command:
                  - oc
                  - adm
                  - prune
                  - deployments
                  - --keep-complete=1
                  - --keep-younger-than=24h
                  - --keep-failed=1
                  - --confirm
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: image-pruner
        namespace: openshift-sre-pruning
      spec:
        failedJobsHistoryLimit: 5
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Replace
        schedule: 0 */1 * * *
        jobTemplate:
          spec:
            template:
              spec:
                serviceAccountName: sre-pruner-sa
                restartPolicy: Never
                containers:
                - name: image-pruner
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  imagePullPolicy: Always
                  args:
                  - /bin/bash
                  - -c
                  - oc adm prune images --token=$$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
                    --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
                    --keep-younger-than=24h --keep-tag-revisions=5 --ignore-invalid-refs=true
                    --confirm
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: velero-configuration
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: managed.openshift.io/v1alpha2
      kind: VeleroInstall
      metadata:
        name: cluster
        namespace: openshift-velero
    - apiVersion: velero.io/v1
      kind: Schedule
      metadata:
        name: daily-full-backup
        namespace: openshift-velero
      spec:
        schedule: 0 1 * * *
        template:
          includedNamespaces:
          - '*'
          ttl: 168h0m0s
    - apiVersion: velero.io/v1
      kind: Schedule
      metadata:
        name: hourly-object-backup
        namespace: openshift-velero
      spec:
        schedule: 17 * * * *
        template:
          includedNamespaces:
          - '*'
          ttl: 24h0m0s
    - apiVersion: velero.io/v1
      kind: Schedule
      metadata:
        name: weekly-full-backup
        namespace: openshift-velero
      spec:
        schedule: 0 2 * * 1
        template:
          includedNamespaces:
          - '*'
          ttl: 720h0m0s
- apiVersion: v1
  data:
    environment: stage
  kind: ConfigMap
  metadata:
    name: hive-environment
    namespace: openshift-config

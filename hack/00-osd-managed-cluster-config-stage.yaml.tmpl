apiVersion: v1
kind: Template
parameters:
- name: IMAGE_TAG
  required: true
- name: REPO_NAME
  value: managed-cluster-config
  required: true
- name: IDENTITY_ATTR_EMAIL
  required: true
- name: IDENTITY_ATTR_ID
  required: true
- name: IDENTITY_ATTR_NAME
  required: true
- name: IDENTITY_ATTR_PREFERRED_USERNAME
  required: true
- name: IDENTITY_BIND_DN
  required: true
- name: IDENTITY_URL
  required: true
- name: IDENTITY_SRE_GOOGLE_CLIENTID
  required: true
- name: IDENTITY_NAME
  required: true
- name: IDENTITY_MAPPING_METHOD
  required: true
- name: TELEMETER_SERVER_URL
  required: true
- name: CS_SRE_USERS
  required: true
- name: CEE_USERS
  required: true
- name: SREP_USERS
  required: true
- name: OCM_BASE_URL
  required: true
- name: SREP_LEGAL_ENTITY_ID
  required: true
- name: OBSERVATORIUM_LEGALENTITY_IDS
  required: true
metadata:
  name: selectorsyncset-template
objects:
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-default
  spec:
    clusterDeploymentSelector:
      matchExpressions:
      - key: api.openshift.com/managed
        operator: In
        values:
        - 'true'
      - key: api.openshift.com/storage-quota-gib
        operator: DoesNotExist
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 100Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-100gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '100'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 100Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-600gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '600'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 600Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-1100gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '1100'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 1100Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-1600gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '1600'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 1600Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-2100gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '2100'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 2100Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-2600gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '2600'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 2600Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-3100gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '3100'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 3100Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-3600gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '3600'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 3600Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-storage-4100gb
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/storage-quota-gib: '4100'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: persistent-volume-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/storage-pv-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            requests.storage: 4100Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-service-lb-default
  spec:
    clusterDeploymentSelector:
      matchExpressions:
      - key: api.openshift.com/managed
        operator: In
        values:
        - 'true'
      - key: api.openshift.com/service-lb-quota
        operator: DoesNotExist
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: loadbalancer-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/service-lb-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            services.loadbalancers: '0'
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-service-lb-0
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/service-lb-quota: '0'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: loadbalancer-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/service-lb-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            services.loadbalancers: '0'
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-service-lb-4
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/service-lb-quota: '4'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: loadbalancer-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/service-lb-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            services.loadbalancers: '4'
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-service-lb-8
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/service-lb-quota: '8'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: loadbalancer-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/service-lb-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            services.loadbalancers: '8'
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-service-lb-12
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/service-lb-quota: '12'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: loadbalancer-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/service-lb-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            services.loadbalancers: '12'
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-service-lb-16
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/service-lb-quota: '16'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: loadbalancer-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/service-lb-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            services.loadbalancers: '16'
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: resource-quota-service-lb-20
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/service-lb-quota: '20'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - kind: ClusterResourceQuota
      apiVersion: quota.openshift.io/v1
      metadata:
        name: loadbalancer-quota
      spec:
        selector:
          annotations: null
          labels:
            matchExpressions:
            - key: managed.openshift.io/service-lb-quota-exempt
              operator: DoesNotExist
        quota:
          hard:
            services.loadbalancers: '20'
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncIdentityProvider
  metadata:
    name: osd-sre-identityprovider
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/environment
        operator: NotIn
        values:
        - production
    identityProviders:
    - challenge: true
      ldap:
        attributes:
          email:
          - ${IDENTITY_ATTR_EMAIL}
          id:
          - ${IDENTITY_ATTR_ID}
          name:
          - ${IDENTITY_ATTR_NAME}
          preferredUsername:
          - ${IDENTITY_ATTR_PREFERRED_USERNAME}
        bindDN: ${IDENTITY_BIND_DN}
        bindPassword:
          name: osd-ldap-secret
        ca:
          name: osd-ldap-ca-configmap
        insecure: false
        url: ${IDENTITY_URL}
      login: true
      mappingMethod: ${IDENTITY_MAPPING_METHOD}
      name: ${IDENTITY_NAME}
      type: LDAP
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncIdentityProvider
  metadata:
    name: osd-sre-google-identityprovider
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/environment: production
    identityProviders:
    - google:
        clientID: ${IDENTITY_SRE_GOOGLE_CLIENTID}
        clientSecret:
          name: osd-google-secret
        hostedDomain: redhat.com
      mappingMethod: claim
      name: OpenShift_SRE
      type: Google
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    name: osd-observatorium-credentials-secret
  spec:
    clusterDeploymentSelector:
      matchExpressions:
      - key: api.openshift.com/managed
        operator: In
        values:
        - 'true'
    resourceApplyMode: Sync
    secretMappings:
    - sourceRef:
        name: observatorium-credentials
        namespace: observatorium-tenant
      targetRef:
        name: observatorium-credentials
        namespace: openshift-monitoring
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: backplane-cee
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-backplane-cee
    - aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: rbac.authorization.k8s.io/aggregate-to-view
            operator: In
            values:
            - 'true'
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-backplane-cee
            operator: In
            values:
            - 'true'
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-cee-readers-cluster
      rules: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: backplane-cee-mustgather
        namespace: openshift-must-gather-operator
      rules:
      - apiGroups:
        - ''
        resources:
        - secrets
        verbs:
        - create
      - apiGroups:
        - managed.openshift.io
        resources:
        - mustgathers
        verbs:
        - create
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: backplane-cee-mustgather
        namespace: openshift-must-gather-operator
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: system:serviceaccounts:openshift-backplane-cee
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: backplane-cee-mustgather
        namespace: openshift-must-gather-operator
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: backplane-cee-readers
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: backplane-cee-readers-cluster
      subjects:
      - kind: Group
        name: system:serviceaccounts:openshift-backplane-cee
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: backplane-cssre-addon-rhmi-operator
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/addon-rhmi-operator: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-backplane-cssre
    - aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-cssre-admins
            operator: In
            values:
            - cluster
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-dedicated-admins
            operator: In
            values:
            - cluster
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-cssre-admins-cluster
      rules: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: backplane-cssre
        namespace: openshift-monitoring
      rules:
      - apiGroups:
        - ''
        resources:
        - pods/portforward
        verbs:
        - create
    - apiVersion: rbac.authorization.k8s.io/v1
      aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: rbac.authorization.k8s.io/aggregate-to-view
            operator: In
            values:
            - 'true'
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-backplane-cssre
            operator: In
            values:
            - 'true'
      kind: ClusterRole
      metadata:
        name: backplane-cssre-readers-cluster
      rules: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: backplane-cssre-admins
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: backplane-cssre-admins-cluster
      subjects:
      - kind: Group
        name: system:serviceaccounts:openshift-backplane-cssre
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: backplane-cssre
        namespace: openshift-monitoring
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: system:serviceaccounts:openshift-backplane-cssre
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: backplane-cssre
        namespace: openshift-monitoring
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: backplane-cssre-readers
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: backplane-cssre-readers-cluster
      subjects:
      - kind: Group
        name: system:serviceaccounts:openshift-backplane-cssre
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: backplane-cssre-addon-rhmi-operator-internal
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/addon-rhmi-operator-internal: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-backplane-cssre
    - aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-cssre-admins
            operator: In
            values:
            - cluster
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-dedicated-admins
            operator: In
            values:
            - cluster
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-cssre-admins-cluster
      rules: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: backplane-cssre
        namespace: openshift-monitoring
      rules:
      - apiGroups:
        - ''
        resources:
        - pods/portforward
        verbs:
        - create
    - apiVersion: rbac.authorization.k8s.io/v1
      aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: rbac.authorization.k8s.io/aggregate-to-view
            operator: In
            values:
            - 'true'
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-backplane-cssre
            operator: In
            values:
            - 'true'
      kind: ClusterRole
      metadata:
        name: backplane-cssre-readers-cluster
      rules: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: backplane-cssre-admins
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: backplane-cssre-admins-cluster
      subjects:
      - kind: Group
        name: system:serviceaccounts:openshift-backplane-cssre
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: backplane-cssre
        namespace: openshift-monitoring
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: system:serviceaccounts:openshift-backplane-cssre
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: backplane-cssre
        namespace: openshift-monitoring
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: backplane-cssre-readers
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: backplane-cssre-readers-cluster
      subjects:
      - kind: Group
        name: system:serviceaccounts:openshift-backplane-cssre
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: backplane-cssre-addon-managed-api-service
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/addon-managed-api-service: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-backplane-cssre
    - aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-cssre-admins
            operator: In
            values:
            - cluster
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-dedicated-admins
            operator: In
            values:
            - cluster
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-cssre-admins-cluster
      rules: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: backplane-cssre
        namespace: openshift-monitoring
      rules:
      - apiGroups:
        - ''
        resources:
        - pods/portforward
        verbs:
        - create
    - apiVersion: rbac.authorization.k8s.io/v1
      aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: rbac.authorization.k8s.io/aggregate-to-view
            operator: In
            values:
            - 'true'
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-backplane-cssre
            operator: In
            values:
            - 'true'
      kind: ClusterRole
      metadata:
        name: backplane-cssre-readers-cluster
      rules: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: backplane-cssre-admins
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: backplane-cssre-admins-cluster
      subjects:
      - kind: Group
        name: system:serviceaccounts:openshift-backplane-cssre
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: backplane-cssre
        namespace: openshift-monitoring
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: system:serviceaccounts:openshift-backplane-cssre
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: backplane-cssre
        namespace: openshift-monitoring
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: backplane-cssre-readers
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: backplane-cssre-readers-cluster
      subjects:
      - kind: Group
        name: system:serviceaccounts:openshift-backplane-cssre
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: backplane-cssre-rhmi-addon-rhmi-operator
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/addon-rhmi-operator: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-rhmi-cssre-admins-cluster-aggregate
        labels:
          managed.openshift.io/aggregate-to-cssre-admins: cluster
      rules:
      - apiGroups:
        - config.openshift.io
        resources:
        - projects
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - config.openshift.io
        resources:
        - infrastructures
        - oauths
        verbs:
        - get
      - apiGroups:
        - project.openshift.io
        resources:
        - projects
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - namespaces
        - namespaces/finalize
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - user.openshift.io
        resources:
        - groups
        verbs:
        - patch
        - update
        - get
      - apiGroups:
        - quota.openshift.io
        resources:
        - clusterresourcequotas/status
        - clusterresourcequotas
        verbs:
        - '*'
      - apiGroups:
        - apiextensions.k8s.io
        - admin-enmasse.io
        - apicur.io
        - applicationmonitoring.integreatly.org
        - apps.3scale.net
        - capabilities.3scale.net
        - enmasse.io
        - iot.enmasse.io
        - keycloak.org
        - monitoring.coreos.com
        - push.aerogear.org
        - org.eclipse.che
        - syndesis.io
        resources:
        - '*'
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-rhmi-cssre-admins-project
      rules:
      - apiGroups:
        - ''
        resources:
        - pods/exec
        verbs:
        - create
      - apiGroups:
        - batch
        resources:
        - jobs
        - cronjobs
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/attach
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/log
        verbs:
        - get
      - apiGroups:
        - ''
        resources:
        - pods
        verbs:
        - delete
      - apiGroups:
        - integreatly.org
        resources:
        - '*'
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        resources:
        - secrets
        - configmaps
        - persistentvolumeclaims
        verbs:
        - '*'
      - apiGroups:
        - operators.coreos.com
        resources:
        - installplans
        verbs:
        - patch
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - list
        - get
      - apiGroups:
        - apps
        resources:
        - statefulsets
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - events
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - endpoints
        verbs:
        - list
        - get
      - apiGroups:
        - tekton.dev
        resources:
        - '*'
        verbs:
        - '*'
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: backplane-rhmi-cssre-admins
        namespace: openshift-rbac-permissions
      spec:
        permissions:
        - allowFirst: true
          clusterRoleName: backplane-rhmi-cssre-admins-project
          namespacesAllowedRegex: .*
          namespacesDeniedRegex: (^kube$|^kube-.*|^openshift$|^openshift-.*|^default$)
        subjectKind: Group
        subjectName: system:serviceaccounts:openshift-backplane-cssre
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: backplane-cssre-rhmi-addon-rhmi-operator-internal
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/addon-rhmi-operator-internal: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-rhmi-cssre-admins-cluster-aggregate
        labels:
          managed.openshift.io/aggregate-to-cssre-admins: cluster
      rules:
      - apiGroups:
        - config.openshift.io
        resources:
        - projects
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - config.openshift.io
        resources:
        - infrastructures
        - oauths
        verbs:
        - get
      - apiGroups:
        - project.openshift.io
        resources:
        - projects
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - namespaces
        - namespaces/finalize
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - user.openshift.io
        resources:
        - groups
        verbs:
        - patch
        - update
        - get
      - apiGroups:
        - quota.openshift.io
        resources:
        - clusterresourcequotas/status
        - clusterresourcequotas
        verbs:
        - '*'
      - apiGroups:
        - apiextensions.k8s.io
        - admin-enmasse.io
        - apicur.io
        - applicationmonitoring.integreatly.org
        - apps.3scale.net
        - capabilities.3scale.net
        - enmasse.io
        - iot.enmasse.io
        - keycloak.org
        - monitoring.coreos.com
        - push.aerogear.org
        - org.eclipse.che
        - syndesis.io
        resources:
        - '*'
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-rhmi-cssre-admins-project
      rules:
      - apiGroups:
        - ''
        resources:
        - pods/exec
        verbs:
        - create
      - apiGroups:
        - batch
        resources:
        - jobs
        - cronjobs
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/attach
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/log
        verbs:
        - get
      - apiGroups:
        - ''
        resources:
        - pods
        verbs:
        - delete
      - apiGroups:
        - integreatly.org
        resources:
        - '*'
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        resources:
        - secrets
        - configmaps
        - persistentvolumeclaims
        verbs:
        - '*'
      - apiGroups:
        - operators.coreos.com
        resources:
        - installplans
        verbs:
        - patch
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - list
        - get
      - apiGroups:
        - apps
        resources:
        - statefulsets
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - events
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - endpoints
        verbs:
        - list
        - get
      - apiGroups:
        - tekton.dev
        resources:
        - '*'
        verbs:
        - '*'
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: backplane-rhmi-cssre-admins
        namespace: openshift-rbac-permissions
      spec:
        permissions:
        - allowFirst: true
          clusterRoleName: backplane-rhmi-cssre-admins-project
          namespacesAllowedRegex: .*
          namespacesDeniedRegex: (^kube$|^kube-.*|^openshift$|^openshift-.*|^default$)
        subjectKind: Group
        subjectName: system:serviceaccounts:openshift-backplane-cssre
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: backplane-cssre-rhoam
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/addon-managed-api-service: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-rhoam-cssre-admins-cluster-aggregate
        labels:
          managed.openshift.io/aggregate-to-cssre-admins: cluster
      rules:
      - apiGroups:
        - config.openshift.io
        resources:
        - projects
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - config.openshift.io
        resources:
        - infrastructures
        - oauths
        verbs:
        - get
      - apiGroups:
        - project.openshift.io
        resources:
        - projects
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - namespaces
        - namespaces/finalize
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - user.openshift.io
        resources:
        - groups
        verbs:
        - patch
        - update
        - get
      - apiGroups:
        - apiextensions.k8s.io
        - applicationmonitoring.integreatly.org
        - apps.3scale.net
        - capabilities.3scale.net
        - keycloak.org
        - monitoring.coreos.com
        resources:
        - '*'
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-rhoam-cssre-admins-project
      rules:
      - apiGroups:
        - ''
        resources:
        - pods/exec
        verbs:
        - create
      - apiGroups:
        - batch
        resources:
        - jobs
        - cronjobs
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/attach
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/log
        verbs:
        - get
      - apiGroups:
        - ''
        resources:
        - pods
        verbs:
        - delete
      - apiGroups:
        - integreatly.org
        resources:
        - '*'
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        resources:
        - secrets
        - configmaps
        - persistentvolumeclaims
        verbs:
        - '*'
      - apiGroups:
        - operators.coreos.com
        resources:
        - installplans
        verbs:
        - patch
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - list
        - get
      - apiGroups:
        - apps
        resources:
        - statefulsets
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - events
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - endpoints
        verbs:
        - list
        - get
      - apiGroups:
        - tekton.dev
        resources:
        - '*'
        verbs:
        - '*'
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: backplane-rhoam-cssre-admins
        namespace: openshift-rbac-permissions
      spec:
        permissions:
        - allowFirst: true
          clusterRoleName: backplane-rhoam-cssre-admins-project
          namespacesAllowedRegex: (^redhat-rhoam$|^redhat-rhoam-.*)
        subjectKind: Group
        subjectName: system:serviceaccounts:openshift-backplane-cssre
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: backplane-elevated-sre
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-impersonate-cluster-admin
      rules:
      - apiGroups:
        - ''
        resources:
        - users
        verbs:
        - impersonate
        resourceNames:
        - backplane-cluster-admin
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: backplane-impersonate-cluster-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: backplane-impersonate-cluster-admin
      subjects:
      - kind: Group
        name: system:serviceaccounts:openshift-backplane-srep
      - kind: Group
        name: system:serviceaccounts:openshift-backplane-cssre
    - apiVersion: user.openshift.io/v1
      kind: User
      metadata:
        name: backplane-cluster-admin
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: backplane-cluster-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: User
        name: backplane-cluster-admin
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: backplane-mtsre-addon-managed-odh
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/addon-managed-odh: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-backplane-mtsre
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-mtsre-readers-cluster
      aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: rbac.authorization.k8s.io/aggregate-to-view
            operator: In
            values:
            - 'true'
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-dedicated-readers
            operator: In
            values:
            - 'true'
      rules: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: backplane-mtsre-readers
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: backplane-mtsre-readers-cluster
      subjects:
      - kind: Group
        name: system:serviceaccounts:openshift-backplane-mtsre
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: backplane-mtsre-managed-odh
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/addon-managed-odh: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: backplane-mtsre-admins
        namespace: openshift-rbac-permissions
      spec:
        permissions:
        - allowFirst: true
          clusterRoleName: admin
          namespacesAllowedRegex: (^redhat-ods-.*)
        subjectKind: Group
        subjectName: system:serviceaccounts:openshift-backplane-mtsre
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: backplane-srep
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-backplane-srep
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-srep-admins-cluster
      rules:
      - apiGroups:
        - ''
        resources:
        - nodes
        verbs:
        - patch
      - apiGroups:
        - ''
        resources:
        - nodes/proxy
        verbs:
        - get
      - apiGroups:
        - config.openshift.io
        resources:
        - projects
        verbs:
        - '*'
      - apiGroups:
        - project.openshift.io
        resources:
        - projects
        - projectrequests
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - namespaces
        - namespaces/finalize
        verbs:
        - '*'
      - apiGroups:
        - user.openshift.io
        resources:
        - groups
        verbs:
        - patch
        - update
      - apiGroups:
        - certificates.k8s.io
        resources:
        - certificatesigningrequests/approval
        verbs:
        - update
      - nonResourceURLs:
        - '*'
        verbs:
        - '*'
      - apiGroups:
        - authentication.k8s.io
        resources:
        - tokenreviews
        verbs:
        - create
      - apiGroups:
        - authorization.k8s.io
        resources:
        - localsubjectaccessreviews
        - selfsubjectaccessreviews
        - selfsubjectrulesreviews
        - subjectaccessreviews
        verbs:
        - create
      - apiGroups:
        - ''
        - authorization.openshift.io
        resources:
        - localresourceaccessreviews
        - localsubjectaccessreviews
        - resourceaccessreviews
        - selfsubjectrulesreviews
        - subjectaccessreviews
        - subjectrulesreviews
        verbs:
        - create
      - apiGroups:
        - user.openshift.io
        resources:
        - users
        - identities
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - machineconfiguration.openshift.io
        resources:
        - '*'
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - machine.openshift.io
        resources:
        - machines
        verbs:
        - delete
      - apiGroups:
        - apiextensions.k8s.io
        resources:
        - customresourcedefinitions
        verbs:
        - delete
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-srep-admins-project
      rules:
      - apiGroups:
        - '*'
        resources:
        - '*'
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        resources:
        - pods/eviction
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - pods/portforward
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - pods/exec
        verbs:
        - create
      - apiGroups:
        - batch
        resources:
        - jobs
        verbs:
        - delete
        - deletecollection
        - create
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/attach
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - pods
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - security.openshift.io
        resources:
        - podsecuritypolicyreviews
        - podsecuritypolicyselfsubjectreviews
        - podsecuritypolicysubjectreviews
        verbs:
        - create
      - apiGroups:
        - authorization.openshift.io
        resources:
        - localresourceaccessreviews
        - localsubjectaccessreviews
        verbs:
        - create
      - apiGroups:
        - logging.openshift.io
        resources:
        - '*'
        verbs:
        - '*'
      - apiGroups:
        - velero.io
        resources:
        - backups
        verbs:
        - create
      - apiGroups:
        - velero.io
        resources:
        - deletebackuprequests
        - downloadrequests
        - serverstatusrequests
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - persistentvolumeclaims
        verbs:
        - delete
        - patch
      - apiGroups:
        - ''
        resources:
        - replicationcontrollers/scale
        verbs:
        - patch
      - apiGroups:
        - apps
        resources:
        - deployments/scale
        - replicasets/scale
        - statefulsets/scale
        verbs:
        - patch
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigs/scale
        verbs:
        - patch
      - apiGroups:
        - ''
        resources:
        - replicasets
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - machine.openshift.io
        resources:
        - machinehealthchecks
        verbs:
        - patch
      - apiGroups:
        - machine.openshift.io
        resources:
        - machinesets/scale
        verbs:
        - patch
      - apiGroups:
        - monitoring.coreos.com
        resources:
        - prometheuses
        verbs:
        - patch
      - apiGroups:
        - upgrade.managed.openshift.io
        resources:
        - upgradeconfigs
        verbs:
        - delete
      - apiGroups:
        - operators.coreos.com
        resources:
        - clusterserviceversions
        - installplans
        - subscriptions
        verbs:
        - delete
    - apiVersion: rbac.authorization.k8s.io/v1
      aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: rbac.authorization.k8s.io/aggregate-to-view
            operator: In
            values:
            - 'true'
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-backplane-srep
            operator: In
            values:
            - 'true'
      kind: ClusterRole
      metadata:
        name: backplane-srep-readers-cluster
      rules: []
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: backplane-srep
        namespace: openshift-rbac-permissions
      spec:
        clusterPermissions:
        - backplane-srep-admins-cluster
        - backplane-srep-readers-cluster
        permissions:
        - allowFirst: true
          clusterRoleName: backplane-srep-admins-project
          namespacesAllowedRegex: (^kube$|^kube-.*|^openshift$|^openshift-.*|^default$|^redhat-.*)
          namespacesDeniedRegex: openshift-backplane-cluster-admin
        subjectKind: Group
        subjectName: system:serviceaccounts:openshift-backplane-srep
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: backplane-srep-hive
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: ext-managed.openshift.io/hive-shard
        operator: In
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: backplane-dev
        namespace: backplane
      rules:
      - apiGroups:
        - ''
        resources:
        - secrets
        resourceNames:
        - backplane-aws-credentials
        verbs:
        - get
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: backplane-dev
        namespace: backplane
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: backplane-dev
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: system:serviceaccounts:openshift-backplane-srep
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-srep-hive-project
      rules:
      - apiGroups:
        - hive.openshift.io
        resources:
        - clusterdeployments
        verbs:
        - patch
      - apiGroups:
        - hiveinternal.openshift.io
        resources:
        - clustersyncs
        verbs:
        - delete
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: backplane-srep-hive
        namespace: openshift-rbac-permissions
      spec:
        permissions:
        - allowFirst: true
          clusterRoleName: backplane-srep-hive-project
          namespacesAllowedRegex: (^uhc-.*)
        subjectKind: Group
        subjectName: system:serviceaccounts:openshift-backplane-srep
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: bz1883589-kubeapiserver-revert
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.5'
    resourceApplyMode: Sync
    patches:
    - apiVersion: flowcontrol.apiserver.k8s.io/v1alpha1
      kind: FlowSchema
      name: service-accounts
      applyMode: AlwaysApply
      patch: '{"spec":{"priorityLevelConfiguration":{"name":"workload-low"}}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: bz1891815
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.5'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: osd-delete-prometheus-operator-bz1891815
        namespace: openshift-monitoring
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: osd-delete-prometheus-operator-bz1891815
        namespace: openshift-monitoring
      rules:
      - apiGroups:
        - ''
        resources:
        - pods
        verbs:
        - get
        - list
        - delete
    - kind: RoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: osd-delete-prometheus-operator-bz1891815
        namespace: openshift-monitoring
      subjects:
      - kind: ServiceAccount
        name: osd-delete-prometheus-operator-bz1891815
        namespace: openshift-monitoring
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: osd-delete-prometheus-operator-bz1891815
        namespace: openshift-monitoring
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: osd-delete-prometheus-operator-bz1891815
        namespace: openshift-monitoring
      spec:
        failedJobsHistoryLimit: 3
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Replace
        schedule: '*/30 * * * *'
        jobTemplate:
          spec:
            template:
              spec:
                affinity:
                  nodeAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - preference:
                        matchExpressions:
                        - key: node-role.kubernetes.io/infra
                          operator: Exists
                      weight: 1
                tolerations:
                - effect: NoSchedule
                  key: node-role.kubernetes.io/infra
                  operator: Exists
                serviceAccountName: osd-delete-prometheus-operator-bz1891815
                restartPolicy: Never
                containers:
                - name: osd-delete-prometheus-operator-bz1891815
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  imagePullPolicy: Always
                  args:
                  - /bin/bash
                  - -c
                  - oc -n openshift-monitoring delete pods -l app.kubernetes.io/name=prometheus-operator
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: bz1906584
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: osd-delete-ownerrefs-bz1906584
        namespace: openshift-logging
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: osd-delete-ownerrefs-bz1906584
      rules:
      - apiGroups:
        - rbac.authorization.k8s.io
        resources:
        - clusterrolebindings
        - clusterroles
        resourceNames:
        - elasticsearch-metrics
        - elasticsearch-proxy
        verbs:
        - '*'
    - kind: ClusterRoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: osd-delete-ownerrefs-bz1906584
      subjects:
      - kind: ServiceAccount
        name: osd-delete-ownerrefs-bz1906584
        namespace: openshift-logging
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: osd-delete-ownerrefs-bz1906584
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: osd-delete-ownerrefs-bz1906584
        namespace: openshift-logging
      spec:
        failedJobsHistoryLimit: 3
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Replace
        schedule: 7,37 * * * *
        jobTemplate:
          spec:
            template:
              spec:
                affinity:
                  nodeAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - preference:
                        matchExpressions:
                        - key: node-role.kubernetes.io/infra
                          operator: Exists
                      weight: 1
                tolerations:
                - effect: NoSchedule
                  key: node-role.kubernetes.io/infra
                  operator: Exists
                serviceAccountName: osd-delete-ownerrefs-bz1906584
                restartPolicy: Never
                containers:
                - name: osd-delete-ownerrefs-bz1906584
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  imagePullPolicy: Always
                  args:
                  - /bin/bash
                  - -c
                  - "for object in clusterrole/elasticsearch-metrics clusterrole/elasticsearch-proxy\
                    \ clusterrolebinding/elasticsearch-metrics clusterrolebinding/elasticsearch-proxy;\
                    \ do\n  if [[ $(oc get $object --ignore-not-found -o jsonpath='{.metadata.ownerReferences[0].name}')\
                    \ == \"elasticsearch\" ]]; then\n    oc patch $object --type=json\
                    \ -p '[{\"op\":\"remove\",\"path\":\"/metadata/ownerReferences\"\
                    }]'\n  fi\ndone\n"
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: ccs-dedicated-admins
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/extended-dedicated-admin
        operator: NotIn
        values:
        - 'false'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          managed.openshift.io/aggregate-to-dedicated-admins: project
        name: dedicated-admins-manage-operators
      rules:
      - apiGroups:
        - operators.coreos.com
        resources:
        - '*'
        verbs:
        - '*'
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: dedicated-admins-customer-monitoring
        namespace: openshift-rbac-permissions
      spec:
        subjectKind: Group
        subjectName: dedicated-admins
        permissions:
        - clusterRoleName: dedicated-admins-project
          namespacesAllowedRegex: ^openshift-customer-monitoring$
          allowFirst: true
        - clusterRoleName: admin
          namespacesAllowedRegex: ^openshift-customer-monitoring$
          allowFirst: true
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: cluster-ingress
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: NotIn
        values:
        - '4.0'
        - '4.1'
        - '4.2'
        - '4.3'
        - '4.4'
      - key: ext-managed.openshift.io/hive-shard
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: Ingress
      name: cluster
      patch: '{ "metadata": {"annotations": {"ingress.operator.openshift.io/default-enable-http2":
        "true"} } }'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: cluster-ingress-hive
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: NotIn
        values:
        - '4.0'
        - '4.1'
        - '4.2'
        - '4.3'
        - '4.4'
      - key: ext-managed.openshift.io/hive-shard
        operator: In
        values:
        - 'true'
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: Ingress
      name: cluster
      patch: '{ "metadata": {"annotations": {"ingress.operator.openshift.io/default-enable-http2":
        "false"} } }'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: cluster-monitoring-config
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.6'
        - '4.7'
        - '4.8'
      - key: ext-managed.openshift.io/uwm-disabled
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: cluster-monitoring-config
        namespace: openshift-monitoring
      data:
        config.yaml: "enableUserWorkload: true \nprometheusK8s:\n# If the location\
          \ of this config changes,\n# make sure to adjust https://github.com/openshift/ops-sop/blob/master/v4/howto/o11m_mst_killswitch.md\n\
          # so that killswitch instructions point to the right file!\n  remoteWrite:\n\
          \    - url: http://token-refresher.openshift-monitoring.svc.cluster.local\n\
          \      remoteTimeout: 30s\n      writeRelabelConfigs:\n      - sourceLabels:\
          \ [__name__]\n        action: keep\n        regex: '(cluster_admin_enabled|identity_provider)'\n\
          \      queueConfig:\n        capacity: 2500\n        maxShards: 1000\n \
          \       minShards: 1\n        maxSamplesPerSend: 500\n        batchSendDeadline:\
          \ 60s\n        minBackoff: 30ms\n        maxBackoff: 100ms\n  nodeSelector:\n\
          \    node-role.kubernetes.io/infra: \"\"\n  tolerations:\n    - effect:\
          \ NoSchedule\n      key: node-role.kubernetes.io/infra\n      operator:\
          \ Exists\n  retention: 15d\n  volumeClaimTemplate:\n    metadata:\n    \
          \  name: prometheus-data\n    spec:\n      resources:\n        requests:\n\
          \          storage: 100Gi\nalertmanagerMain:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\n  volumeClaimTemplate:\n    metadata:\n      name:\
          \ alertmanager-data\n    spec:\n      resources:\n        requests:\n  \
          \        storage: 10Gi\ntelemeterClient:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\n  telemeterServerURL: ${TELEMETER_SERVER_URL}\n\
          prometheusOperator:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\ngrafana:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\nk8sPrometheusAdapter:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\nkubeStateMetrics:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\nopenshiftStateMetrics:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\n# https://access.redhat.com/solutions/5685771\n\
          # https://bugzilla.redhat.com/show_bug.cgi?id=1906496\nthanosQuerier:\n\
          \  resources:\n    limits:\n      cpu: 500m\n      memory: 2048Mi\n    requests:\n\
          \      cpu: 5m\n      memory: 125Mi\n"
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: cluster-monitoring-config-non-uwm-version-major-minor
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: NotIn
        values:
        - '4.6'
        - '4.7'
        - '4.8'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: cluster-monitoring-config
        namespace: openshift-monitoring
      data:
        config.yaml: "prometheusK8s:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\n  retention: 15d\n  volumeClaimTemplate:\n    metadata:\n\
          \      name: prometheus-data\n    spec:\n      resources:\n        requests:\n\
          \          storage: 100Gi\nalertmanagerMain:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\n  volumeClaimTemplate:\n    metadata:\n      name:\
          \ alertmanager-data\n    spec:\n      resources:\n        requests:\n  \
          \        storage: 10Gi\ntelemeterClient:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\n  telemeterServerURL: ${TELEMETER_SERVER_URL}\n\
          prometheusOperator:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\ngrafana:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\nk8sPrometheusAdapter:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\nkubeStateMetrics:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\n# https://access.redhat.com/solutions/5685771\n\
          # https://bugzilla.redhat.com/show_bug.cgi?id=1906496\nthanosQuerier:\n\
          \  resources:\n    limits:\n      cpu: 500m\n      memory: 2048Mi\n    requests:\n\
          \      cpu: 5m\n      memory: 125Mi\n"
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: cluster-monitoring-config-non-uwm-uwm-disabled
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: ext-managed.openshift.io/uwm-disabled
        operator: In
        values:
        - 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: cluster-monitoring-config
        namespace: openshift-monitoring
      data:
        config.yaml: "prometheusK8s:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\n  retention: 15d\n  volumeClaimTemplate:\n    metadata:\n\
          \      name: prometheus-data\n    spec:\n      resources:\n        requests:\n\
          \          storage: 100Gi\nalertmanagerMain:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\n  volumeClaimTemplate:\n    metadata:\n      name:\
          \ alertmanager-data\n    spec:\n      resources:\n        requests:\n  \
          \        storage: 10Gi\ntelemeterClient:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\n  telemeterServerURL: ${TELEMETER_SERVER_URL}\n\
          prometheusOperator:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\ngrafana:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\nk8sPrometheusAdapter:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\nkubeStateMetrics:\n  nodeSelector:\n    node-role.kubernetes.io/infra:\
          \ \"\"\n  tolerations:\n    - effect: NoSchedule\n      key: node-role.kubernetes.io/infra\n\
          \      operator: Exists\n# https://access.redhat.com/solutions/5685771\n\
          # https://bugzilla.redhat.com/show_bug.cgi?id=1906496\nthanosQuerier:\n\
          \  resources:\n    limits:\n      cpu: 500m\n      memory: 2048Mi\n    requests:\n\
          \      cpu: 5m\n      memory: 125Mi\n"
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: compliance-operator
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/legal-entity-id: ${{SREP_LEGAL_ENTITY_ID}}
      matchExpressions:
      - key: api.openshift.com/environment
        operator: In
        values:
        - staging
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-compliance
    - apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        name: compliance-operator
        namespace: openshift-compliance
      spec:
        targetNamespaces:
        - openshift-compliance
    - apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: compliance-operator
        namespace: openshift-compliance
      spec:
        channel: '4.6'
        installPlanApproval: Automatic
        source: redhat-operators
        sourceNamespace: openshift-marketplace
        name: compliance-operator
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: container-security-operator
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/legal-entity-id: ${{SREP_LEGAL_ENTITY_ID}}
      matchExpressions:
      - key: api.openshift.com/environment
        operator: In
        values:
        - staging
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-container-security-operator
    - apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        name: container-security-operator
        namespace: openshift-container-security-operator
      spec:
        targetNamespaces:
        - openshift-container-security-operator
    - apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: container-security-operator
        namespace: openshift-container-security-operator
      spec:
        channel: quay-v3.4
        installPlanApproval: Automatic
        source: redhat-operators
        sourceNamespace: openshift-marketplace
        name: container-security-operator
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: customer-registry-cas
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: dedicated-admins-registry-cas-cluster
      rules:
      - apiGroups:
        - config.openshift.io
        resources:
        - images
        resourceNames:
        - cluster
        verbs:
        - get
        - list
        - watch
        - patch
        - update
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-registry-cas-project
        namespace: openshift-config
      rules:
      - apiGroups:
        - ''
        resources:
        - configmaps
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - configmaps
        verbs:
        - '*'
        resourceNames:
        - registry-cas
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: dedicated-admins-registry-cas-cluster
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: dedicated-admins-registry-cas-cluster
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-registry-cas-project
        namespace: openshift-config
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-registry-cas-project
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: kubelet-config
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    patches:
    - kind: MachineConfigPool
      apiVersion: machineconfiguration.openshift.io/v1
      name: worker
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"managed.openshift.io/custom-kubelet":""}
        } }'
      patchType: merge
    - kind: MachineConfigPool
      apiVersion: machineconfiguration.openshift.io/v1
      name: master
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"managed.openshift.io/custom-kubelet":""}
        } }'
      patchType: merge
    resources:
    - apiVersion: machineconfiguration.openshift.io/v1
      kind: KubeletConfig
      metadata:
        name: custom-kubelet
      spec:
        machineConfigPoolSelector:
          matchLabels:
            managed.openshift.io/custom-kubelet: ''
        kubeletConfig:
          systemReserved:
            cpu: 1000m
            memory: 1Gi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: layered-sre-authorization-addon-rhmi-operator
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/addon-rhmi-operator: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: user.openshift.io/v1
      kind: Group
      metadata:
        name: layered-cs-sre-admins
      users: ${{CS_SRE_USERS}}
    - aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-cssre-admins
            operator: In
            values:
            - cluster
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-dedicated-admins
            operator: In
            values:
            - cluster
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-cssre-admins-cluster
      rules: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: backplane-cssre-admins-legacy
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: backplane-cssre-admins-cluster
      subjects:
      - kind: Group
        name: layered-cs-sre-admins
    - apiVersion: user.openshift.io/v1
      kind: Group
      metadata:
        name: layered-sre-cluster-admins
      users: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: layered-sre-cluster-admins
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: Group
        name: layered-sre-cluster-admins
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: layered-sre-authorization-addon-rhmi-operator-internal
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/addon-rhmi-operator-internal: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: user.openshift.io/v1
      kind: Group
      metadata:
        name: layered-cs-sre-admins
      users: ${{CS_SRE_USERS}}
    - aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-cssre-admins
            operator: In
            values:
            - cluster
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-dedicated-admins
            operator: In
            values:
            - cluster
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-cssre-admins-cluster
      rules: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: backplane-cssre-admins-legacy
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: backplane-cssre-admins-cluster
      subjects:
      - kind: Group
        name: layered-cs-sre-admins
    - apiVersion: user.openshift.io/v1
      kind: Group
      metadata:
        name: layered-sre-cluster-admins
      users: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: layered-sre-cluster-admins
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: Group
        name: layered-sre-cluster-admins
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: layered-sre-authorization-addon-managed-api-service
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/addon-managed-api-service: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: user.openshift.io/v1
      kind: Group
      metadata:
        name: layered-cs-sre-admins
      users: ${{CS_SRE_USERS}}
    - aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-cssre-admins
            operator: In
            values:
            - cluster
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-dedicated-admins
            operator: In
            values:
            - cluster
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-cssre-admins-cluster
      rules: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: backplane-cssre-admins-legacy
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: backplane-cssre-admins-cluster
      subjects:
      - kind: Group
        name: layered-cs-sre-admins
    - apiVersion: user.openshift.io/v1
      kind: Group
      metadata:
        name: layered-sre-cluster-admins
      users: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: layered-sre-cluster-admins
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: Group
        name: layered-sre-cluster-admins
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: layered-sre-authorization-rhmi-addon-rhmi-operator
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/addon-rhmi-operator: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-rhmi-cssre-admins-cluster-aggregate
        labels:
          managed.openshift.io/aggregate-to-cssre-admins: cluster
      rules:
      - apiGroups:
        - config.openshift.io
        resources:
        - projects
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - config.openshift.io
        resources:
        - infrastructures
        - oauths
        verbs:
        - get
      - apiGroups:
        - project.openshift.io
        resources:
        - projects
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - namespaces
        - namespaces/finalize
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - user.openshift.io
        resources:
        - groups
        verbs:
        - patch
        - update
        - get
      - apiGroups:
        - quota.openshift.io
        resources:
        - clusterresourcequotas/status
        - clusterresourcequotas
        verbs:
        - '*'
      - apiGroups:
        - apiextensions.k8s.io
        - admin-enmasse.io
        - apicur.io
        - applicationmonitoring.integreatly.org
        - apps.3scale.net
        - capabilities.3scale.net
        - enmasse.io
        - iot.enmasse.io
        - keycloak.org
        - monitoring.coreos.com
        - push.aerogear.org
        - org.eclipse.che
        - syndesis.io
        resources:
        - '*'
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-rhmi-cssre-admins-project
      rules:
      - apiGroups:
        - ''
        resources:
        - pods/exec
        verbs:
        - create
      - apiGroups:
        - batch
        resources:
        - jobs
        - cronjobs
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/attach
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/log
        verbs:
        - get
      - apiGroups:
        - ''
        resources:
        - pods
        verbs:
        - delete
      - apiGroups:
        - integreatly.org
        resources:
        - '*'
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        resources:
        - secrets
        - configmaps
        - persistentvolumeclaims
        verbs:
        - '*'
      - apiGroups:
        - operators.coreos.com
        resources:
        - installplans
        verbs:
        - patch
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - list
        - get
      - apiGroups:
        - apps
        resources:
        - statefulsets
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - events
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - endpoints
        verbs:
        - list
        - get
      - apiGroups:
        - tekton.dev
        resources:
        - '*'
        verbs:
        - '*'
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: rhmi-cs-sre-admin
        namespace: openshift-rbac-permissions
      spec:
        permissions:
        - allowFirst: true
          clusterRoleName: backplane-rhmi-cssre-admins-project
          namespacesAllowedRegex: .*
          namespacesDeniedRegex: (^kube$|^kube-.*|^openshift$|^openshift-.*|^default$)
        subjectKind: Group
        subjectName: layered-cs-sre-admins
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: layered-sre-authorization-rhmi-addon-rhmi-operator-internal
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/addon-rhmi-operator-internal: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-rhmi-cssre-admins-cluster-aggregate
        labels:
          managed.openshift.io/aggregate-to-cssre-admins: cluster
      rules:
      - apiGroups:
        - config.openshift.io
        resources:
        - projects
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - config.openshift.io
        resources:
        - infrastructures
        - oauths
        verbs:
        - get
      - apiGroups:
        - project.openshift.io
        resources:
        - projects
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - namespaces
        - namespaces/finalize
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - user.openshift.io
        resources:
        - groups
        verbs:
        - patch
        - update
        - get
      - apiGroups:
        - quota.openshift.io
        resources:
        - clusterresourcequotas/status
        - clusterresourcequotas
        verbs:
        - '*'
      - apiGroups:
        - apiextensions.k8s.io
        - admin-enmasse.io
        - apicur.io
        - applicationmonitoring.integreatly.org
        - apps.3scale.net
        - capabilities.3scale.net
        - enmasse.io
        - iot.enmasse.io
        - keycloak.org
        - monitoring.coreos.com
        - push.aerogear.org
        - org.eclipse.che
        - syndesis.io
        resources:
        - '*'
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-rhmi-cssre-admins-project
      rules:
      - apiGroups:
        - ''
        resources:
        - pods/exec
        verbs:
        - create
      - apiGroups:
        - batch
        resources:
        - jobs
        - cronjobs
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/attach
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/log
        verbs:
        - get
      - apiGroups:
        - ''
        resources:
        - pods
        verbs:
        - delete
      - apiGroups:
        - integreatly.org
        resources:
        - '*'
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        resources:
        - secrets
        - configmaps
        - persistentvolumeclaims
        verbs:
        - '*'
      - apiGroups:
        - operators.coreos.com
        resources:
        - installplans
        verbs:
        - patch
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - list
        - get
      - apiGroups:
        - apps
        resources:
        - statefulsets
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - events
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - endpoints
        verbs:
        - list
        - get
      - apiGroups:
        - tekton.dev
        resources:
        - '*'
        verbs:
        - '*'
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: rhmi-cs-sre-admin
        namespace: openshift-rbac-permissions
      spec:
        permissions:
        - allowFirst: true
          clusterRoleName: backplane-rhmi-cssre-admins-project
          namespacesAllowedRegex: .*
          namespacesDeniedRegex: (^kube$|^kube-.*|^openshift$|^openshift-.*|^default$)
        subjectKind: Group
        subjectName: layered-cs-sre-admins
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: layered-sre-authorization-rhoam
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/addon-managed-api-service: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-rhoam-cssre-admins-cluster-aggregate
        labels:
          managed.openshift.io/aggregate-to-cssre-admins: cluster
      rules:
      - apiGroups:
        - config.openshift.io
        resources:
        - projects
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - config.openshift.io
        resources:
        - infrastructures
        - oauths
        verbs:
        - get
      - apiGroups:
        - project.openshift.io
        resources:
        - projects
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - namespaces
        - namespaces/finalize
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - user.openshift.io
        resources:
        - groups
        verbs:
        - patch
        - update
        - get
      - apiGroups:
        - apiextensions.k8s.io
        - applicationmonitoring.integreatly.org
        - apps.3scale.net
        - capabilities.3scale.net
        - keycloak.org
        - monitoring.coreos.com
        resources:
        - '*'
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: backplane-rhoam-cssre-admins-project
      rules:
      - apiGroups:
        - ''
        resources:
        - pods/exec
        verbs:
        - create
      - apiGroups:
        - batch
        resources:
        - jobs
        - cronjobs
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/attach
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/log
        verbs:
        - get
      - apiGroups:
        - ''
        resources:
        - pods
        verbs:
        - delete
      - apiGroups:
        - integreatly.org
        resources:
        - '*'
        verbs:
        - create
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        resources:
        - secrets
        - configmaps
        - persistentvolumeclaims
        verbs:
        - '*'
      - apiGroups:
        - operators.coreos.com
        resources:
        - installplans
        verbs:
        - patch
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - list
        - get
      - apiGroups:
        - apps
        resources:
        - statefulsets
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - events
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - endpoints
        verbs:
        - list
        - get
      - apiGroups:
        - tekton.dev
        resources:
        - '*'
        verbs:
        - '*'
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: rhoam-cs-sre-admin
        namespace: openshift-rbac-permissions
      spec:
        permissions:
        - allowFirst: true
          clusterRoleName: backplane-rhoam-cssre-admins-project
          namespacesAllowedRegex: (^redhat-rhoam$|^redhat-rhoam-.*)
        subjectKind: Group
        subjectName: layered-cs-sre-admins
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: managed-upgrade-operator-config
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: NotIn
        values:
        - '4.5'
        - '4.6'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: managed-upgrade-operator-config
        namespace: openshift-managed-upgrade-operator
      data:
        config.yaml: "configManager:\n  source: OCM\n  ocmBaseUrl: ${OCM_BASE_URL}\n\
          \  watchInterval: 60\nmaintenance:\n  controlPlaneTime: 90\n  ignoredAlerts:\n\
          \    controlPlaneCriticals:\n    # ClusterOperatorDown - OSD-6330\n    -\
          \ ClusterOperatorDown\n    # ClusterOperatorDegraded - OSD-6330\n    - ClusterOperatorDegraded\n\
          scale:\n  timeOut: 30\nupgradeWindow:\n  delayTrigger: 30\n  timeOut: 120\n\
          nodeDrain:\n  timeOut: 45\n  expectedNodeDrainTime: 8\nhealthCheck:\n  ignoredCriticals:\n\
          \  - DNSErrors05MinSRE\n  - MetricsClientSendFailingSRE\n  - UpgradeNodeScalingFailedSRE\n\
          \  - UpgradeClusterCheckFailedSRE\n  - PrometheusRuleFailures\n  - CannotRetrieveUpdates\n\
          extDependencyAvailabilityChecks:\n  http:\n    timeout: 10\n    urls:\n\
          \      - https://quay.io/health\n      - ${OCM_BASE_URL}\nverification:\n\
          \  ignoredNamespaces:\n  - openshift-logging\n  namespacePrefixesToCheck:\n\
          \  - openshift\n  - kube\n  - default\n"
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: managed-upgrade-operator-config-4.5
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.5'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: managed-upgrade-operator-config
        namespace: openshift-managed-upgrade-operator
      data:
        config.yaml: "configManager:\n  source: OCM\n  ocmBaseUrl: ${OCM_BASE_URL}\n\
          \  watchInterval: 60\nmaintenance:\n  controlPlaneTime: 90\n  ignoredAlerts:\n\
          \    controlPlaneCriticals:\n    # etcdMembersDown - OSD-6138\n    - etcdMembersDown\n\
          \    # ClusterOperatorDown - OSD-6330\n    - ClusterOperatorDown\n    #\
          \ ClusterOperatorDegraded - OSD-6330\n    - ClusterOperatorDegraded\n  \
          \  # CloudCredentialOperatorDown - BZ 1889540\n    - CloudCredentialOperatorDown\n\
          scale:\n  timeOut: 30\nupgradeWindow:\n  delayTrigger: 30\n  timeOut: 120\n\
          nodeDrain:\n  timeOut: 45\n  expectedNodeDrainTime: 8\nhealthCheck:\n  ignoredCriticals:\n\
          \  - DNSErrors05MinSRE\n  - MetricsClientSendFailingSRE\n  - UpgradeNodeScalingFailedSRE\n\
          \  - UpgradeClusterCheckFailedSRE\n  - PrometheusRuleFailures\n  - CannotRetrieveUpdates\n\
          extDependencyAvailabilityChecks:\n  http:\n    timeout: 10\n    urls:\n\
          \      - https://quay.io/health\n      - ${OCM_BASE_URL}\nverification:\n\
          \  ignoredNamespaces:\n  - openshift-logging\n  namespacePrefixesToCheck:\n\
          \  - openshift\n  - kube\n  - default\n"
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: managed-upgrade-operator-config-4.6
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.6'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: managed-upgrade-operator-config
        namespace: openshift-managed-upgrade-operator
      data:
        config.yaml: "configManager:\n  source: OCM\n  ocmBaseUrl: ${OCM_BASE_URL}\n\
          \  watchInterval: 60\nmaintenance:\n  controlPlaneTime: 90\n  ignoredAlerts:\n\
          \    controlPlaneCriticals:\n    # ClusterOperatorDown - OSD-6330\n    -\
          \ ClusterOperatorDown\n    # ClusterOperatorDegraded - OSD-6330\n    - ClusterOperatorDegraded\n\
          \    # CloudCredentialOperatorDown - BZ 1889540\n    - CloudCredentialOperatorDown\n\
          scale:\n  timeOut: 30\nupgradeWindow:\n  delayTrigger: 30\n  timeOut: 120\n\
          nodeDrain:\n  timeOut: 45\n  expectedNodeDrainTime: 8\nhealthCheck:\n  ignoredCriticals:\n\
          \  - DNSErrors05MinSRE\n  - MetricsClientSendFailingSRE\n  - UpgradeNodeScalingFailedSRE\n\
          \  - UpgradeClusterCheckFailedSRE\n  - PrometheusRuleFailures\n  - CannotRetrieveUpdates\n\
          extDependencyAvailabilityChecks:\n  http:\n    timeout: 10\n    urls:\n\
          \      - https://quay.io/health\n      - ${OCM_BASE_URL}\nverification:\n\
          \  ignoredNamespaces:\n  - openshift-logging\n  namespacePrefixesToCheck:\n\
          \  - openshift\n  - kube\n  - default\n"
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: managed-velero-operator-rolebinding
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        creationTimestamp: null
        name: cluster-config-v1-reader
        namespace: kube-system
      rules:
      - apiGroups:
        - ''
        resourceNames:
        - cluster-config-v1
        resources:
        - configmaps
        verbs:
        - get
    - kind: RoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: managed-velero-operator-cluster-config-v1-reader
        namespace: kube-system
        labels:
          owner: managed-velero-operator
          owner.namespace: managed-velero-operator
      subjects:
      - kind: ServiceAccount
        name: managed-velero-operator
        namespace: openshift-velero
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: cluster-config-v1-reader
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-6246-flowcontrol-fix
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.5'
        - '4.6'
      - key: hive.openshift.io/version-major-minor-patch
        operator: NotIn
        values:
        - 4.6.13
        - 4.6.14
        - 4.6.15
        - 4.6.16
        - 4.6.17
        - 4.6.18
        - 4.6.19
        - 4.6.20
        - 4.6.21
        - 4.6.22
        - 4.6.23
        - 4.6.24
        - 4.6.25
        - 4.6.26
        - 4.6.27
        - 4.6.28
        - 4.6.29
        - 4.6.30
        - 4.6.31
        - 4.6.32
        - 4.6.33
        - 4.6.34
        - 4.6.35
        - 4.6.36
        - 4.6.37
        - 4.6.38
        - 4.6.39
        - 4.6.40
        - 4.6.41
        - 4.6.42
        - 4.6.43
        - 4.6.44
        - 4.6.45
        - 4.6.46
        - 4.6.47
        - 4.6.48
        - 4.6.49
        - 4.6.50
        - 4.6.51
        - 4.6.52
        - 4.6.53
        - 4.6.54
        - 4.6.55
        - 4.6.56
        - 4.6.57
        - 4.6.58
        - 4.6.59
        - 4.6.60
        - 4.6.61
        - 4.6.62
        - 4.6.63
        - 4.6.64
        - 4.6.65
        - 4.6.66
        - 4.6.67
        - 4.6.68
        - 4.6.69
        - 4.6.70
        - 4.6.71
        - 4.6.72
        - 4.6.73
        - 4.6.74
        - 4.6.75
        - 4.6.76
        - 4.6.77
        - 4.6.78
        - 4.6.79
        - 4.6.80
        - 4.6.81
        - 4.6.82
        - 4.6.83
        - 4.6.84
        - 4.6.85
        - 4.6.86
        - 4.6.87
        - 4.6.88
        - 4.6.89
        - 4.6.90
        - 4.6.91
        - 4.6.92
        - 4.6.93
        - 4.6.94
        - 4.6.95
        - 4.6.96
        - 4.6.97
        - 4.6.98
        - 4.6.99
    resourceApplyMode: Sync
    resources:
    - apiVersion: flowcontrol.apiserver.k8s.io/v1alpha1
      kind: FlowSchema
      metadata:
        name: osd-exempt-service-accounts
      spec:
        distinguisherMethod:
          type: ByUser
        matchingPrecedence: 10
        priorityLevelConfiguration:
          name: exempt
        rules:
        - nonResourceRules:
          - nonResourceURLs:
            - '*'
            verbs:
            - '*'
          resourceRules:
          - apiGroups:
            - '*'
            clusterScope: true
            namespaces:
            - '*'
            resources:
            - '*'
            verbs:
            - '*'
          subjects:
          - group:
              name: system:serviceaccounts
            kind: Group
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-aquasec-operator
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-aqua
        annotations:
          openshift.io/node-selector: ''
    - apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        annotations:
          olm.providedAPIs: AquaCsp.v1alpha1.operator.aquasec.com,AquaDatabase.v1alpha1.operator.aquasec.com,AquaEnforcer.v1alpha1.operator.aquasec.com,AquaGateway.v1alpha1.operator.aquasec.com,AquaScanner.v1alpha1.operator.aquasec.com,AquaServer.v1alpha1.operator.aquasec.com
        name: openshift-aqua
        namespace: openshift-aqua
      spec:
        serviceAccount:
          metadata:
            creationTimestamp: null
        targetNamespaces:
        - openshift-aqua
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-aqua
        namespace: openshift-aqua
      rules:
      - apiGroups:
        - ''
        resources:
        - namespaces
        - pods
        - pods/log
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - operators.coreos.com
        resources:
        - subscriptions
        - clusterserviceversions
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - secrets
        resourceNames:
        - aqua-database-password
        - aqua-registry
        verbs:
        - '*'
      - apiGroups:
        - operator.aquasec.com
        resources:
        - aquacsps
        - aquadatabases
        - aquaenforcers
        - aquagateways
        - aquascanners
        - aquaservers
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - secrets
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - serviceaccounts
        resourceNames:
        - aqua-sa
        verbs:
        - patch
        - update
      - apiGroups:
        - ''
        - project.openshift.io
        resources:
        - projects
        verbs:
        - get
      - apiGroups:
        - ''
        resources:
        - configmaps
        - endpoints
        - persistentvolumeclaims
        - replicationcontrollers
        - replicationcontrollers/scale
        - services
        - services/proxy
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - apps
        resources:
        - daemonsets
        - deployments
        - deployments/rollback
        - deployments/scale
        - replicasets
        - replicasets/scale
        - statefulsets
        - statefulsets/scale
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - autoscaling
        resources:
        - horizontalpodautoscalers
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - batch
        resources:
        - cronjobs
        - jobs
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - extensions
        resources:
        - daemonsets
        - deployments
        - deployments/rollback
        - deployments/scale
        - ingresses
        - networkpolicies
        - replicasets
        - replicasets/scale
        - replicationcontrollers/scale
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - networking.k8s.io
        resources:
        - networkpolicies
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - metrics.k8s.io
        resources:
        - pods
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - builds/details
        verbs:
        - update
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        verbs:
        - get
      - apiGroups:
        - build.openshift.io
        resources:
        - buildconfigs
        - buildconfigs/webhooks
        - builds
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - builds/log
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - buildconfigs/instantiate
        - buildconfigs/instantiatebinary
        - builds/clone
        verbs:
        - create
      - apiGroups:
        - build.openshift.io
        resources:
        - jenkins
        verbs:
        - edit
        - view
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigs
        - deploymentconfigs/scale
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigrollbacks
        - deploymentconfigs/instantiate
        - deploymentconfigs/rollback
        verbs:
        - create
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigs/log
        - deploymentconfigs/status
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - image.openshift.io
        resources:
        - imagestreams/status
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - quota.openshift.io
        resources:
        - appliedclusterresourcequotas
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - route.openshift.io
        resources:
        - routes
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - route.openshift.io
        resources:
        - routes/custom-host
        verbs:
        - create
      - apiGroups:
        - route.openshift.io
        resources:
        - routes/status
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - template.openshift.io
        resources:
        - processedtemplates
        - templateconfigs
        - templateinstances
        - templates
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - extensions
        - networking.k8s.io
        resources:
        - networkpolicies
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - buildlogs
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        resources:
        - resourcequotausages
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        resources:
        - configmaps
        - endpoints
        - persistentvolumeclaims
        - pods
        - replicationcontrollers
        - replicationcontrollers/scale
        - services
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        resources:
        - bindings
        - events
        - limitranges
        - namespaces/status
        - pods/log
        - pods/status
        - replicationcontrollers/status
        - resourcequotas
        - resourcequotas/status
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        resources:
        - namespaces
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - apps
        resources:
        - controllerrevisions
        - daemonsets
        - deployments
        - deployments/scale
        - replicasets
        - replicasets/scale
        - statefulsets
        - statefulsets/scale
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - autoscaling
        resources:
        - horizontalpodautoscalers
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - batch
        resources:
        - cronjobs
        - jobs
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - extensions
        resources:
        - daemonsets
        - deployments
        - deployments/scale
        - ingresses
        - networkpolicies
        - replicasets
        - replicasets/scale
        - replicationcontrollers/scale
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - networking.k8s.io
        resources:
        - networkpolicies
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - buildconfigs
        - buildconfigs/webhooks
        - builds
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - jenkins
        verbs:
        - view
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigs
        - deploymentconfigs/scale
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - buildlogs
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - packages.operators.coreos.com
        resources:
        - packagemanifests
        verbs:
        - '*'
      - apiGroups:
        - authorization.openshift.io
        resources:
        - localresourceaccessreviews
        - localsubjectaccessreviews
        - subjectrulesreviews
        verbs:
        - create
      - apiGroups:
        - authorization.k8s.io
        resources:
        - localsubjectaccessreviews
        verbs:
        - create
      - apiGroups:
        - authorization.openshift.io
        resources:
        - resourceaccessreviews
        - subjectaccessreviews
        verbs:
        - create
      - apiGroups:
        - security.openshift.io
        resources:
        - podsecuritypolicyreviews
        - podsecuritypolicyselfsubjectreviews
        - podsecuritypolicysubjectreviews
        verbs:
        - create
      - apiGroups:
        - route.openshift.io
        resources:
        - routes/status
        verbs:
        - update
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-openshift-aqua
        namespace: openshift-aqua
      subjects:
      - kind: Group
        name: dedicated-admins
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-openshift-aqua
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        annotations:
          openshift.io/description: A user who can search and scan images from an
            OpenShift integrated registry.
        name: image-scanner
      rules:
      - apiGroups:
        - image.openshift.io
        resources:
        - imagestreams
        - imagestreams/layers
        verbs:
        - get
        - list
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: aqua-scanner-binding
      roleRef:
        kind: ClusterRole
        name: image-scanner
        apiGroup: rbac.authorization.k8s.io
      subjects:
      - kind: ServiceAccount
        name: aqua-sa
        namespace: openshift-aqua
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-audit-policy
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/legal-entity-id: ${{SREP_LEGAL_ENTITY_ID}}
      matchExpressions:
      - key: api.openshift.com/environment
        operator: In
        values:
        - staging
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      applyMode: AlwaysApply
      kind: APIServer
      name: cluster
      patch: '{"spec":{"audit":{"profile":"WriteRequestBodies"}}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-channel-patch-candidate-4.5
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.5'
      - key: api.openshift.com/channel-group
        operator: In
        values:
        - candidate
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: ClusterVersion
      name: version
      applyMode: AlwaysApply
      patch: '{"spec":{"channel":"candidate-4.5"}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-channel-patch-candidate-4.6
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.6'
      - key: api.openshift.com/channel-group
        operator: In
        values:
        - candidate
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: ClusterVersion
      name: version
      applyMode: AlwaysApply
      patch: '{"spec":{"channel":"candidate-4.6"}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-channel-patch-candidate-4.7
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.7'
      - key: api.openshift.com/channel-group
        operator: In
        values:
        - candidate
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: ClusterVersion
      name: version
      applyMode: AlwaysApply
      patch: '{"spec":{"channel":"candidate-4.7"}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-channel-patch-candidate-4.8
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.8'
      - key: api.openshift.com/channel-group
        operator: In
        values:
        - candidate
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: ClusterVersion
      name: version
      applyMode: AlwaysApply
      patch: '{"spec":{"channel":"candidate-4.8"}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-channel-patch-candidate-4.9
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.9'
      - key: api.openshift.com/channel-group
        operator: In
        values:
        - candidate
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: ClusterVersion
      name: version
      applyMode: AlwaysApply
      patch: '{"spec":{"channel":"candidate-4.9"}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-channel-patch-fast-4.5
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.5'
      - key: api.openshift.com/channel-group
        operator: In
        values:
        - fast
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: ClusterVersion
      name: version
      applyMode: AlwaysApply
      patch: '{"spec":{"channel":"fast-4.5"}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-channel-patch-fast-4.6
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.6'
      - key: api.openshift.com/channel-group
        operator: In
        values:
        - fast
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: ClusterVersion
      name: version
      applyMode: AlwaysApply
      patch: '{"spec":{"channel":"fast-4.6"}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-channel-patch-fast-4.7
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.7'
      - key: api.openshift.com/channel-group
        operator: In
        values:
        - fast
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: ClusterVersion
      name: version
      applyMode: AlwaysApply
      patch: '{"spec":{"channel":"fast-4.7"}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-channel-patch-fast-4.8
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.8'
      - key: api.openshift.com/channel-group
        operator: In
        values:
        - fast
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: ClusterVersion
      name: version
      applyMode: AlwaysApply
      patch: '{"spec":{"channel":"fast-4.8"}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-channel-patch-fast-4.9
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.9'
      - key: api.openshift.com/channel-group
        operator: In
        values:
        - fast
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: ClusterVersion
      name: version
      applyMode: AlwaysApply
      patch: '{"spec":{"channel":"fast-4.9"}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-channel-patch-nightly
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/channel-group
        operator: In
        values:
        - nightly
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: ClusterVersion
      name: version
      applyMode: AlwaysApply
      patch: '{"spec":{"channel":""}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-channel-patch-stable-4.5
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.5'
      - key: api.openshift.com/channel-group
        operator: NotIn
        values:
        - nightly
        - candidate
        - fast
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: ClusterVersion
      name: version
      applyMode: AlwaysApply
      patch: '{"spec":{"channel":"stable-4.5"}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-channel-patch-stable-4.6
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.6'
      - key: api.openshift.com/channel-group
        operator: NotIn
        values:
        - nightly
        - candidate
        - fast
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: ClusterVersion
      name: version
      applyMode: AlwaysApply
      patch: '{"spec":{"channel":"stable-4.6"}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-channel-patch-stable-4.7
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.7'
      - key: api.openshift.com/channel-group
        operator: NotIn
        values:
        - nightly
        - candidate
        - fast
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: ClusterVersion
      name: version
      applyMode: AlwaysApply
      patch: '{"spec":{"channel":"stable-4.7"}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-channel-patch-stable-4.8
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.8'
      - key: api.openshift.com/channel-group
        operator: NotIn
        values:
        - nightly
        - candidate
        - fast
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: ClusterVersion
      name: version
      applyMode: AlwaysApply
      patch: '{"spec":{"channel":"stable-4.8"}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-channel-patch-stable-4.9
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.9'
      - key: api.openshift.com/channel-group
        operator: NotIn
        values:
        - nightly
        - candidate
        - fast
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      kind: ClusterVersion
      name: version
      applyMode: AlwaysApply
      patch: '{"spec":{"channel":"stable-4.9"}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-cluster-admin
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        api.openshift.com/cluster-admin: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: osd-cluster-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: cluster-admins
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-cluster-ready
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    applyBehavior: CreateOnly
    resources:
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: osd-cluster-ready
        namespace: openshift-monitoring
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: osd-cluster-ready
        namespace: openshift-monitoring
      rules:
      - apiGroups:
        - ''
        resources:
        - pods
        verbs:
        - get
        - list
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: osd-cluster-ready
        namespace: openshift-monitoring
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: osd-cluster-ready
      subjects:
      - kind: ServiceAccount
        name: osd-cluster-ready
        namespace: openshift-monitoring
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: osd-cluster-ready
        namespace: openshift-machine-api
      rules:
      - apiGroups:
        - machine.openshift.io
        resources:
        - machines
        verbs:
        - list
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: osd-cluster-ready
        namespace: openshift-machine-api
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: osd-cluster-ready
      subjects:
      - kind: ServiceAccount
        name: osd-cluster-ready
        namespace: openshift-monitoring
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: osd-cluster-ready
        namespace: openshift-config
      rules:
      - apiGroups:
        - ''
        resources:
        - secrets
        verbs:
        - list
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: osd-cluster-ready
        namespace: openshift-config
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: osd-cluster-ready
      subjects:
      - kind: ServiceAccount
        name: osd-cluster-ready
        namespace: openshift-monitoring
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: osd-cluster-ready
      rules:
      - apiGroups:
        - config.openshift.io
        resources:
        - clusterversions
        verbs:
        - get
      - apiGroups:
        - ''
        resources:
        - nodes
        - pods
        verbs:
        - list
      - apiGroups:
        - config.openshift.io
        resources:
        - clusteroperators
        verbs:
        - list
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: osd-cluster-ready
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: osd-cluster-ready
      subjects:
      - kind: ServiceAccount
        name: osd-cluster-ready
        namespace: openshift-monitoring
    - apiVersion: batch/v1
      kind: Job
      metadata:
        name: osd-cluster-ready
        namespace: openshift-monitoring
      spec:
        backoffLimit: 500
        template:
          metadata:
            name: osd-cluster-ready
            labels:
              managed.openshift.io/version: v0.1.45-c9f1f45
          spec:
            containers:
            - name: osd-cluster-ready
              image: quay.io/openshift-sre/osd-cluster-ready@sha256:eb600ec385f76bd1cb746287dafc512ffcdaf09fd7aa7c7d78ac7aed30f665d2
              command:
              - /root/main
            restartPolicy: OnFailure
            serviceAccountName: osd-cluster-ready
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-codeready-workspaces
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-codeready-workspaces
        annotations:
          openshift.io/node-selector: ''
        labels:
          openshift.io/cluster-logging: 'true'
          openshift.io/cluster-monitoring: 'true'
    - apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        name: openshift-codeready-workspaces
        namespace: openshift-codeready-workspaces
      spec:
        serviceAccount:
          metadata:
            creationTimestamp: null
        targetNamespaces:
        - openshift-codeready-workspaces
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-codeready-workspaces
        namespace: openshift-codeready-workspaces
      rules:
      - apiGroups:
        - ''
        resources:
        - namespaces
        - pods
        - pods/log
        - events
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - operators.coreos.com
        resources:
        - subscriptions
        - clusterserviceversions
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - configmaps
        verbs:
        - list
      - apiGroups:
        - org.eclipse.che
        resources:
        - '*'
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-openshift-codeready-workspaces
        namespace: openshift-codeready-workspaces
      subjects:
      - kind: Group
        name: dedicated-admins
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-openshift-codeready-workspaces
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-console-branding
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/product
        operator: NotIn
        values:
        - rosa
    resourceApplyMode: Sync
    patches:
    - apiVersion: operator.openshift.io/v1
      applyMode: AlwaysApply
      kind: Console
      name: cluster
      patchType: merge
      patch: '{"spec":{"managementState":"Managed","route":null,"customization":{"brand":"dedicated","documentationBaseURL":"https://docs.openshift.com/dedicated/4/","customProductName":null,"customLogoFile":null}}}'
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-curated-operatorsources
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: NotIn
        values:
        - 'true'
      - key: api.openshift.com/extended-dedicated-admin
        operator: In
        values:
        - 'false'
      - key: api.openshift.com/environment
        operator: NotIn
        values:
        - staging
      - key: hive.openshift.io/cluster-platform
        operator: NotIn
        values:
        - gcp
      - key: api.openshift.com/cluster-admin
        operator: NotIn
        values:
        - 'true'
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      applyMode: AlwaysApply
      kind: OperatorHub
      name: cluster
      patch: '{"spec":{"disableAllDefaultSources":true}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-curated-operatorsources-revert
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/extended-dedicated-admin
        operator: NotIn
        values:
        - 'false'
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      applyMode: AlwaysApply
      kind: OperatorHub
      name: cluster
      patch: '{"spec":{"disableAllDefaultSources":false}}'
      patchType: merge
    resources:
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: osd-patch-subscription-source
        namespace: openshift-marketplace
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: osd-patch-subscription-source
      rules:
      - apiGroups:
        - operators.coreos.com
        resources:
        - subscriptions
        verbs:
        - patch
        - get
        - list
    - kind: ClusterRoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: osd-patch-subscription-source
      subjects:
      - kind: ServiceAccount
        name: osd-patch-subscription-source
        namespace: openshift-marketplace
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: osd-patch-subscription-source
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: osd-patch-subscription-source
        namespace: openshift-marketplace
      spec:
        failedJobsHistoryLimit: 5
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Replace
        schedule: 0 */1 * * *
        jobTemplate:
          spec:
            template:
              spec:
                affinity:
                  nodeAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - preference:
                        matchExpressions:
                        - key: node-role.kubernetes.io/infra
                          operator: Exists
                      weight: 1
                tolerations:
                - effect: NoSchedule
                  key: node-role.kubernetes.io/infra
                  operator: Exists
                serviceAccountName: osd-patch-subscription-source
                restartPolicy: Never
                containers:
                - name: osd-patch-subscription-source
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  imagePullPolicy: Always
                  args:
                  - /bin/bash
                  - -c
                  - "# Script run as an idempotent cronjob to fix existing subscriptions\
                    \ when disabling OSD operator curation.\n\n# for each type of\
                    \ source (redhat, certified, communit)\n# AND for each namespace\
                    \ having a subscription with a curated community source\n# AND\
                    \ for each subscription having a curated source\n# patch the source\n\
                    # NOTE there are loops for each source to keep the jsonpath simple\
                    \ and the logic easy to read\n\necho START\nfor NS in $(oc get\
                    \ subscription -A -o jsonpath='{.items[?(@.spec.source==\"osd-curated-redhat-operators\"\
                    )].metadata.namespace}');\ndo\n  for SUB in $(oc -n $NS get subscription\
                    \ -o jsonpath='{.items[?(@.spec.source==\"osd-curated-redhat-operators\"\
                    )].metadata.name}');\n  do\n    echo \"Patching subscription '$SUB'\
                    \ in namespace '$NS'\"\n    oc -n $NS patch subscription $SUB\
                    \ --patch '{\"spec\":{\"source\":\"redhat-operators\"}}' --type\
                    \ merge\n  done\ndone\n\nfor NS in $(oc get subscription -A -o\
                    \ jsonpath='{.items[?(@.spec.source==\"osd-curated-certified-operators\"\
                    )].metadata.namespace}');\ndo\n  for SUB in $(oc -n $NS get subscription\
                    \ -o jsonpath='{.items[?(@.spec.source==\"osd-curated-certified-operators\"\
                    )].metadata.name}');\n  do\n    echo \"Patching subscription '$SUB'\
                    \ in namespace '$NS'\"\n    oc -n $NS patch subscription $SUB\
                    \ --patch '{\"spec\":{\"source\":\"certified-operators\"}}' --type\
                    \ merge\n  done\ndone\n\nfor NS in $(oc get subscription -A -o\
                    \ jsonpath='{.items[?(@.spec.source==\"osd-curated-community-operators\"\
                    )].metadata.namespace}');\ndo\n  for SUB in $(oc -n $NS get subscription\
                    \ -o jsonpath='{.items[?(@.spec.source==\"osd-curated-community-operators\"\
                    )].metadata.name}');\n  do\n    echo \"Patching subscription '$SUB'\
                    \ in namespace '$NS'\"\n    oc -n $NS patch subscription $SUB\
                    \ --patch '{\"spec\":{\"source\":\"community-operators\"}}' --type\
                    \ merge\n  done\ndone\necho FINISH\n"
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-custom-domains
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          managed.openshift.io/aggregate-to-dedicated-admins: cluster
        name: osd-custom-domains-dedicated-admin-cluster
      rules:
      - apiGroups:
        - managed.openshift.io
        resources:
        - customdomains
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-customer-monitoring
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-customer-monitoring
        annotations:
          openshift.io/node-selector: ''
        labels:
          name: openshift-customer-monitoring
          openshift.io/cluster-logging: 'true'
          openshift.io/cluster-monitoring: 'false'
          openshift.io/workload-monitoring: 'true'
    - apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        name: openshift-customer-monitoring
        namespace: openshift-customer-monitoring
      spec:
        serviceAccount:
          metadata:
            creationTimestamp: null
        targetNamespaces:
        - openshift-customer-monitoring
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: prometheus-k8s-openshift-customer-monitoring
        namespace: openshift-customer-monitoring
      rules:
      - apiGroups:
        - ''
        resources:
        - secrets
        resourceNames:
        - alertmanager-main
        - alertmanager-main-proxy
        - prometheus-additional-scrape-config
        - prometheus-additional-scrape-config-2
        - prometheus-additional-alertmanager-config
        - alertmanager-instance
        - prometheus-auth-proxy
        - alertmanager-auth-proxy
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-customer-monitoring
        namespace: openshift-customer-monitoring
      rules:
      - apiGroups:
        - ''
        resources:
        - namespaces
        - pods
        - pods/log
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - operators.coreos.com
        resources:
        - subscriptions
        - clusterserviceversions
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - secrets
        resourceNames:
        - alertmanager-main
        - alertmanager-main-proxy
        - prometheus-additional-scrape-config
        - prometheus-additional-scrape-config-2
        - prometheus-additional-alertmanager-config
        - alertmanager-instance
        - prometheus-auth-proxy
        - alertmanager-auth-proxy
        verbs:
        - '*'
      - apiGroups:
        - monitoring.coreos.com
        resources:
        - prometheuses
        - prometheusrules
        - servicemonitors
        - podmonitors
        - thanosrulers
        verbs:
        - '*'
      - apiGroups:
        - monitoring.coreos.com
        resources:
        - alertmanagers
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - secrets
        verbs:
        - create
      - apiGroups:
        - ''
        - project.openshift.io
        resources:
        - projects
        verbs:
        - get
      - apiGroups:
        - ''
        resources:
        - configmaps
        - endpoints
        - persistentvolumeclaims
        - replicationcontrollers
        - replicationcontrollers/scale
        - services
        - services/proxy
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - apps
        resources:
        - daemonsets
        - deployments
        - deployments/rollback
        - deployments/scale
        - replicasets
        - replicasets/scale
        - statefulsets
        - statefulsets/scale
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - autoscaling
        resources:
        - horizontalpodautoscalers
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - batch
        resources:
        - cronjobs
        - jobs
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - extensions
        resources:
        - daemonsets
        - deployments
        - deployments/rollback
        - deployments/scale
        - ingresses
        - networkpolicies
        - replicasets
        - replicasets/scale
        - replicationcontrollers/scale
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - networking.k8s.io
        resources:
        - networkpolicies
        verbs:
        - create
        - delete
        - deletecollection
        - patch
        - update
      - apiGroups:
        - metrics.k8s.io
        resources:
        - pods
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - builds/details
        verbs:
        - update
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        verbs:
        - get
      - apiGroups:
        - build.openshift.io
        resources:
        - buildconfigs
        - buildconfigs/webhooks
        - builds
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - builds/log
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - buildconfigs/instantiate
        - buildconfigs/instantiatebinary
        - builds/clone
        verbs:
        - create
      - apiGroups:
        - build.openshift.io
        resources:
        - jenkins
        verbs:
        - edit
        - view
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigs
        - deploymentconfigs/scale
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigrollbacks
        - deploymentconfigs/instantiate
        - deploymentconfigs/rollback
        verbs:
        - create
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigs/log
        - deploymentconfigs/status
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - image.openshift.io
        resources:
        - imagestreams/status
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - quota.openshift.io
        resources:
        - appliedclusterresourcequotas
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - route.openshift.io
        resources:
        - routes
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - route.openshift.io
        resources:
        - routes/custom-host
        verbs:
        - create
      - apiGroups:
        - route.openshift.io
        resources:
        - routes/status
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - template.openshift.io
        resources:
        - processedtemplates
        - templateconfigs
        - templateinstances
        - templates
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - extensions
        - networking.k8s.io
        resources:
        - networkpolicies
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - buildlogs
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        resources:
        - resourcequotausages
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        resources:
        - configmaps
        - endpoints
        - persistentvolumeclaims
        - pods
        - replicationcontrollers
        - replicationcontrollers/scale
        - services
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        resources:
        - bindings
        - events
        - limitranges
        - namespaces/status
        - pods/log
        - pods/status
        - replicationcontrollers/status
        - resourcequotas
        - resourcequotas/status
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        resources:
        - namespaces
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - apps
        resources:
        - controllerrevisions
        - daemonsets
        - deployments
        - deployments/scale
        - replicasets
        - replicasets/scale
        - statefulsets
        - statefulsets/scale
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - autoscaling
        resources:
        - horizontalpodautoscalers
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - batch
        resources:
        - cronjobs
        - jobs
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - extensions
        resources:
        - daemonsets
        - deployments
        - deployments/scale
        - ingresses
        - networkpolicies
        - replicasets
        - replicasets/scale
        - replicationcontrollers/scale
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - networking.k8s.io
        resources:
        - networkpolicies
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - buildconfigs
        - buildconfigs/webhooks
        - builds
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - jenkins
        verbs:
        - view
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigs
        - deploymentconfigs/scale
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - build.openshift.io
        resources:
        - buildlogs
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - packages.operators.coreos.com
        resources:
        - packagemanifests
        verbs:
        - '*'
      - apiGroups:
        - authorization.openshift.io
        resources:
        - localresourceaccessreviews
        - localsubjectaccessreviews
        - subjectrulesreviews
        verbs:
        - create
      - apiGroups:
        - authorization.k8s.io
        resources:
        - localsubjectaccessreviews
        verbs:
        - create
      - apiGroups:
        - authorization.openshift.io
        resources:
        - resourceaccessreviews
        - subjectaccessreviews
        verbs:
        - create
      - apiGroups:
        - security.openshift.io
        resources:
        - podsecuritypolicyreviews
        - podsecuritypolicyselfsubjectreviews
        - podsecuritypolicysubjectreviews
        verbs:
        - create
      - apiGroups:
        - route.openshift.io
        resources:
        - routes/status
        verbs:
        - update
      - apiGroups:
        - ''
        resources:
        - pods/portforward
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: prometheus-k8s-openshift-customer-monitoring
        namespace: openshift-customer-monitoring
      subjects:
      - kind: ServiceAccount
        name: prometheus-k8s
        namespace: openshift-customer-monitoring
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: prometheus-k8s-openshift-customer-monitoring
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-openshift-customer-monitoring
        namespace: openshift-customer-monitoring
      subjects:
      - kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-openshift-customer-monitoring
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-delete-backplane-serviceaccounts
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-backplane
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: osd-delete-backplane-serviceaccounts
        namespace: openshift-backplane
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: osd-delete-backplane-serviceaccounts
      rules:
      - apiGroups:
        - ''
        resources:
        - serviceaccounts
        verbs:
        - get
        - list
        - delete
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: osd-get-namespace
      rules:
      - apiGroups:
        - ''
        resources:
        - namespaces
        verbs:
        - get
        - list
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: osd-delete-backplane-serviceaccounts
        namespace: openshift-rbac-permissions
      spec:
        clusterPermissions:
        - osd-get-namespace
        permissions:
        - allowFirst: true
          clusterRoleName: osd-delete-backplane-serviceaccounts
          namespacesAllowedRegex: (^openshift-backplane-.*)
        subjectKind: User
        subjectName: system:serviceaccount:openshift-backplane:osd-delete-backplane-serviceaccounts
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: osd-delete-backplane-serviceaccounts
        namespace: openshift-backplane
      spec:
        failedJobsHistoryLimit: 5
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Replace
        schedule: '*/10 * * * *'
        jobTemplate:
          spec:
            template:
              spec:
                affinity:
                  nodeAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - preference:
                        matchExpressions:
                        - key: node-role.kubernetes.io/infra
                          operator: Exists
                      weight: 1
                tolerations:
                - effect: NoSchedule
                  key: node-role.kubernetes.io/infra
                  operator: Exists
                restartPolicy: Never
                serviceAccountName: osd-delete-backplane-serviceaccounts
                containers:
                - name: osd-delete-backplane-serviceaccounts
                  imagePullPolicy: Always
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  args:
                  - /bin/bash
                  - -c
                  - "for ns in $(oc get ns --no-headers | grep -e ^openshift-backplane-.*\
                    \ | awk '{print $1}');do\n    for sa in $(oc get sa -n $ns -l\
                    \ managed.openshift.io/backplane=true --no-headers | awk '{print\
                    \ $1}');do\n      creation=$(date -d $(oc get sa $sa -n $ns -o\
                    \ jsonpath='{.metadata.creationTimestamp}') '+%s');\n      now=$(date\
                    \ +%s);\n      expiryMins=$(oc get sa $sa -n $ns -o jsonpath='{.metadata.annotations.managed\\\
                    .openshift\\.io/backplane-expiry-duration}');\n      if [[ $(expr\
                    \ $((now-creation)) \\> ${expiryMins:=720} \\* 60) == 1 ]]; then\n\
                    \        oc delete sa $sa -n $ns\n      fi\n    done;\ndone;"
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-devaccess
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: user.openshift.io/v1
      kind: Group
      metadata:
        name: osd-devaccess
      users: ${{CEE_USERS}}
    - aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: rbac.authorization.k8s.io/aggregate-to-view
            operator: In
            values:
            - 'true'
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-devaccess
            operator: In
            values:
            - 'true'
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: osd-devaccess
      rules: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: osd-devaccess-aggregate
        labels:
          managed.openshift.io/aggregate-to-devaccess: 'true'
      rules:
      - apiGroups:
        - ''
        resources:
        - nodes
        verbs:
        - get
        - list
      - apiGroups:
        - ''
        resources:
        - pods/exec
        verbs:
        - create
      - apiGroups:
        - config.openshift.io
        resources:
        - projects
        verbs:
        - get
        - list
      - apiGroups:
        - project.openshift.io
        resources:
        - projects
        verbs:
        - get
        - list
      - apiGroups:
        - user.openshift.io
        resources:
        - groups
        verbs:
        - get
        - list
      - apiGroups:
        - ''
        resources:
        - namespaces
        - namespaces/finalize
        verbs:
        - get
        - list
      - apiGroups:
        - ''
        resources:
        - pods
        verbs:
        - get
        - list
      - apiGroups:
        - security.openshift.io
        resources:
        - podsecuritypolicyreviews
        - podsecuritypolicyselfsubjectreviews
        - podsecuritypolicysubjectreviews
        verbs:
        - create
      - apiGroups:
        - authorization.openshift.io
        resources:
        - localresourceaccessreviews
        verbs:
        - create
      - apiGroups:
        - ''
        - image.openshift.io
        resources:
        - images
        verbs:
        - get
        - list
      - nonResourceURLs:
        - '*'
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: osd-devaccess
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: osd-devaccess
      subjects:
      - kind: Group
        name: osd-devaccess
    - apiVersion: v1
      data:
        ca.crt: '-----BEGIN CERTIFICATE-----

          MIIENDCCAxygAwIBAgIJANunI0D662cnMA0GCSqGSIb3DQEBCwUAMIGlMQswCQYD

          VQQGEwJVUzEXMBUGA1UECAwOTm9ydGggQ2Fyb2xpbmExEDAOBgNVBAcMB1JhbGVp

          Z2gxFjAUBgNVBAoMDVJlZCBIYXQsIEluYy4xEzARBgNVBAsMClJlZCBIYXQgSVQx

          GzAZBgNVBAMMElJlZCBIYXQgSVQgUm9vdCBDQTEhMB8GCSqGSIb3DQEJARYSaW5m

          b3NlY0ByZWRoYXQuY29tMCAXDTE1MDcwNjE3MzgxMVoYDzIwNTUwNjI2MTczODEx

          WjCBpTELMAkGA1UEBhMCVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRAwDgYD

          VQQHDAdSYWxlaWdoMRYwFAYDVQQKDA1SZWQgSGF0LCBJbmMuMRMwEQYDVQQLDApS

          ZWQgSGF0IElUMRswGQYDVQQDDBJSZWQgSGF0IElUIFJvb3QgQ0ExITAfBgkqhkiG

          9w0BCQEWEmluZm9zZWNAcmVkaGF0LmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEP

          ADCCAQoCggEBALQt9OJQh6GC5LT1g80qNh0u50BQ4sZ/yZ8aETxt+5lnPVX6MHKz

          bfwI6nO1aMG6j9bSw+6UUyPBHP796+FT/pTS+K0wsDV7c9XvHoxJBJJU38cdLkI2

          c/i7lDqTfTcfLL2nyUBd2fQDk1B0fxrskhGIIZ3ifP1Ps4ltTkv8hRSob3VtNqSo

          GxkKfvD2PKjTPxDPWYyruy9irLZioMffi3i/gCut0ZWtAyO3MVH5qWF/enKwgPES

          X9po+TdCvRB/RUObBaM761EcrLSM1GqHNueSfqnho3AjLQ6dBnPWlo638Zm1VebK

          BELyhkLWMSFkKwDmne0jQ02Y4g075vCKvCsCAwEAAaNjMGEwHQYDVR0OBBYEFH7R

          4yC+UehIIPeuL8Zqw3PzbgcZMB8GA1UdIwQYMBaAFH7R4yC+UehIIPeuL8Zqw3Pz

          bgcZMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMA0GCSqGSIb3DQEB

          CwUAA4IBAQBDNvD2Vm9sA5A9AlOJR8+en5Xz9hXcxJB5phxcZQ8jFoG04Vshvd0e

          LEnUrMcfFgIZ4njMKTQCM4ZFUPAieyLx4f52HuDopp3e5JyIMfW+KFcNIpKwCsak

          oSoKtIUOsUJK7qBVZxcrIyeQV2qcYOeZhtS5wBqIwOAhFwlCET7Ze58QHmS48slj

          S9K0JAcps2xdnGu0fkzhSQxY8GPQNFTlr6rYld5+ID/hHeS76gq0YG3q6RLWRkHf

          4eTkRjivAlExrFzKcljC4axKQlnOvVAzz+Gm32U0xPBF4ByePVxCJUHw1TsyTmel

          RxNEp7yHoXcwn+fXna+t5JWh1gxUZty3

          -----END CERTIFICATE-----

          '
      kind: ConfigMap
      metadata:
        name: osd-devaccess-ldap-ca-configmap
        namespace: openshift-config
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-gcp-ssd-storage
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: In
        values:
        - 'true'
      - key: hive.openshift.io/cluster-platform
        operator: In
        values:
        - gcp
    resourceApplyMode: Sync
    applyBehavior: CreateOnly
    resources:
    - apiVersion: storage.k8s.io/v1
      kind: StorageClass
      metadata:
        name: ssd
        annotations:
          storageclass.kubernetes.io/is-default-class: 'false'
      provisioner: kubernetes.io/gce-pd
      parameters:
        type: pd-ssd
        replication-type: none
      volumeBindingMode: WaitForFirstConsumer
      allowVolumeExpansion: true
      reclaimPolicy: Delete
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-gcp-ssd-storage-provisioner-fix
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/ccs
        operator: In
        values:
        - 'true'
      - key: hive.openshift.io/cluster-platform
        operator: In
        values:
        - gcp
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-ssd-provisioner
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: openshift-ssd-provisioner
      rules:
      - apiGroups:
        - storage.k8s.io
        resources:
        - storageclasses
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: openshift-ssd-provisioner
      roleRef:
        kind: ClusterRole
        name: openshift-ssd-provisioner
        apiGroup: rbac.authorization.k8s.io
      subjects:
      - kind: ServiceAccount
        name: openshift-ssd-provisioner-sa
        namespace: openshift-ssd-provisioner
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: openshift-ssd-provisioner-sa
        namespace: openshift-ssd-provisioner
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: openshift-ssd-provisioner
        namespace: openshift-ssd-provisioner
      spec:
        failedJobsHistoryLimit: 5
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Replace
        schedule: 0 */1 * * *
        jobTemplate:
          spec:
            template:
              spec:
                affinity:
                  nodeAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - preference:
                        matchExpressions:
                        - key: node-role.kubernetes.io/infra
                          operator: Exists
                      weight: 1
                tolerations:
                - effect: NoSchedule
                  key: node-role.kubernetes.io/infra
                  operator: Exists
                serviceAccountName: openshift-ssd-provisioner-sa
                restartPolicy: Never
                containers:
                - name: openshift-ssd-provisioner
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  imagePullPolicy: Always
                  args:
                  - /bin/bash
                  - -c
                  - "if [[ \"$(oc get storageclass ssd -o jsonpath='{.provisioner}'\
                    \ --ignore-not-found)\" == \"kubernetes.io/gce-ssd\" ]]; then\n\
                    \  oc delete storageclass ssd --ignore-not-found\nfi\n"
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-hsts-routes
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    patches:
    - apiVersion: route.openshift.io/v1
      applyMode: Sync
      kind: Route
      name: alertmanager-main
      namespace: openshift-monitoring
      patch: '{"metadata":{"annotations":{"haproxy.router.openshift.io/hsts_header":"max-age=31536000;preload"}}}'
      patchType: merge
    - apiVersion: route.openshift.io/v1
      applyMode: Sync
      kind: Route
      name: console
      namespace: openshift-console
      patch: '{"metadata":{"annotations":{"haproxy.router.openshift.io/hsts_header":"max-age=31536000;preload"}}}'
      patchType: merge
    - apiVersion: route.openshift.io/v1
      applyMode: Sync
      kind: Route
      name: grafana
      namespace: openshift-monitoring
      patch: '{"metadata":{"annotations":{"haproxy.router.openshift.io/hsts_header":"max-age=31536000;preload"}}}'
      patchType: merge
    - apiVersion: route.openshift.io/v1
      applyMode: Sync
      kind: Route
      name: prometheus-k8s
      namespace: openshift-monitoring
      patch: '{"metadata":{"annotations":{"haproxy.router.openshift.io/hsts_header":"max-age=31536000;preload"}}}'
      patchType: merge
    - apiVersion: route.openshift.io/v1
      applyMode: Sync
      kind: Route
      name: thanos-querier
      namespace: openshift-monitoring
      patch: '{"metadata":{"annotations":{"haproxy.router.openshift.io/hsts_header":"max-age=31536000;preload"}}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-ingress
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-sre-sshd
    patches:
    - apiVersion: operator.openshift.io/v1
      applyMode: AlwaysApply
      kind: IngressController
      name: default
      namespace: openshift-ingress-operator
      patch: '{"spec":{"nodePlacement":{"nodeSelector":{"matchLabels":{"node-role.kubernetes.io/infra":""}},"tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/infra","operator":"Exists"}]}}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-logging
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/product
        operator: NotIn
        values:
        - rosa
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.4'
        - '4.5'
        - '4.6'
    resourceApplyMode: Upsert
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-logging
        annotations:
          openshift.io/node-selector: ''
        labels:
          managed.openshift.io/service-lb-quota-exempt: 'true'
          managed.openshift.io/storage-pv-quota-exempt: 'true'
          openshift.io/cluster-logging: 'true'
          openshift.io/cluster-monitoring: 'true'
    - apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        annotations:
          olm.providedAPIs: ClusterLogging.v1.logging.openshift.io
        name: openshift-logging
        namespace: openshift-logging
      spec:
        serviceAccount:
          metadata:
            creationTimestamp: null
        targetNamespaces:
        - openshift-logging
    - apiVersion: v1
      data:
        actions.yaml: '# ---

          # Remember, leave a key empty if there is no value.  None will be a string,

          # not a Python "NoneType"

          #

          # Also remember that all examples have ''disable_action'' set to True.  If
          you

          # want to use this action as a template, be sure to set this to False after

          # copying it.

          # actions:

          #   1:

          #     action: delete_indices

          #     description: >-

          #       Delete .operations indices older than 30 days.

          #       Ignore the error if the filter does not

          #       result in an actionable list of indices (ignore_empty_list).

          #       See https://www.elastic.co/guide/en/elasticsearch/client/curator/5.2/ex_delete_indices.html

          #     options:

          #       # Swallow curator.exception.NoIndices exception

          #       ignore_empty_list: True

          #       # In seconds, default is 300

          #       timeout_override: ${CURATOR_TIMEOUT}

          #       # Don''t swallow any other exceptions

          #       continue_if_exception: False

          #       # Optionally disable action, useful for debugging

          #       disable_action: False

          #     # All filters are bound by logical AND

          #     filters:

          #     - filtertype: pattern

          #       kind: regex

          #       value: ''^\.operations\..*$''

          #       exclude: False

          #     - filtertype: age

          #       # Parse timestamp from index name

          #       source: name

          #       direction: older

          #       timestring: ''%Y.%m.%d''

          #       unit: days

          #       unit_count: 30

          #       exclude: False

          '
        config.yaml: "# Logging example curator config file\n\n# uncomment and use\
          \ this to override the defaults from env vars\n#.defaults:\n#  delete:\n\
          #    days: 30\n.defaults:\n  delete:\n    days: 7\n\n# to keep ops logs\
          \ for a different duration:\n.operations:\n  delete:\n    days: 0\n\n# example\
          \ for a normal project\n#myapp:\n#  delete:\n#    weeks: 1\n"
        curator5.yaml: "---\nclient:\n  hosts:\n  - ${ES_HOST}\n  port: ${ES_PORT}\n\
          \  use_ssl: True\n  certificate: ${ES_CA}\n  client_cert: ${ES_CLIENT_CERT}\n\
          \  client_key: ${ES_CLIENT_KEY}\n  ssl_no_validate: False\n  timeout: ${CURATOR_TIMEOUT}\n\
          \  master_only: False\nlogging:\n  loglevel: ${CURATOR_LOG_LEVEL}\n  logformat:\
          \ default\n  blacklist: ['elasticsearch', 'urllib3']\n  \n"
      kind: ConfigMap
      metadata:
        name: curator
        namespace: openshift-logging
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-logging-freeze
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/product
        operator: NotIn
        values:
        - rosa
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.4'
        - '4.5'
        - '4.6'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      data:
        annotation: oldInstallPlanApproval
        freeze: 'false'
      kind: ConfigMap
      metadata:
        name: osd-logging-freeze
        namespace: openshift-logging
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: osd-logging-freeze
        namespace: openshift-logging
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: osd-logging-freeze
        namespace: openshift-logging
      rules:
      - apiGroups:
        - operators.coreos.com
        resources:
        - subscriptions
        verbs:
        - patch
        - get
        - list
      - apiGroups:
        - ''
        resources:
        - configmaps
        verbs:
        - get
        - list
    - kind: RoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: osd-logging-freeze
        namespace: openshift-logging
      subjects:
      - kind: ServiceAccount
        name: osd-logging-freeze
        namespace: openshift-logging
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: osd-logging-freeze
        namespace: openshift-logging
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: osd-logging-freeze
        namespace: openshift-logging
      spec:
        failedJobsHistoryLimit: 3
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Replace
        schedule: 14,44 * * * *
        jobTemplate:
          spec:
            template:
              spec:
                serviceAccountName: osd-logging-freeze
                restartPolicy: Never
                containers:
                - name: osd-logging-freeze
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  imagePullPolicy: Always
                  args:
                  - /bin/bash
                  - -c
                  - "# Script run as an idempotent cronjob to manage freezing upgrades\
                    \ of logging operators.\n# RISK customer could set the approval\
                    \ after this is applied.  we'll use an annotation to indicate\
                    \ we tried to manage it so we don't fight customer CICD.\n\nNS=openshift-logging\n\
                    CM=osd-logging-freeze\n\nANNOTATION_NAME=$(oc -n $NS get cm $CM\
                    \ -o jsonpath='{.data.annotation}')\nFREEZE=$(oc -n $NS get cm\
                    \ $CM -o jsonpath='{.data.freeze}')\n\nfor SUBSCRIPTION in $(oc\
                    \ -n $NS get subscriptions -o name);\ndo\n  OLD_APPROVAL=$(oc\
                    \ -n $NS get $SUBSCRIPTION -o jsonpath=\"{.metadata.annotations.$ANNOTATION_NAME}\"\
                    )\n  CURR_APPROVAL=$(oc -n $NS get $SUBSCRIPTION -o jsonpath={'.spec.installPlanApproval'})\n\
                    \n  if [ \"$FREEZE\" == \"true\" ] && [ \"$OLD_APPROVAL\" == \"\
                    \" ] && [ \"$CURR_APPROVAL\" == \"Automatic\" ];\n  then\n   \
                    \ # subscription is automatic, we are in a freeze, and haven't\
                    \ tried to make it manual yet\n\n    echo \"Moving $SUBSCRIPTION\
                    \ in $NS to installPlanApproval='Manual'\"\n    \n    # also add\
                    \ annotation first for undoing this later\n    oc -n $NS annotate\
                    \ $SUBSCRIPTION $ANNOTATION_NAME=$CURR_APPROVAL\n    \n    oc\
                    \ -n $NS patch $SUBSCRIPTION --type='json' -p=\"[{'op': 'replace',\
                    \ 'path': '/spec/installPlanApproval', 'value': 'Manual'}]\"\n\
                    \  \n  elif [ \"$FREEZE\" != \"true\" ] && [ \"$OLD_APPROVAL\"\
                    \ != \"\" ];\n  then\n    # old approval annotation is set and\
                    \ we are NOT in a freeze\n\n    # only patch if the old value\
                    \ != current value\n    # (remember, customer could have changed\
                    \ the value!)\n    if [ \"$OLD_APPROVAL\" != \"$CURR_APPROVAL\"\
                    \ ];\n    then\n      echo \"Moving $SUBSCRIPTION in $NS to installPlanApproval='$OLD_APPROVAL'\"\
                    \n      oc -n $NS patch $SUBSCRIPTION --type='json' -p=\"[{'op':\
                    \ 'replace', 'path': '/spec/installPlanApproval', 'value': '$OLD_APPROVAL'}]\"\
                    \n\n      # get the current value again so we can be sure it was\
                    \ actually set\n      CURR_APPROVAL=$(oc -n $NS get $SUBSCRIPTION\
                    \ -o jsonpath={'.spec.installPlanApproval'})\n    fi\n\n    if\
                    \ [ \"$OLD_APPROVAL\" == \"$CURR_APPROVAL\" ];\n    then\n   \
                    \   # approval was updated, remove the annotation\n      oc -n\
                    \ $NS annotate $SUBSCRIPTION ${ANNOTATION_NAME}-\n    else\n \
                    \     echo \"FAILURE: old approval value is not current approval\
                    \ value, leaving annotation\"\n      # TODO should this exit with\
                    \ a non-zero value?\n    fi\n\n  fi\ndone\n"
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-logging-supported
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/product
        operator: NotIn
        values:
        - rosa
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.4'
        - '4.5'
        - '4.6'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: ResourceQuota
      metadata:
        name: logging-storage-quota
        namespace: openshift-logging
      spec:
        hard:
          requests.storage: 1500Gi
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-logging
        namespace: openshift-logging
      rules:
      - apiGroups:
        - ''
        resources:
        - events
        - namespaces
        - persistentvolumeclaims
        - persistentvolumes
        - pods
        - pods/log
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - ''
        resources:
        - secrets
        verbs:
        - '*'
      - apiGroups:
        - logging.openshift.io
        resources:
        - clusterloggings
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - operators.coreos.com
        resources:
        - subscriptions
        - clusterserviceversions
        verbs:
        - '*'
      - apiGroups:
        - operators.coreos.com
        resources:
        - installplans
        verbs:
        - update
      - apiGroups:
        - ''
        resources:
        - persistentvolumeclaims
        verbs:
        - '*'
      - apiGroups:
        - apps
        - extensions
        resources:
        - daemonsets
        verbs:
        - get
        - list
        - patch
        - update
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-openshift-logging
        namespace: openshift-logging
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-openshift-logging
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-logging-unsupported-product
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/product
        operator: In
        values:
        - rosa
    resourceApplyMode: Upsert
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-logging
        annotations:
          openshift.io/node-selector: ''
        labels:
          openshift.io/cluster-logging: 'true'
    - apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        annotations:
          olm.providedAPIs: ClusterLogging.v1.logging.openshift.io
        name: openshift-logging
        namespace: openshift-logging
      spec:
        serviceAccount:
          metadata:
            creationTimestamp: null
        targetNamespaces:
        - openshift-logging
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-logging
        namespace: openshift-logging
      rules:
      - apiGroups:
        - ''
        resources:
        - events
        - namespaces
        - persistentvolumeclaims
        - persistentvolumes
        - pods
        - pods/log
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - ''
        resources:
        - secrets
        verbs:
        - '*'
      - apiGroups:
        - logging.openshift.io
        resources:
        - clusterloggings
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - operators.coreos.com
        resources:
        - subscriptions
        - clusterserviceversions
        verbs:
        - '*'
      - apiGroups:
        - operators.coreos.com
        resources:
        - installplans
        verbs:
        - update
      - apiGroups:
        - ''
        resources:
        - persistentvolumeclaims
        verbs:
        - '*'
      - apiGroups:
        - apps
        - extensions
        resources:
        - daemonsets
        verbs:
        - get
        - list
        - patch
        - update
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: admin-dedicated-admins
        namespace: openshift-logging
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: admin
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: admin-system:serviceaccounts:dedicated-admin
        namespace: openshift-logging
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: admin
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: system:serviceaccounts:dedicated-admin
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: openshift-logging-dedicated-admins
        namespace: openshift-logging
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: dedicated-admins-project
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: openshift-logging:serviceaccounts:dedicated-admin
        namespace: openshift-logging
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: dedicated-admins-project
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: system:serviceaccounts:dedicated-admin
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-logging-unsupported-version-major-minor
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: NotIn
        values:
        - '4.4'
        - '4.5'
        - '4.6'
    resourceApplyMode: Upsert
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-logging
        annotations:
          openshift.io/node-selector: ''
        labels:
          openshift.io/cluster-logging: 'true'
    - apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        annotations:
          olm.providedAPIs: ClusterLogging.v1.logging.openshift.io
        name: openshift-logging
        namespace: openshift-logging
      spec:
        serviceAccount:
          metadata:
            creationTimestamp: null
        targetNamespaces:
        - openshift-logging
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-logging
        namespace: openshift-logging
      rules:
      - apiGroups:
        - ''
        resources:
        - events
        - namespaces
        - persistentvolumeclaims
        - persistentvolumes
        - pods
        - pods/log
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - ''
        resources:
        - secrets
        verbs:
        - '*'
      - apiGroups:
        - logging.openshift.io
        resources:
        - clusterloggings
        verbs:
        - create
        - delete
        - deletecollection
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - operators.coreos.com
        resources:
        - subscriptions
        - clusterserviceversions
        verbs:
        - '*'
      - apiGroups:
        - operators.coreos.com
        resources:
        - installplans
        verbs:
        - update
      - apiGroups:
        - ''
        resources:
        - persistentvolumeclaims
        verbs:
        - '*'
      - apiGroups:
        - apps
        - extensions
        resources:
        - daemonsets
        verbs:
        - get
        - list
        - patch
        - update
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: admin-dedicated-admins
        namespace: openshift-logging
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: admin
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: admin-system:serviceaccounts:dedicated-admin
        namespace: openshift-logging
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: admin
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: system:serviceaccounts:dedicated-admin
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: openshift-logging-dedicated-admins
        namespace: openshift-logging
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: dedicated-admins-project
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: openshift-logging:serviceaccounts:dedicated-admin
        namespace: openshift-logging
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: dedicated-admins-project
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: system:serviceaccounts:dedicated-admin
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-machine-api
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: machine.openshift.io/v1beta1
      kind: MachineHealthCheck
      metadata:
        name: srep-infra-healthcheck
        namespace: openshift-machine-api
      spec:
        selector:
          matchLabels:
            machine.openshift.io/cluster-api-machine-role: infra
        unhealthyConditions:
        - type: Ready
          timeout: 480s
          status: 'False'
        - type: Ready
          timeout: 480s
          status: Unknown
        maxUnhealthy: 2
    - apiVersion: machine.openshift.io/v1beta1
      kind: MachineHealthCheck
      metadata:
        name: srep-worker-healthcheck
        namespace: openshift-machine-api
      spec:
        selector:
          matchLabels:
            machine.openshift.io/cluster-api-machine-role: worker
        unhealthyConditions:
        - type: Ready
          timeout: 480s
          status: 'False'
        - type: Ready
          timeout: 480s
          status: Unknown
        maxUnhealthy: 2
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-must-gather-operator
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-must-gather-operator
        annotations:
          openshift.io/node-selector: ''
        labels:
          openshift.io/cluster-logging: 'true'
          openshift.io/cluster-monitoring: 'true'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: osd-devaccess
        namespace: openshift-must-gather-operator
      rules:
      - apiGroups:
        - ''
        resources:
        - secrets
        verbs:
        - create
      - apiGroups:
        - managed.openshift.io
        resources:
        - mustgathers
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: osd-devaccess
        namespace: openshift-must-gather-operator
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: osd-devaccess
        namespace: openshift-must-gather-operator
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: osd-devaccess
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-namespace-labels
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    patches:
    - kind: Namespace
      apiVersion: v1
      name: openshift-kube-apiserver
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"name":"openshift-kube-apiserver"} } }'
      patchType: merge
    - kind: Namespace
      apiVersion: v1
      name: openshift-operator-lifecycle-manager
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"name":"openshift-operator-lifecycle-manager"}
        } }'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-oauth-templates
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/product
        operator: NotIn
        values:
        - rosa
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      applyMode: AlwaysApply
      kind: OAuth
      name: cluster
      patch: '{"spec":{"templates": {"login": {"name": "osd-oauth-templates-login"},"providerSelection":
        {"name": "osd-oauth-templates-providers"},"error": {"name": "osd-oauth-templates-errors"}}}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-oauth-templates-errors
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/product
        operator: NotIn
        values:
        - rosa
    resourceApplyMode: Sync
    applyBehavior: CreateOrUpdate
    resources:
    - apiVersion: v1
      data:
        errors.html: 
      kind: Secret
      metadata:
        creationTimestamp: null
        name: osd-oauth-templates-errors
        namespace: openshift-config
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-oauth-templates-login
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/product
        operator: NotIn
        values:
        - rosa
    resourceApplyMode: Sync
    applyBehavior: CreateOrUpdate
    resources:
    - apiVersion: v1
      data:
        login.html: 
      kind: Secret
      metadata:
        creationTimestamp: null
        name: osd-oauth-templates-login
        namespace: openshift-config
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-oauth-templates-providers
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/product
        operator: NotIn
        values:
        - rosa
    resourceApplyMode: Sync
    applyBehavior: CreateOrUpdate
    resources:
    - apiVersion: v1
      data:
        providers.html: 
      kind: Secret
      metadata:
        creationTimestamp: null
        name: osd-oauth-templates-providers
        namespace: openshift-config
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-oauth-templates-ohss-2561
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: environment
        operator: In
        values:
        - integration
      - key: ext-managed.openshift.io/hive-shard
        operator: In
        values:
        - 'true'
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      applyMode: AlwaysApply
      kind: OAuth
      name: cluster
      namespace: default
      patch: '{"spec":{"tokenConfig":{"accessTokenMaxAgeSeconds":604800, "accessTokenInactivityTimeout":
        "168h"}}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-oauth-tokens
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/environment
        operator: NotIn
        values:
        - production
        - staging
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      applyMode: AlwaysApply
      kind: OAuth
      name: cluster
      patch: '{"spec":{"tokenConfig":{"accessTokenMaxAgeSeconds":86400, "accessTokenInactivityTimeoutSeconds":21600,"accessTokenInactivityTimeout":"6h"}}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-openshift-operators-redhat
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-operators-redhat
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: admin-dedicated-admins
        namespace: openshift-operators-redhat
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: admin
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: admin-system:serviceaccounts:dedicated-admin
        namespace: openshift-operators-redhat
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: admin
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: system:serviceaccounts:dedicated-admin
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: openshift-operators-redhat-dedicated-admins
        namespace: openshift-operators-redhat
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: dedicated-admins-project
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: openshift-operators-redhat:serviceaccounts:dedicated-admin
        namespace: openshift-operators-redhat
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: dedicated-admins-project
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: system:serviceaccounts:dedicated-admin
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-pcap-collector
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - kind: SecurityContextConstraints
      apiVersion: security.openshift.io/v1
      metadata:
        name: pcap-collector
      allowPrivilegedContainer: true
      allowHostNetwork: true
      allowedCapabilities:
      - NET_ADMIN
      - NET_RAW
      runAsUser:
        type: MustRunAsNonRoot
      seLinuxContext:
        type: MustRunAs
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: pcap-collector
      rules:
      - apiGroups:
        - security.openshift.io
        resources:
        - securitycontextconstraints
        resourceNames:
        - pcap-collector
        verbs:
        - use
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: pcap-collector
      subjects:
      - kind: Group
        name: osd-sre-admins
        apiGroup: rbac.authorization.k8s.io
      - kind: Group
        name: osd-devaccess
        apiGroup: rbac.authorization.k8s.io
      roleRef:
        kind: ClusterRole
        name: pcap-collector
        apiGroup: rbac.authorization.k8s.io
    - kind: SecurityContextConstraints
      apiVersion: security.openshift.io/v1
      metadata:
        name: pcap-dedicated-admins
      allowPrivilegedContainer: false
      allowHostNetwork: false
      allowedCapabilities:
      - NET_ADMIN
      - NET_RAW
      runAsUser:
        type: RunAsAny
      seLinuxContext:
        type: RunAsAny
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: pcap-dedicated-admins
      rules:
      - apiGroups:
        - security.openshift.io
        resources:
        - securitycontextconstraints
        resourceNames:
        - pcap-dedicated-admins
        verbs:
        - use
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: pcap-dedicated-admins
      subjects:
      - kind: Group
        name: dedicated-admins
      roleRef:
        kind: ClusterRole
        name: pcap-dedicated-admins
        apiGroup: rbac.authorization.k8s.io
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-project-request-template
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-project-request
        namespace: openshift-config
      rules:
      - apiGroups:
        - template.openshift.io
        resources:
        - templates
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-project-request
        namespace: openshift-config
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-project-request
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
    patches:
    - kind: Namespace
      apiVersion: v1
      name: default
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"name":"default"} } }'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-registry
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: NotIn
        values:
        - '4.0'
        - '4.1'
        - '4.2'
        - '4.3'
        - '4.4'
    resourceApplyMode: Sync
    patches:
    - apiVersion: imageregistry.operator.openshift.io/v1
      applyMode: AlwaysApply
      kind: Config
      name: cluster
      patch: '{"spec":{"defaultRoute":true,"affinity":{"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"preference":{"matchExpressions":[{"key":"node-role.kubernetes.io/infra","operator":"Exists"}]},"weight":1}]}},"tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/infra","operator":"Exists"}]}}'
      patchType: merge
    - apiVersion: imageregistry.operator.openshift.io/v1
      applyMode: AlwaysApply
      kind: Config
      name: cluster
      patch: '[{"op":"remove","path":"/spec/nodeSelector"}]'
      patchType: json
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-registry-legacy
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.0'
        - '4.1'
        - '4.2'
        - '4.3'
        - '4.4'
    resourceApplyMode: Sync
    patches:
    - apiVersion: imageregistry.operator.openshift.io/v1
      applyMode: AlwaysApply
      kind: Config
      name: cluster
      patch: '{"spec":{"defaultRoute":true,"nodeSelector":{"node-role.kubernetes.io/infra":""},"tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/infra","operator":"Exists"}]}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-route-monitor-operator
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/environment
        operator: NotIn
        values:
        - production
    resourceApplyMode: Sync
    resources:
    - apiVersion: monitoring.openshift.io/v1alpha1
      kind: RouteMonitor
      metadata:
        name: console
        namespace: openshift-route-monitor-operator
      spec:
        route:
          name: console
          namespace: openshift-console
        slo:
          targetAvailabilityPercent: '99.5'
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-samesite-cookie
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: NotIn
        values:
        - '4.0'
        - '4.1'
        - '4.2'
        - '4.3'
        - '4.4'
        - '4.5'
    resourceApplyMode: Sync
    patches:
    - apiVersion: route.openshift.io/v1
      applyMode: Sync
      kind: Route
      name: alertmanager-main
      namespace: openshift-monitoring
      patch: '{"metadata":{"annotations":{"router.openshift.io/cookie-same-site":"Strict"}}}'
      patchType: merge
    - apiVersion: route.openshift.io/v1
      applyMode: Sync
      kind: Route
      name: console
      namespace: openshift-console
      patch: '{"metadata":{"annotations":{"router.openshift.io/cookie-same-site":"Strict"}}}'
      patchType: merge
    - apiVersion: route.openshift.io/v1
      applyMode: Sync
      kind: Route
      name: grafana
      namespace: openshift-monitoring
      patch: '{"metadata":{"annotations":{"router.openshift.io/cookie-same-site":"Strict"}}}'
      patchType: merge
    - apiVersion: route.openshift.io/v1
      applyMode: Sync
      kind: Route
      name: prometheus-k8s
      namespace: openshift-monitoring
      patch: '{"metadata":{"annotations":{"router.openshift.io/cookie-same-site":"Strict"}}}'
      patchType: merge
    - apiVersion: route.openshift.io/v1
      applyMode: Sync
      kind: Route
      name: thanos-querier
      namespace: openshift-monitoring
      patch: '{"metadata":{"annotations":{"router.openshift.io/cookie-same-site":"Strict"}}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-serviceaccounts
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Upsert
    resources:
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: cloud-ingress-operator
        namespace: openshift-cloud-ingress-operator
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: managed-upgrade-operator
        namespace: openshift-managed-upgrade-operator
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: configure-alertmanager-operator
        namespace: openshift-monitoring
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: rbac-permissions-operator
        namespace: openshift-rbac-permissions
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: splunk-forwarder-operator
        namespace: openshift-splunk-forwarder-operator
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: managed-velero-operator
        namespace: openshift-velero
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-serviceaccounts-aws
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        hive.openshift.io/cluster-platform: aws
    resourceApplyMode: Upsert
    resources:
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: custom-domains-operator
        namespace: openshift-custom-domains-operator
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-serviceaccounts-cronjob
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: osd-delete-ownerrefs-serviceaccounts
        namespace: openshift-backplane-srep
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: osd-delete-ownerrefs-serviceaccounts
      rules:
      - apiGroups:
        - ''
        resources:
        - serviceaccounts
        verbs:
        - '*'
    - kind: ClusterRoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: osd-delete-ownerrefs-serviceaccounts
      subjects:
      - kind: ServiceAccount
        name: osd-delete-ownerrefs-serviceaccounts
        namespace: openshift-backplane-srep
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: osd-delete-ownerrefs-serviceaccounts
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: osd-delete-ownerrefs-serviceaccounts
        namespace: openshift-backplane-srep
      spec:
        failedJobsHistoryLimit: 3
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Replace
        schedule: 7,37 * * * *
        jobTemplate:
          spec:
            template:
              spec:
                affinity:
                  nodeAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - preference:
                        matchExpressions:
                        - key: node-role.kubernetes.io/infra
                          operator: Exists
                      weight: 1
                tolerations:
                - effect: NoSchedule
                  key: node-role.kubernetes.io/infra
                  operator: Exists
                serviceAccountName: osd-delete-ownerrefs-serviceaccounts
                restartPolicy: Never
                containers:
                - name: osd-delete-ownerrefs-serviceaccounts
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  imagePullPolicy: Always
                  args:
                  - /bin/bash
                  - -c
                  - "for NS in openshift-cloud-ingress-operator openshift-custom-domains-operator\
                    \ openshift-managed-upgrade-operator openshift-monitoring openshift-rbac-permissions\
                    \ openshift-splunk-forwarder-operator openshift-velero;\ndo\n\
                    \  for SA in $(oc -n $NS get serviceaccount --ignore-not-found\
                    \ -o jsonpath='{.items[?(@.metadata.ownerReferences[0].kind==\"\
                    ClusterServiceVersion\")].metadata.name}');\n  do\n    echo \"\
                    Removing owner ref from SA '$SA' in NS '$NS'\"\n    oc -n $NS\
                    \ patch serviceaccount $SA --type=json -p '[{\"op\":\"remove\"\
                    ,\"path\":\"/metadata/ownerReferences\"}]'\n  done\ndone\n"
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-strimzi-operator
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-strimzi
        annotations:
          openshift.io/node-selector: ''
        labels:
          openshift.io/cluster-logging: 'true'
    - apiVersion: operators.coreos.com/v1
      kind: OperatorGroup
      metadata:
        name: openshift-strimzi
        namespace: openshift-strimzi
      spec:
        serviceAccount:
          metadata:
            creationTimestamp: null
        targetNamespaces:
        - openshift-strimzi
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-strimzi
        namespace: openshift-strimzi
      rules:
      - apiGroups:
        - ''
        resources:
        - namespaces
        - pods
        - pods/log
        - events
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - operators.coreos.com
        resources:
        - subscriptions
        - clusterserviceversions
        verbs:
        - '*'
      - apiGroups:
        - monitoring.coreos.com
        resources:
        - prometheusrules
        - servicemonitors
        - podmonitors
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - secrets
        verbs:
        - create
        - update
        - get
        - list
        - watch
        - delete
      - apiGroups:
        - ''
        resources:
        - configmaps
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - kafka.strimzi.io
        resources:
        - '*'
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-openshift-strimzi
        namespace: openshift-strimzi
      subjects:
      - kind: Group
        name: dedicated-admins
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-openshift-strimzi
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-token-refresher
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: apps/v1
      kind: Deployment
      metadata:
        labels:
          app.kubernetes.io/component: authentication-proxy
          app.kubernetes.io/name: token-refresher
          app.kubernetes.io/version: master-2021-02-24-1e01b9c
        name: token-refresher
        namespace: openshift-monitoring
      spec:
        replicas: 1
        selector:
          matchLabels:
            app.kubernetes.io/component: authentication-proxy
            app.kubernetes.io/name: token-refresher
        template:
          metadata:
            labels:
              app.kubernetes.io/component: authentication-proxy
              app.kubernetes.io/name: token-refresher
              app.kubernetes.io/version: master-2021-02-24-1e01b9c
          spec:
            affinity:
              nodeAffinity:
                preferredDuringSchedulingIgnoredDuringExecution:
                - preference:
                    matchExpressions:
                    - key: node-role.kubernetes.io/infra
                      operator: Exists
                  weight: 1
            tolerations:
            - effect: NoSchedule
              key: node-role.kubernetes.io/infra
              operator: Exists
            containers:
            - args:
              - --oidc.audience=observatorium-telemeter
              - --oidc.client-id=$(CLIENT_ID)
              - --oidc.client-secret=$(CLIENT_SECRET)
              - --oidc.issuer-url=$(ISSUER_URL)
              - --url=$(RECEIVER_URL)
              env:
              - name: CLIENT_ID
                valueFrom:
                  secretKeyRef:
                    name: observatorium-credentials
                    key: client-id
              - name: CLIENT_SECRET
                valueFrom:
                  secretKeyRef:
                    name: observatorium-credentials
                    key: client-secret
              - name: RECEIVER_URL
                valueFrom:
                  secretKeyRef:
                    name: observatorium-credentials
                    key: receiver-url
              - name: ISSUER_URL
                value: https://sso.redhat.com/auth/realms/redhat-external
              image: quay.io/observatorium/token-refresher:master-2021-02-24-1e01b9c
              name: token-refresher
              ports:
              - containerPort: 8080
                name: http
    - apiVersion: v1
      kind: Service
      metadata:
        labels:
          app.kubernetes.io/component: authentication-proxy
          app.kubernetes.io/name: token-refresher
          app.kubernetes.io/version: master-2021-02-24-1e01b9c
        name: token-refresher
        namespace: openshift-monitoring
      spec:
        ports:
        - name: http
          port: 80
          targetPort: 8080
        selector:
          app.kubernetes.io/component: authentication-proxy
          app.kubernetes.io/name: token-refresher
    - apiVersion: networking.k8s.io/v1
      kind: NetworkPolicy
      metadata:
        labels:
          app.kubernetes.io/component: authentication-proxy
          app.kubernetes.io/name: token-refresher
        name: token-refresher
        namespace: openshift-monitoring
      spec:
        podSelector:
          matchLabels:
            app.kubernetes.io/component: authentication-proxy
            app.kubernetes.io/name: token-refresher
        policyTypes:
        - Ingress
        ingress:
        - from:
          - podSelector:
              matchLabels:
                prometheus: k8s
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: osd-user-workload-monitoring
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-uwm-config-edit
        namespace: openshift-user-workload-monitoring
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: user-workload-monitoring-config-edit
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-user-workload-monitoring-create-cm
        namespace: openshift-user-workload-monitoring
      rules:
      - apiGroups:
        - ''
        resources:
        - configmaps
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-uwm-config-create
        namespace: openshift-user-workload-monitoring
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-user-workload-monitoring-create-cm
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: rbac-permissions-operator-config
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: dedicated-admin
        annotations:
          openshift.io/node-selector: ''
    - aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-dedicated-admins
            operator: In
            values:
            - cluster
        - matchExpressions:
          - key: olm.opgroup.permissions/aggregate-to-admin
            operator: In
            values:
            - openshift-logging
            - openshift-operators
            - openshift-operators-redhat
        - matchExpressions:
          - key: olm.owner.kind
            operator: In
            values:
            - OperatorGroup
          - key: olm.owner
            operator: NotIn
            values:
            - openshift-cluster-monitoring
            - olm-operators
            - cloud-ingress-operator
            - rbac-permissions-operator
            - splunk-forwarder-operator-og
            - redhat-layered-product-og
            - addon-rhmi-og
            - addon-rhmi-internal-og
            - rhmi-registry-og
          - key: olm.owner.namespace
            operator: NotIn
            values:
            - openshift-monitoring
            - openshift-operator-lifecycle-manager
            - openshift-cloud-ingress-operator
            - openshift-rbac-permissions
            - openshift-splunk-forwarder-operator
            - openshift-managed-upgrade-operator
            - openshift-velero
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: dedicated-admins-cluster
      rules: []
    - aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-dedicated-admins
            operator: In
            values:
            - project
        - matchExpressions:
          - key: rbac.authorization.k8s.io/aggregate-to-admin
            operator: In
            values:
            - 'true'
        - matchExpressions:
          - key: olm.opgroup.permissions/aggregate-to-admin
            operator: In
            values:
            - openshift-logging
            - openshift-operators
            - openshift-operators-redhat
        - matchExpressions:
          - key: olm.owner.kind
            operator: In
            values:
            - OperatorGroup
          - key: olm.owner.namespace
            operator: NotIn
            values:
            - openshift-cloud-ingress-operator
            - openshift-monitoring
            - openshift-operator-lifecycle-manager
            - openshift-rbac-permissions
            - openshift-splunk-forwarder-operator
            - openshift-velero
            - openshift-managed-upgrade-operator
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: dedicated-admins-project
      rules: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          managed.openshift.io/aggregate-to-dedicated-admins: cluster
        name: dedicated-admins-aggregate-cluster
      rules:
      - apiGroups:
        - rbac.authorization.k8s.io
        attributeRestrictions: null
        resources:
        - clusterroles
        - clusterrolebindings
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        - oauth.openshift.io
        attributeRestrictions: null
        resources:
        - oauthclientauthorizations
        verbs:
        - delete
        - get
        - list
        - watch
      - apiGroups:
        - ''
        - authorization.openshift.io
        attributeRestrictions: null
        resources:
        - resourceaccessreviews
        - subjectaccessreviews
        verbs:
        - create
      - apiGroups:
        - authorization.k8s.io
        attributeRestrictions: null
        resources:
        - subjectaccessreviews
        - selfsubjectaccessreviews
        verbs:
        - create
      - apiGroups:
        - ''
        - project.openshift.io
        attributeRestrictions: null
        resources:
        - projectrequests
        verbs:
        - create
      - apiGroups:
        - ''
        - security.openshift.io
        attributeRestrictions: null
        resources:
        - securitycontextconstraints
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        - network.openshift.io
        attributeRestrictions: null
        resources:
        - netnamespaces
        verbs:
        - get
        - list
        - update
      - apiGroups:
        - route.openshift.io
        resources:
        - routers/metrics
        verbs:
        - get
      - apiGroups:
        - ''
        resources:
        - namespaces
        verbs:
        - get
        - list
        - update
        - patch
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        - buildconfigs
        verbs:
        - list
      - apiGroups:
        - apps
        resources:
        - daemonsets
        - deployments
        - replicasets
        - statefulsets
        verbs:
        - list
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigs
        verbs:
        - list
      - apiGroups:
        - ''
        resources:
        - pods
        - replicationcontrollers
        - services
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - project.openshift.io
        resources:
        - projects
        verbs:
        - get
      - apiGroups:
        - route.openshift.io
        resources:
        - routes
        verbs:
        - list
        - get
      - apiGroups:
        - authentication.k8s.io
        resources:
        - tokenreviews
        verbs:
        - create
      - apiGroups:
        - authorization.k8s.io
        resources:
        - subjectaccessreviews
        verbs:
        - create
      - apiGroups:
        - operators.coreos.com
        - packages.operators.coreos.com
        resources:
        - '*'
        verbs:
        - list
        - get
        - watch
      - apiGroups:
        - '*'
        resources:
        - packagemanifests
        verbs:
        - list
      - apiGroups:
        - certificates.certmanager.k8s.io
        - issuers.certmanager.k8s.io
        - clusterissuers.certmanager.k8s.io
        - orders.certmanager.k8s.io
        - challenges.certmanager.k8s.io
        - anchoreengines.anchore.com
        - atlasmaps.atlasmap.io
        - builds.camel.apache.org
        - camelcatalogs.camel.apache.org
        - integrations.camel.apache.org
        - integrationcontexts.camel.apache.org
        - integrationplatforms.camel.apache.org
        - couchbaseclusters.couchbase.com
        - openliberties.openliberty.io
        - opsmxspinnakeroperators.charts.helm.k8s.io
        - seldondeployments.machinelearning.seldon.io
        - spinnakeroperators.charts.helm.k8s.io
        - twistlockconsoles.charts.helm.k8s.io
        - tekton.dev
        resources:
        - '*'
        verbs:
        - '*'
      - apiGroups:
        - user.openshift.io
        resources:
        - groups
        - identities
        - users
        verbs:
        - get
        - list
        - update
        - patch
        - create
        - delete
      - apiGroups:
        - user.openshift.io
        resources:
        - useridentitymappings
        verbs:
        - '*'
      - apiGroups:
        - operator.openshift.io
        resources:
        - dnses
        resourceNames:
        - default
        verbs:
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        - image.openshift.io
        attributeRestrictions: null
        resources:
        - images
        - imagestreamtags
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - security.openshift.io
        resourceNames:
        - anyuid
        - nonroot
        resources:
        - securitycontextconstraints
        verbs:
        - use
      - apiGroups:
        - config.openshift.io
        resources:
        - projects
        verbs:
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - machine.openshift.io
        resources:
        - machines
        - machinesets
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - quota.openshift.io
        resources:
        - clusterresourcequotas
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          managed.openshift.io/aggregate-to-dedicated-admins: project
        name: dedicated-admins-aggregate-project
      rules:
      - apiGroups:
        - ''
        attributeRestrictions: null
        resources:
        - limitranges
        - resourcequotas
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        - network.openshift.io
        attributeRestrictions: null
        resources:
        - egressnetworkpolicies
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - extensions
        attributeRestrictions: null
        resources:
        - daemonsets
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - rbac.authorization.k8s.io
        attributeRestrictions: null
        resources:
        - clusterrolebindings
        - rolebindings
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - ''
        attributeRestrictions: null
        resources:
        - events
        - namespaces
        - pods
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        - network.openshift.io
        attributeRestrictions: null
        resources:
        - clusternetworks
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        - image.openshift.io
        attributeRestrictions: null
        resources:
        - images
        - imagestreamtags
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        - build.openshift.io
        attributeRestrictions: null
        resources:
        - buildconfigs
        - builds
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - monitoring.coreos.com
        resources:
        - alertmanagers
        verbs:
        - '*'
      - apiGroups:
        - monitoring.coreos.com
        resources:
        - prometheuses
        - prometheusrules
        - servicemonitors
        - podmonitors
        - thanosrulers
        verbs:
        - '*'
      - apiGroups:
        - kafka.strimzi.io
        resources:
        - '*'
        verbs:
        - create
        - delete
        - get
        - list
        - patch
        - update
        - watch
      - apiGroups:
        - apiextensions.k8s.io
        resources:
        - customresourcedefinitions
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - prow.k8s.io
        resources:
        - prowjobs
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - events
        verbs:
        - create
      - apiGroups:
        - metering.openshift.io
        resources:
        - reports/export
        verbs:
        - '*'
      - apiGroups:
        - coordination.k8s.io
        resources:
        - leases
        verbs:
        - '*'
    - aggregationRule:
        clusterRoleSelectors:
        - matchExpressions:
          - key: rbac.authorization.k8s.io/aggregate-to-view
            operator: In
            values:
            - 'true'
        - matchExpressions:
          - key: managed.openshift.io/aggregate-to-dedicated-readers
            operator: In
            values:
            - 'true'
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          managed.openshift.io/aggregate-to-dedicated-admins: cluster
        name: dedicated-readers
      rules: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          managed.openshift.io/aggregate-to-dedicated-readers: 'true'
          managed.openshift.io/aggregate-to-devaccess: 'true'
          managed.openshift.io/aggregate-to-backplane-cee: 'true'
          managed.openshift.io/aggregate-to-backplane-cssre: 'true'
          managed.openshift.io/aggregate-to-backplane-srep: 'true'
        name: osd-readers-aggregate
      rules:
      - apiGroups:
        - ''
        attributeRestrictions: null
        resources:
        - nodes
        - persistentvolumes
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        - quota.openshift.io
        attributeRestrictions: null
        resources:
        - clusterresourcequotas
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        - authorization.openshift.io
        attributeRestrictions: null
        resources:
        - clusterpolicybindings
        verbs:
        - get
        - list
      - apiGroups:
        - metrics.k8s.io
        resources:
        - nodes
        - pods
        verbs:
        - list
      - apiGroups:
        - coordination.k8s.io
        resources:
        - leases
        verbs:
        - get
      - apiGroups:
        - admissionregistration.k8s.io
        resources:
        - '*'
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - apiextensions.k8s.io
        resources:
        - customresourcedefinitions
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - apiregistration.k8s.io
        resources:
        - apiservices
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - authentication.k8s.io
        resources:
        - tokenreviews
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - authorization.openshift.io
        resources:
        - clusterrolebindings
        - clusterroles
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - autoscaling.openshift.io
        resources:
        - clusterautoscalers
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - config.openshift.io
        resources:
        - '*'
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - console.openshift.io
        resources:
        - '*'
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - flowcontrol.apiserver.k8s.io
        resources:
        - '*'
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - image.openshift.io
        resources:
        - images
        - imagesignatures
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - imageregistry.operator.openshift.io
        resources:
        - '*'
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - metal3.io
        resources:
        - provisionings
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - migration.k8s.io
        resources:
        - '*'
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - network.openshift.io
        resources:
        - clusternetworks
        - hostsubnets
        - netnamespaces
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - networking.k8s.io
        resources:
        - ingressclasses
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - node.k8s.io
        resources:
        - runtimeclasses
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - operator.openshift.io
        resources:
        - '*'
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - policy
        resources:
        - podsecuritypolicies
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - project.openshift.io
        resources:
        - projectrequests
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - rbac.authorization.k8s.io
        resources:
        - clusterroles
        - clusterrolebindings
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - samples.operator.openshift.io
        resources:
        - configs
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - scheduling.k8s.io
        resources:
        - priorityclasses
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - security.openshift.io
        resources:
        - securitycontextconstraints
        - rangeallocations
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - snapshot.storage.k8s.io
        resources:
        - volumesnapshotcontents
        - volumesnapshotclasses
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - storage.k8s.io
        resources:
        - volumeattachments
        - csinodes
        - csidrivers
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - template.openshift.io
        resources:
        - brokertemplateinstances
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - user.openshift.io
        resources:
        - groups
        - identities
        - users
        verbs:
        - get
        - list
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: dedicated-admins-cluster
      subjects:
      - kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: dedicated-admins-cluster
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-operators
        namespace: openshift-operators
      rules:
      - apiGroups:
        - operators.coreos.com
        resources:
        - installplans
        - subscriptions
        - clusterserviceversions
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - events
        verbs:
        - list
        - get
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-openshift-operators
        namespace: openshift-operators
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-openshift-operators
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-marketplace
        namespace: openshift-marketplace
      rules:
      - apiGroups:
        - operators.coreos.com
        resources:
        - catalogsourceconfigs
        verbs:
        - '*'
      - apiGroups:
        - '*'
        resources:
        - packagemanifests
        verbs:
        - list
        - get
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-openshift-marketplace
        namespace: openshift-marketplace
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-openshift-marketplace
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: dedicated-admins-openshift-dns
        namespace: openshift-dns
      rules:
      - apiGroups:
        - ''
        resources:
        - configmaps
        verbs:
        - list
        - get
        - watch
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: dedicated-admins-openshift-dns
        namespace: openshift-dns
      subjects:
      - apiGroup: rbac.authorization.k8s.io
        kind: Group
        name: dedicated-admins
      - kind: Group
        name: system:serviceaccounts:dedicated-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: dedicated-admins-openshift-dns
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: dedicated-admin-serviceaccounts
        namespace: openshift-rbac-permissions
      spec:
        subjectKind: Group
        subjectName: system:serviceaccounts:dedicated-admin
        clusterPermissions:
        - dedicated-admins-cluster
        permissions:
        - clusterRoleName: dedicated-admins-project
          namespacesAllowedRegex: .*
          namespacesDeniedRegex: (^kube$|^kube-.*|^openshift$|^openshift-.*|^default$|^redhat-.*)
          allowFirst: true
        - clusterRoleName: admin
          namespacesAllowedRegex: .*
          namespacesDeniedRegex: (^kube$|^kube-.*|^openshift$|^openshift-.*|^default$|^redhat-.*)
          allowFirst: true
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: dedicated-admins
        namespace: openshift-rbac-permissions
      spec:
        subjectKind: Group
        subjectName: dedicated-admins
        clusterPermissions:
        - dedicated-admins-cluster
        permissions:
        - clusterRoleName: dedicated-admins-project
          namespacesAllowedRegex: .*
          namespacesDeniedRegex: (^kube$|^kube-.*|^openshift$|^openshift-.*|^default$|^redhat-.*)
          allowFirst: true
        - clusterRoleName: admin
          namespacesAllowedRegex: .*
          namespacesDeniedRegex: (^kube$|^kube-.*|^openshift$|^openshift-.*|^default$|^redhat-.*)
          allowFirst: true
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: dedicated-admins-core-ns
        namespace: openshift-rbac-permissions
      spec:
        subjectKind: Group
        subjectName: dedicated-admins
        permissions:
        - clusterRoleName: dedicated-admins-project
          namespacesAllowedRegex: (^openshift-operators$|^openshift-operators-redhat$)
          allowFirst: true
        - clusterRoleName: admin
          namespacesAllowedRegex: (^openshift-operators$|^openshift-operators-redhat$)
          allowFirst: true
    - apiVersion: managed.openshift.io/v1alpha1
      kind: SubjectPermission
      metadata:
        name: dedicated-admin-serviceaccounts-core-ns
        namespace: openshift-rbac-permissions
      spec:
        subjectKind: Group
        subjectName: system:serviceaccounts:dedicated-admin
        permissions:
        - clusterRoleName: dedicated-admins-project
          namespacesAllowedRegex: (^openshift-operators$|^openshift-operators-redhat$)
          allowFirst: true
        - clusterRoleName: admin
          namespacesAllowedRegex: (^openshift-operators$|^openshift-operators-redhat$)
          allowFirst: true
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: resource-quotas
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    patches:
    - kind: Namespace
      apiVersion: v1
      name: openshift-etcd
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"managed.openshift.io/storage-pv-quota-exempt":"true"}
        } }'
      patchType: merge
    - kind: Namespace
      apiVersion: v1
      name: openshift-ingress
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"managed.openshift.io/service-lb-quota-exempt":"true"}
        } }'
      patchType: merge
    - kind: Namespace
      apiVersion: v1
      name: openshift-kube-apiserver
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"managed.openshift.io/service-lb-quota-exempt":"true"}
        } }'
      patchType: merge
    - kind: Namespace
      apiVersion: v1
      name: openshift-monitoring
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"managed.openshift.io/storage-pv-quota-exempt":"true"}
        } }'
      patchType: merge
    - kind: Namespace
      apiVersion: v1
      name: openshift-sre-sshd
      applyMode: AlwaysApply
      patch: '{ "metadata": {"labels": {"managed.openshift.io/service-lb-quota-exempt":"true"}
        } }'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: rosa-console-branding
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/product
        operator: In
        values:
        - rosa
    resourceApplyMode: Sync
    patches:
    - apiVersion: operator.openshift.io/v1
      applyMode: AlwaysApply
      kind: Console
      name: cluster
      patchType: merge
      patch: '{"spec":{"managementState":"Managed","route":null,"customization":{"brand":null,"documentationBaseURL":"https://docs.openshift.com/rosa/","customProductName":"Red
        Hat OpenShift Service on AWS","customLogoFile":{"name":"rosa-brand-logo","key":"rosa-brand-logo.svg"}}}}'
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: rosa-console-branding-configmap
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/product
        operator: In
        values:
        - rosa
    resourceApplyMode: Sync
    applyBehavior: CreateOrUpdate
    resources:
    - apiVersion: v1
      data:
        rosa-brand-logo.svg: "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator:\
          \ Adobe Illustrator 25.2.1, SVG Export Plug-In . SVG Version: 6.00 Build\
          \ 0)  -->\n<svg version=\"1.1\" id=\"Logos\" xmlns=\"http://www.w3.org/2000/svg\"\
          \ xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n\t width=\"\
          290.5px\" height=\"47.6px\" viewBox=\"0 0 290.5 47.6\" style=\"enable-background:new\
          \ 0 0 290.5 47.6;\" xml:space=\"preserve\">\n<style type=\"text/css\">\n\
          \t.st0{fill:#FFFFFF;}\n\t.st1{fill:#EE0000;}\n</style>\n<path class=\"st0\"\
          \ d=\"M52,43.5c-4.2,0-7.5-3.3-7.5-7.5s3.3-7.5,7.5-7.5s7.6,3.3,7.6,7.5S56.3,43.5,52,43.5z\
          \ M52,30.6\n\tc-3,0-5.3,2.4-5.3,5.5s2.3,5.5,5.3,5.5c3,0,5.3-2.4,5.3-5.5S55.1,30.6,52,30.6z\"\
          />\n<path class=\"st0\" d=\"M61.7,32.8h2v1c0.9-0.8,2-1.2,3.2-1.2c3,0,5.3,2.4,5.3,5.4c0,3-2.3,5.4-5.4,5.4c-1.1,0-2.3-0.4-3.2-1v5.2h-2.1\n\
          \tL61.7,32.8z M63.7,35.7v4.8c0.7,0.8,1.8,1.2,2.9,1.2c2,0,3.6-1.6,3.6-3.6c0-2.1-1.6-3.6-3.6-3.6C65.5,34.4,64.4,34.9,63.7,35.7z\"\
          />\n<path class=\"st0\" d=\"M79.3,43.5c-3.1,0-5.5-2.4-5.5-5.5c0-3,2.3-5.4,5.3-5.4c2.9,0,5.1,2.4,5.1,5.5v0.6h-8.3c0.3,1.8,1.8,3,3.6,3\n\
          \tc1,0,1.9-0.3,2.7-0.9l1.3,1.3C82.3,43,80.8,43.5,79.3,43.5z M75.9,37.2h6.3c-0.3-1.6-1.6-2.8-3.1-2.8C77.5,34.3,76.2,35.5,75.9,37.2\n\
          \tz\"/>\n<path class=\"st0\" d=\"M86.1,32.8h2.1v1.1c0.8-0.8,2-1.3,3.2-1.3c2.4,0,4.1,1.7,4.1,4.1v6.6h-2.1V37c0-1.7-1-2.7-2.6-2.7\n\
          \tc-1,0-2,0.5-2.6,1.4v7.6h-2.1L86.1,32.8z\"/>\n<path class=\"st0\" d=\"\
          M98.2,39.4c1.6,1.5,3.2,2.3,5,2.3c2.1,0,3.5-1,3.5-2.4c0-1.3-0.8-1.9-2.9-2.3l-2.4-0.4c-2.7-0.4-4-1.7-4-3.8\n\
          \tc0-2.5,2.1-4.2,5.3-4.2c2.1,0,4.2,0.7,5.8,2l-1.2,1.7c-1.6-1.2-3.1-1.8-4.7-1.8c-1.9,0-3.1,0.9-3.1,2.2c0,1.2,0.7,1.7,2.6,2.1\n\
          \tl2.3,0.4c3.1,0.5,4.5,1.8,4.5,4c0,2.7-2.3,4.5-5.8,4.5c-2.3,0-4.6-0.9-6.2-2.6L98.2,39.4z\"\
          />\n<path class=\"st0\" d=\"M110.6,28.8l2.1-0.5v5.5c0.8-0.8,2-1.3,3.2-1.3c2.4,0,4.1,1.7,4.1,4.1v6.6h-2.1V37c0-1.7-1-2.7-2.6-2.7\n\
          \tc-1,0-2,0.5-2.6,1.4v7.6h-2.1V28.8z\"/>\n<path class=\"st0\" d=\"M122.1,29.8c0-0.7,0.6-1.3,1.3-1.3c0,0,0,0,0,0c0.7,0,1.3,0.5,1.3,1.2c0,0.7-0.5,1.3-1.2,1.3c0,0-0.1,0-0.1,0\n\
          \tC122.7,31.1,122.1,30.5,122.1,29.8C122.1,29.8,122.1,29.8,122.1,29.8z M124.4,43.3h-2.1V32.8h2.1V43.3z\"\
          />\n<path class=\"st0\" d=\"M128.4,32.8v-1.6c0-2.2,1.3-3.4,3.6-3.4c0.5,0,1,0.1,1.5,0.2v1.8c-0.4-0.1-0.9-0.2-1.3-0.2\n\
          \tc-1.1,0-1.7,0.5-1.7,1.6v1.6h3v1.7h-3v8.8h-2.1v-8.8H126v-1.7H128.4z\"/>\n\
          <path class=\"st0\" d=\"M136.6,34.5h-2.2v-1.7h2.2v-2.7l2-0.5v3.2h3.1v1.7h-3.1v5.7c0,1.1,0.4,1.5,1.6,1.5c0.5,0,1-0.1,1.5-0.2v1.7\n\
          \tc-0.6,0.2-1.3,0.3-2,0.3c-2.1,0-3.1-1-3.1-2.8L136.6,34.5z\"/>\n<path class=\"\
          st1\" d=\"M25.3,16.5c2.5,0,6.1-0.5,6.1-3.5c0-0.2,0-0.5-0.1-0.7l-1.5-6.4c-0.3-1.4-0.6-2.1-3.1-3.3\n\
          \tc-1.9-1-6.1-2.6-7.4-2.6c-1.2,0-1.5,1.5-2.9,1.5c-1.3,0-2.3-1.1-3.6-1.1c-1.2,0-2,0.8-2.6,2.5c0,0-1.7,4.7-1.9,5.4\n\
          \tc0,0.1-0.1,0.3,0,0.4C8.4,10.5,15.6,16.5,25.3,16.5 M31.8,14.3c0.3,1.6,0.3,1.8,0.3,2c0,2.8-3.1,4.3-7.3,4.3\n\
          \tc-9.3,0-17.5-5.5-17.5-9.1c0-0.5,0.1-1,0.3-1.5C4.3,10.3,0,10.9,0,14.7c0,6.3,14.9,14,26.6,14c9,0,11.3-4.1,11.3-7.3\n\
          \tC37.9,18.8,35.7,16,31.8,14.3\"/>\n<path d=\"M31.8,14.2c0.3,1.6,0.3,1.8,0.3,2c0,2.8-3.1,4.3-7.3,4.3c-9.3,0-17.5-5.4-17.5-9.1c0-0.5,0.1-1,0.3-1.5l0.7-1.8\n\
          \tc0,0.1-0.1,0.3,0,0.4c0,1.8,7.2,7.9,16.9,7.9c2.5,0,6.1-0.5,6.1-3.5c0-0.2,0-0.5-0.1-0.7L31.8,14.2z\"\
          />\n<path class=\"st0\" d=\"M115.3,18.4c0,2.4,1.4,3.5,4,3.5c0.8,0,1.6-0.1,2.4-0.3v-2.7c-0.5,0.2-1,0.2-1.5,0.2c-1.1,0-1.5-0.3-1.5-1.3\n\
          \tv-4.2h3.1v-2.8h-3.1V7.1l-3.4,0.7v2.9h-2.2v2.8h2.2L115.3,18.4z M104.8,18.4c0-0.7,0.7-1.1,1.8-1.1c0.7,0,1.4,0.1,2,0.3V19\n\
          \tc-0.6,0.4-1.4,0.5-2.1,0.5C105.4,19.6,104.8,19.1,104.8,18.4 M105.8,21.9c1.2,0,2.2-0.3,3.1-0.9v0.7h3.3v-7.1c0-2.7-1.8-4.2-4.9-4.2\n\
          \tc-1.7,0-3.4,0.4-5.2,1.2l1.2,2.5c1.3-0.5,2.4-0.9,3.4-0.9c1.4,0,2.1,0.5,2.1,1.7v0.5c-0.8-0.2-1.7-0.3-2.5-0.3\n\
          \tc-2.8,0-4.6,1.2-4.6,3.3C101.8,20.5,103.3,21.9,105.8,21.9 M87.4,21.8H91V16h6v5.7h3.6V7.1H97v5.6h-6V7.1h-3.6L87.4,21.8z\n\
          \t M73.7,16.2c0-1.6,1.3-2.8,2.9-2.8c0.9,0,1.7,0.3,2.3,0.9v3.9c-0.6,0.6-1.5,0.9-2.3,0.9C75,19,73.7,17.8,73.7,16.2\
          \ M79,21.7h3.4V6.4\n\tL79,7.1v4.2c-0.9-0.5-1.8-0.7-2.8-0.7c-3.2,0-5.8,2.5-5.8,5.7c0,3.1,2.4,5.7,5.5,5.7c0,0,0.1,0,0.1,0c1.1,0,2.1-0.3,3-1V21.7z\n\
          \t M63.6,13.2c1.1,0,2,0.7,2.3,1.8h-4.6C61.7,13.9,62.5,13.2,63.6,13.2 M57.9,16.2c0,3.2,2.6,5.7,6,5.7c1.9,0,3.2-0.5,4.6-1.7l-2.2-2\n\
          \tc-0.5,0.5-1.3,0.8-2.2,0.8c-1.2,0-2.3-0.7-2.7-1.8h7.9v-0.8c0-3.5-2.4-6.1-5.6-6.1c-3.1,0-5.7,2.5-5.8,5.6\n\
          \tC57.9,16.1,57.9,16.2,57.9,16.2 M52.1,10.2c1.2,0,1.9,0.8,1.9,1.7c0,0.9-0.7,1.7-1.9,1.7h-3.6v-3.3H52.1z\
          \ M44.9,21.8h3.6v-5.3h2.7\n\tl2.8,5.3h4l-3.2-5.9c1.7-0.7,2.8-2.3,2.8-4.1c0-2.6-2.1-4.7-5.2-4.7h-7.5L44.9,21.8z\"\
          />\n<g>\n\t<path class=\"st0\" d=\"M146.6,40.8l1.1-1.1c0.7,0.8,1.5,1.4,2.4,1.8c0.8,0.4,1.7,0.6,2.7,0.6c1.1,0,2.1-0.3,2.8-0.8\n\
          \t\tc0.7-0.5,1.1-1.2,1.1-2c0-0.7-0.3-1.3-0.8-1.7c-0.5-0.4-1.4-0.7-2.6-0.9l-2.1-0.3c-1.4-0.2-2.4-0.6-3.1-1.2c-0.7-0.6-1-1.4-1-2.4\n\
          \t\tc0-1.2,0.5-2.2,1.4-2.9c0.9-0.7,2.2-1.1,3.7-1.1c1,0,2,0.2,3,0.5c1,0.3,1.9,0.8,2.7,1.4l-0.9,1.2c-0.8-0.6-1.6-1-2.4-1.3\n\
          \t\tc-0.8-0.3-1.6-0.5-2.5-0.5c-1,0-1.9,0.2-2.5,0.7c-0.6,0.5-1,1.1-1,1.8c0,0.7,0.2,1.2,0.7,1.6c0.5,0.4,1.2,0.6,2.3,0.8l2.1,0.3\n\
          \t\tc1.6,0.3,2.7,0.7,3.4,1.3c0.7,0.6,1.1,1.5,1.1,2.6c0,0.6-0.1,1.2-0.4,1.7c-0.3,0.5-0.6,1-1.1,1.4c-0.5,0.4-1.1,0.7-1.8,0.9\n\
          \t\tc-0.7,0.2-1.4,0.3-2.2,0.3c-1.1,0-2.2-0.2-3.3-0.7C148.4,42.4,147.4,41.7,146.6,40.8z\"\
          />\n\t<path class=\"st0\" d=\"M169.1,42.2c-0.6,0.4-1.2,0.7-1.8,1c-0.6,0.2-1.3,0.3-2.1,0.3c-0.7,0-1.4-0.1-2.1-0.4\n\
          \t\tc-0.7-0.3-1.2-0.7-1.7-1.1c-0.5-0.5-0.9-1.1-1.1-1.7c-0.3-0.7-0.4-1.4-0.4-2.1c0-0.7,0.1-1.4,0.4-2.1c0.3-0.6,0.6-1.2,1.1-1.7\n\
          \t\tc0.5-0.5,1-0.9,1.6-1.1c0.6-0.3,1.3-0.4,2-0.4c0.7,0,1.3,0.1,1.9,0.4c0.6,0.3,1.1,0.7,1.6,1.1c0.4,0.5,0.8,1,1,1.7\n\
          \t\tc0.3,0.6,0.4,1.3,0.4,2.1v0.5h-8.5c0.1,1,0.5,1.9,1.3,2.5c0.7,0.7,1.6,1,2.6,1c0.5,0,1.1-0.1,1.6-0.2c0.5-0.2,0.9-0.4,1.3-0.7\n\
          \t\tL169.1,42.2z M165,34.1c-0.9,0-1.7,0.3-2.3,0.9c-0.7,0.6-1.1,1.4-1.2,2.3h6.9c-0.1-0.9-0.5-1.7-1.2-2.3\n\
          \t\tC166.6,34.4,165.8,34.1,165,34.1z\"/>\n\t<path class=\"st0\" d=\"M172,43.3V32.9h1.5v1.5c0.3-0.5,0.7-1,1.2-1.3c0.5-0.3,1.1-0.4,1.7-0.4c0.2,0,0.4,0,0.5,0\n\
          \t\tc0.2,0,0.3,0.1,0.5,0.1v1.4c-0.2-0.1-0.4-0.1-0.5-0.1c-0.2,0-0.4-0.1-0.5-0.1c-0.6,0-1.2,0.2-1.7,0.5c-0.5,0.4-0.9,0.9-1.1,1.6v7.1\n\
          \t\tH172z\"/>\n\t<path class=\"st0\" d=\"M182.9,43.3l-4.5-10.4h1.7l3.5,8.4l3.5-8.4h1.6l-4.5,10.4H182.9z\"\
          />\n\t<path class=\"st0\" d=\"M191,30.9c-0.3,0-0.5-0.1-0.7-0.3c-0.2-0.2-0.3-0.4-0.3-0.7c0-0.3,0.1-0.5,0.3-0.7c0.2-0.2,0.4-0.3,0.7-0.3\n\
          \t\tc0.3,0,0.5,0.1,0.7,0.3c0.2,0.2,0.3,0.4,0.3,0.7c0,0.3-0.1,0.5-0.3,0.7C191.5,30.8,191.3,30.9,191,30.9z\
          \ M191.8,32.9v10.4h-1.5\n\t\tV32.9H191.8z\"/>\n\t<path class=\"st0\" d=\"\
          M199.2,42.1c0.6,0,1.1-0.1,1.6-0.3c0.5-0.2,1-0.5,1.4-1l1,1c-0.6,0.5-1.2,0.9-1.9,1.2\n\
          \t\tc-0.7,0.3-1.4,0.4-2.2,0.4c-0.7,0-1.4-0.1-2.1-0.4c-0.6-0.3-1.2-0.7-1.7-1.1c-0.5-0.5-0.8-1.1-1.1-1.7c-0.3-0.7-0.4-1.4-0.4-2.1\n\
          \t\tc0-0.7,0.1-1.4,0.4-2.1c0.3-0.7,0.6-1.2,1.1-1.7c0.5-0.5,1-0.9,1.7-1.1c0.6-0.3,1.3-0.4,2.1-0.4c0.7,0,1.5,0.1,2.2,0.4\n\
          \t\tc0.7,0.3,1.3,0.7,1.9,1.2l-1,1.1c-0.4-0.4-0.9-0.8-1.4-1c-0.5-0.2-1.1-0.4-1.6-0.4c-0.5,0-1,0.1-1.5,0.3c-0.5,0.2-0.9,0.5-1.2,0.8\n\
          \t\tc-0.3,0.4-0.6,0.8-0.8,1.3c-0.2,0.5-0.3,1-0.3,1.6c0,0.6,0.1,1.1,0.3,1.6c0.2,0.5,0.5,0.9,0.8,1.3c0.3,0.4,0.7,0.6,1.2,0.8\n\
          \t\tC198.2,42,198.7,42.1,199.2,42.1z\"/>\n\t<path class=\"st0\" d=\"M213.3,42.2c-0.6,0.4-1.2,0.7-1.8,1c-0.6,0.2-1.3,0.3-2.1,0.3c-0.7,0-1.4-0.1-2.1-0.4\n\
          \t\tc-0.7-0.3-1.2-0.7-1.7-1.1c-0.5-0.5-0.9-1.1-1.1-1.7c-0.3-0.7-0.4-1.4-0.4-2.1c0-0.7,0.1-1.4,0.4-2.1c0.3-0.6,0.6-1.2,1.1-1.7\n\
          \t\tc0.5-0.5,1-0.9,1.6-1.1c0.6-0.3,1.3-0.4,2-0.4c0.7,0,1.3,0.1,1.9,0.4c0.6,0.3,1.1,0.7,1.6,1.1c0.4,0.5,0.8,1,1,1.7\n\
          \t\tc0.3,0.6,0.4,1.3,0.4,2.1v0.5h-8.5c0.1,1,0.5,1.9,1.3,2.5c0.7,0.7,1.6,1,2.6,1c0.5,0,1.1-0.1,1.6-0.2c0.5-0.2,0.9-0.4,1.3-0.7\n\
          \t\tL213.3,42.2z M209.2,34.1c-0.9,0-1.7,0.3-2.3,0.9c-0.7,0.6-1.1,1.4-1.2,2.3h6.9c-0.1-0.9-0.5-1.7-1.2-2.3\n\
          \t\tC210.8,34.4,210,34.1,209.2,34.1z\"/>\n\t<path class=\"st0\" d=\"M220.2,38.1c0-0.7,0.1-1.4,0.4-2.1c0.3-0.7,0.7-1.2,1.1-1.7c0.5-0.5,1-0.9,1.7-1.1c0.6-0.3,1.3-0.4,2.1-0.4\n\
          \t\tc0.7,0,1.4,0.1,2.1,0.4c0.6,0.3,1.2,0.7,1.7,1.1c0.5,0.5,0.9,1.1,1.1,1.7c0.3,0.7,0.4,1.4,0.4,2.1c0,0.8-0.1,1.5-0.4,2.1\n\
          \t\tc-0.3,0.7-0.7,1.2-1.1,1.7c-0.5,0.5-1,0.9-1.7,1.1c-0.6,0.3-1.3,0.4-2.1,0.4c-0.7,0-1.4-0.1-2.1-0.4c-0.6-0.3-1.2-0.7-1.7-1.1\n\
          \t\tc-0.5-0.5-0.9-1.1-1.1-1.7C220.4,39.6,220.2,38.9,220.2,38.1z M225.5,42.1c0.5,0,1-0.1,1.5-0.3c0.5-0.2,0.9-0.5,1.2-0.9\n\
          \t\tc0.3-0.4,0.6-0.8,0.8-1.3c0.2-0.5,0.3-1,0.3-1.6c0-0.6-0.1-1.1-0.3-1.6c-0.2-0.5-0.5-0.9-0.8-1.3c-0.3-0.4-0.7-0.6-1.2-0.8\n\
          \t\tc-0.5-0.2-1-0.3-1.5-0.3c-0.5,0-1,0.1-1.5,0.3c-0.5,0.2-0.9,0.5-1.2,0.8c-0.3,0.4-0.6,0.8-0.8,1.3c-0.2,0.5-0.3,1-0.3,1.6\n\
          \t\tc0,0.6,0.1,1.1,0.3,1.6c0.2,0.5,0.5,0.9,0.8,1.3c0.3,0.4,0.7,0.7,1.2,0.9C224.5,42,225,42.1,225.5,42.1z\"\
          />\n\t<path class=\"st0\" d=\"M233,43.3V32.9h1.5v1.2c0.4-0.5,0.9-0.8,1.4-1.1c0.6-0.2,1.2-0.4,1.8-0.4c1.2,0,2.1,0.4,2.9,1.1\n\
          \t\tc0.7,0.7,1.1,1.7,1.1,2.9v6.6h-1.5v-6.3c0-0.9-0.3-1.6-0.8-2.2c-0.5-0.5-1.2-0.8-2.1-0.8c-0.6,0-1.2,0.1-1.7,0.4\n\
          \t\tc-0.5,0.3-0.9,0.7-1.2,1.2v7.6H233z\"/>\n\t<path class=\"st0\" d=\"M247.5,43.3l6-14.5h1.9l5.9,14.5h-1.7l-1.8-4.6H251l-1.8,4.6H247.5z\
          \ M251.6,37.4h5.7l-2.8-7.1L251.6,37.4z\"/>\n\t<path class=\"st0\" d=\"M266,43.3h-1.6l-3.1-14.5h1.6l2.5,12l3.6-12h1.6l3.6,11.9l2.5-11.9h1.6L275,43.3h-1.6L269.7,31L266,43.3z\"\
          />\n\t<path class=\"st0\" d=\"M278.9,40.8l1.1-1.1c0.7,0.8,1.5,1.4,2.4,1.8c0.8,0.4,1.7,0.6,2.7,0.6c1.1,0,2.1-0.3,2.8-0.8\n\
          \t\tc0.7-0.5,1.1-1.2,1.1-2c0-0.7-0.3-1.3-0.8-1.7c-0.5-0.4-1.4-0.7-2.6-0.9l-2.1-0.3c-1.4-0.2-2.4-0.6-3.1-1.2c-0.7-0.6-1-1.4-1-2.4\n\
          \t\tc0-1.2,0.5-2.2,1.4-2.9c0.9-0.7,2.2-1.1,3.7-1.1c1,0,2,0.2,3,0.5c1,0.3,1.9,0.8,2.7,1.4l-0.9,1.2c-0.8-0.6-1.6-1-2.4-1.3\n\
          \t\tc-0.8-0.3-1.6-0.5-2.5-0.5c-1,0-1.9,0.2-2.5,0.7c-0.6,0.5-1,1.1-1,1.8c0,0.7,0.2,1.2,0.7,1.6c0.5,0.4,1.2,0.6,2.3,0.8l2.1,0.3\n\
          \t\tc1.6,0.3,2.7,0.7,3.4,1.3c0.7,0.6,1.1,1.5,1.1,2.6c0,0.6-0.1,1.2-0.4,1.7c-0.3,0.5-0.6,1-1.1,1.4c-0.5,0.4-1.1,0.7-1.8,0.9\n\
          \t\tc-0.7,0.2-1.4,0.3-2.2,0.3c-1.1,0-2.2-0.2-3.3-0.7C280.6,42.4,279.6,41.7,278.9,40.8z\"\
          />\n</g>\n</svg>\n"
      kind: ConfigMap
      metadata:
        creationTimestamp: null
        name: rosa-brand-logo
        namespace: openshift-config
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: rosa-oauth-templates
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/product
        operator: In
        values:
        - rosa
    resourceApplyMode: Sync
    patches:
    - apiVersion: config.openshift.io/v1
      applyMode: AlwaysApply
      kind: OAuth
      name: cluster
      patch: '{"spec":{"templates": {"login": {"name": "rosa-oauth-templates-login"},"providerSelection":
        {"name": "rosa-oauth-templates-providers"},"error": {"name": "rosa-oauth-templates-errors"}}}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: rosa-oauth-templates-errors
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/product
        operator: In
        values:
        - rosa
    resourceApplyMode: Sync
    applyBehavior: CreateOrUpdate
    resources:
    - apiVersion: v1
      data:
        errors.html: 
      kind: Secret
      metadata:
        creationTimestamp: null
        name: rosa-oauth-templates-errors
        namespace: openshift-config
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: rosa-oauth-templates-login
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/product
        operator: In
        values:
        - rosa
    resourceApplyMode: Sync
    applyBehavior: CreateOrUpdate
    resources:
    - apiVersion: v1
      data:
        login.html: PCFET0NUWVBFIGh0bWw+CjwhLS0gc2F2ZWQgZnJvbSB1cmw9KDAwNTkpaHR0cHM6Ly9vcGVuc2hpZnQuZ2l0aHViLmlvL29hdXRoLXRlbXBsYXRlcy9yb3NhL2xvZ2luLmh0bWwgLS0+CjxodG1sIGxhbmc9ImVuLXVzIiBkYXRhLXRlc3QtaWQ9ImxvZ2luIj48aGVhZD48bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD1VVEYtOCI+CiAgICA8dGl0bGU+TG9naW4gLSBSZWQgSGF0IE9wZW5TaGlmdCBTZXJ2aWNlIG9uIEFXUzwvdGl0bGU+CiAgICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBocmVmPSJkYXRhOmltYWdlL3gtaWNvbjtiYXNlNjQsQUFBQkFBUUFNREFBQUFFQUlBQ29KUUFBUmdBQUFDQWdBQUFCQUNBQXFCQUFBTzRsQUFBUUVBQUFBUUFnQUdnRUFBQ1dOZ0FBUUVBQUFBRUFJQUFvUWdBQS9qb0FBQ2dBQUFBd0FBQUFZQUFBQUFFQUlzakx5SGJaaThoMjUwdklkdklMeUhiNUM4aDIvWXZJZHYvTHlIYi9pOGgyL1F2SWR2akx5SGJ4eThoMjVrdklkdGdMeUhiSFFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF2SWRzRUx5SGJYUzhoMjhBdklkdm1MeUhiOFM4aDIvb3ZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIva3ZJZHZ4THlIYjV5OGgyN3N2SWR0YU1DRGNCUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQzhoMjJJdklkdldMeUhiOVM4aDIvNHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi8wdklkdjRMeUhiMUM4aDIxMHZJZHNDQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBdklkc3lMeUhid0M4aDIvb3ZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi9pOGgyLzh2SWR1K0x5SGJLQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUM4aDIyZ3ZJZHZxTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiOWk4aDIxc3ZJZHNFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXZJZDBKTHlIYmhTOGgyLzB2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR0OUx5SGJDQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFERWh5dzB2SWRpTEx5SGEveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvNHZJZHY5THlIYi9pOGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiakM4aDJ3Z0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUNjaTZnRW5JdW9QSnlMcURpY2k2Z1FBQUFBQU1pSExDRFFndllBMElMMy9NaUhIL3pBaDAvOHZJZG4vTHlIYS95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvWXZJZHZ2THlIYjZTOGgyOUF2SWR1OUx5SGJ2eThoMjlJdklkdm9MeUhiN3k4aDIvY3ZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyMzh2SWRzRkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDY2k2aFluSXVyR0p5THF2Q2NpNmwwbUl1NGVNU0RFWWpRZ3UvdzBJTG4vTkNDNS96UWd1Zjh6SUwvL01TSEwvekFoMWY4dklkbi9MeUhhL3k4aDIvOHZJZHZ2THlIYnppOGgyM2d2SWRzd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTHlIYk15OGgyMzB2SWR2Skx5SGI4aThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdGNBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUp5SHFBeWNpNm5vbkl1ci9KeUxxL3ljaTZ2OG5JdWo1TENIWjZ6RWd4djh6SUwvK05DQzgvelFndXY4MElMbi9OQ0M0L3pRZ3V2OHpJY1AvTVNIUjl5OGgyc2d2SWR0WEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFMeUhiV0M4aDI4UXZJZHY0THlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHY0THlIYktRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFKeUxxSUNjaTZ2WW5JdXIvSnlMcS95Y2k2djhuSXVyL0p5THMveWNpN1A0cEl1TCtMeUhQNWpRZ3ZjMDBJTHJoTkNDNit6UWd1djgwSUxud015Qy9peklmdXdvQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDOGgydzh2SWR1SEx5SGI2eThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGJ2eThoMndRQUFBQUFBQUFBQUFBQUFBQUFBQUFBSnlMcWpDY2k2djhuSXVyL0p5THEveWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXYySlNMd2N5c2g0aEEwSUwxR05DQzhsRFFndThZeklMMW1BQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFMeUhiWlM4aDIrUXZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIxMEFBQUFBQUFBQUFBQUFBQUFuSXVvUkp5THE3eWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcS95Y2k2djhuSXVxZkp5THBEZ0FBQUFBQUFBQUFBQUFBQUM0ajBRa0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDOGgyMlV2SWR2c0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyOWN2SWRzRkFBQUFBQUFBQUFBbkl1cGJKeUxxL3ljaTZ2OG5JdXIvSnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnRVbkl1bzNBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBdklkdUlMeUhiK0M4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi9zdklkdFhBQUFBQUFBQUFBQW5JdXE0SnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnY4bkl1ci9KeUxxL0NjaTZvd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXZJZHNRTHlIYndpOGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvMHZJZHU4QUFBQUFBQUFBQUFuSXVwZ0p5THFweWNpNnVVbkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcTJTY2k2a0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUx5SGJXUzhoMi9Bdklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2c0x5SGJHd0FBQUFBQUFBQUFKeUxxR0NjaTZrUW5JdXAxSnlMcXR5Y2k2dlluSXVyL0p5THJ0UmduL3dFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFNQnZLQVM4aDNNc3ZJZHovTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdjBMeUhiWUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUp5THFJaWNpNjBjb0l1YVFLaUhmbEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFEQWgwb1l2SWRmM0x5SGQveThoM1A4dklkdi9MeUhiL3k4aDIvOHZJZHY2THlIYm1nQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXlJTWxDTXlERzd6UWd3N0UwSU1Oc05DRERHd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBSnlMcUFRQUFBQUFBQUFBQUFBQUFBRE1odjBzeklNRHdNeURGL3pFaHovOHZJZG4vTHlIZC95OGgzUDh2SWR2L0x5SGJ4Z0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUExSU1GaU5DREQvelFneFA4MElNUHZOQ0REMkRRZ3c2ZzBJTU5VTkNIREJ3QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ2NpNmo0bkl1cERBQUFBQUR3Zm5SRTBJTGpwTkNDNi96UWd2Zjh6SUwvL01pREcvekVoMFA4dklkdi9MeUhkM1FBQUFBQUFBQUFBQUFBQUFDOGgyd3d2SWR1WEx5SGNZRFFoeFJzNklheC9PU0d4L3pjaHVmODBJTUQvTkNERS96UWd4UHcwSU1Qdk5DRER5alFnd3k0QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUNjaTZuQW5JdXJkSnlMcTFTWWk3WVF4SU1Qck5TQzQvelFndVA4MElMbi9OQ0M3L3pRZ3ZmOHpJTC8vTWlERzVERWd6QlFBQUFBQUFBQUFBQzhoMnhBdklkdmZMeUhiOVM4aDJ1WXlJYzNsTnlHMy9Eb2hyZjA2SWEzL09TR3ovellndlA4MElNUC9OQ0RFM0RRZ3hEQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDY2k2bnduSXVyMUp5THEveWNpNnZZb0l1ZjlLaUxmK3k4aHova3pJTDc3TkNDNS96UWd1djgwSUxyL05DQzc1aklod1NNQUFBQUFBQUFBQUM4aDJ4QXZJZHZnTHlIYi95OGgyLzh2SWRyL0x5SGEvakVoMVBzMEljVDRPU0cwL1RvaHJmODZJYkQvT0NHMTBEWWh1aXNBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ2NpNnBJbkl1cjdKeUxxL3ljaTZ2OG5JdXIvSnlMcS95Y2k2ZjhvSXVqL0xpSFFoRFFndmJBMElMei9OQ0M2N1RRZ3ZTWUFBQUFBQUFBQUFDOGgydzh2SWR2VEx5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIWnVEVWh2MTA2SWE2bE9TR3Z5RGtocnpBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUNjaTZyTW5JdXIvSnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnY4bkl1ci9KeVBvSmpvZnJBTXlJTVVYTXlEQld6UWd2QllBQUFBQUFBQUFBQzhoMnd3dklkdThMeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGJ5aThoMnpNQUFBQUFOeUc4QmpjaHV3SUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBSnlMcUlTY2k2c3NuSXVyL0p5THEveWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXI1SXlidUFRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUM4aDJ3a3ZJZHVZTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiNmk4aDIxSUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUp5THFZQ2NpNnVnbkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcS95Y2k2djhuSXVySEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDOGgyd1V2SWR0b0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyM3dBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFKeUxxcVNjaTZ2OG5JdXIvSnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnY4bkl1cUJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBdklkc3dMeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMjd3dklkc25BQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQW5JdW9sSnlMcXNDY2k2dThuSXVyNEp5THEveWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdW94QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXZJZHNVTHlIYjJDOGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvNHZJZHRqQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ2NpNmpFbkl1cU5KeUxxMHljaTZ1c25JdXI4SnlMcS95Y2k2dFFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF2SWRzS0x5SGJnaThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2Q0x5SGJLd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBSnlMcUF5Y2k2a3duSXV1Z0tDTG43U2tpNUhVQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFMeUhiTWk4aDIvMHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhia0M4aDJ3NEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFNaUhKc0RNZ3haNDBJTU5RTkNEREt6UWd3dzBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTHlIYkVDOGgyNkV2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyM292SWRzSkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUx5SGJFUzhoMnlvdklkc1JBQUFBQUFBQUFBQTNJYmhtTlNEQSt6UWd3LzgwSU1UL05DREQwalFndzRrMElNTkxOQ0RESmpRZ3d3Y0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQzhoMno0dklkdjFMeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi9rdklkdCtMeUhiRVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBdklkc1RMeUhiaHk4aDI4WXZJZHVZTGlIZFZ6UWh3MW82SWJEc09DR3ovemNndWY4MUlMMy9OU0RCL3pRZ3hQODBJTVQrTkNERHZqUWd3MjRBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUM4aDJ3d3ZJZHVLTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYm5pOGgyemdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUM4aDJ6VXZJZHVpTHlIYitTOGgyLzh2SWR2L0x5SGMrVEVoMGZRMEljWDhOeUc3K3praHN2czZJYkQvT0NDMC96Y2d1ZjgySUw3L05TREIvelFndzU4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF2SWRzbEx5SGJ4aThoMi84dklkditMeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMjg4dklkdCtMeUhiTndBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXZJZHN6THlIYmZDOGgyOUl2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDNQOHVJZDcvTUNIWSt6SWh6LzgySWNMVU9pR3V0VG9ocnV3NUliSC9PQ0MyMnpJZ3h4c0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFMeUhiU0M4aDIrTXZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYnppOGgyNTR2SWR0dUx5SGJTaThoMnpFdklkc2pMeUhiSkM4aDJ6QXZJZHRJTHlIYmJTOGgyNW92SWR2Tkx5SGIvQzhoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGMveThoM2ZJdUllRkZPQ0cxSVRraHNVODZJYkYvT2lHdVhnQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTGlIYkF5OGgyMk12SWR2dkx5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdnpMeUhiM1M4aDI4NHZJZHZGTHlIYnhTOGgyODB2SWR2Ykx5SGI4eThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL1M4aDIxNEFBQUFBQUFBQUFBQUFBQUFBRnY4Qk1DSEtCQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQzhoMndZdklkdHNMeUhiN3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHY4THlIYll5OGgyd01BQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXVJZHNGTHlIYlhDOGgyK012SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyK3N2SWR0Vkx5SGJCUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUxpSGJBeThoMnpvdklkdkNMeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGJ3QzhoMnpndklkd0NBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXZJZHNVTHlIYmVpOGgyL012SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi9RdklkdDNMeUhiR3dBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUx5SGJCUzhoMnlRdklkdU9MeUhiOWk4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdnpMeUhia1M4aDJ5Z3ZJZHNGQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXZJZHNFTHlIYUZpOGgyMmt2SWR2Q0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhieUM4aDIyY3ZJZHNhTHlIYkF3QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQzhoMndFdklkc0NMeUhiRHk4aDIwWXZJZHQyTHlIYm15OGgyN1V2SWR2QUx5SGJ4QzhoMjdjdklkdWZMeUhiZVM4aDIwY3ZJZHNVQUFBQUFDOGgydy8vLy8vLzhBQVAvLy8vLy8vd0FBLy8vd0EvLy9BQUQvLzRBQWYvOEFBUC8rQUFBZi93QUEvL2dBQUFmL0FBRC84QUFBQS84QUFQL0FBQUFCL3dBQS80QUFBQUIvQUFEL0FBQUFBSDhBQU9jQUQvd0FQd0FBNEFBLy93QWZBQURBQUgvL2dBOEFBSUE1Ly8vZ0R3QUFnRC8vLy9BSEFBQ0FmLy8vOEFjQUFBQi8vLy80QXdBQWdQLy8vL3dEQUFEdy8vLy8vQU1BQVB6Ly8vLzhBUUFBL24vLy8vNEJBQUQrRC8vLy9nRUFBTzRELy8vd0FRQUE0QVAvLy9BQkFBRGdBLy8vNEFFQUFPQVQvLy9nSHdBQTRCLy8vK0FmQUFEZ0gvLy80QjhBQVBBZi8vL0FId0FBOEEvLy84QS9BQUR3RC8vLzhEOEFBUEFILy8vK2Z3QUErQVAvLy84L0FBRDRBLy8vL3djQUFQd0IvLy9HQVFBQS9BQi8vNEFBQUFEK0FELy9BQUVBQVA4QUIvZ0FQd0FBLzRBQUFBQi9BQUQvd0FBQUFQOEFBUC9nQUFBQi93QUEvL0FBQUFQL0FBRC8vQUFBRC84QUFQLytBQUFmL3dBQS8vL0FBUC8vQUFELy8vd1AvLzhBQVAvLy8vLy8vd0FBLy8vLy8vLy9BQUFvQUFBQUlBQUFBRUFBQUFBQkdklkc0JNQ0xaQkM4aDIxTXZJZHU4THlIYi9pOGgyLzh2SWR2L0x5SGIveThoMi84dklkdlVMeUhiZEM4aDNBNHZJZHNDQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTHlIYkpTOGgyN1F2SWR2MUx5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMjg0dklkdGJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUx5SGJCUzhoMjRBdklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2SEx5SGJHUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUM4aDR3UXZJZHZjTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHY2THlIYlFnQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF5SWNvUE1TSFA0eThoMmY4dklkei9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi9jdklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi80dklkdi9MeUhiU2dBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ2NpNnJ3bkl1cFpBQUFBQURNZ3ZlUTBJTHIvTkNDNi96SWh4Zjh3SWRmL0x5SGIveThoMi84dklkdjhMeUhicUM4aDJ6SUFBQUFBQUFBQUFBQUFBQUF2SWRzWkx5SGJmaThoMi9Jdklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGJLUUFBQUFBQUFBQUFBQUFBQUFBQUFBQW5JdXFQSnlMcS95Y2k2djhuSXVqN0t5SGIvekFoeS9vMElMei9OQ0M1L3pRZ3VmOHpJTC8vTUNIVWpDOGgyeGdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTHlIYkF5OGgyMVl2SWR2NEx5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHZpTHlIYkNBQUFBQUFBQUFBQUp5THFGeWNpNnZRbkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcjl5VWk4eGMwSUx4dk5DQzczak1ndjFVQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUM4aDJ3Y3ZJZHZlTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdHlBQUFBQUFBQUFBQW5JdXBaSnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnZ3bkl1bzdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQzhoM0JFdklkdjVMeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWRzTkFBQUFBQ2NpNnNRbkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcXp3QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDOGgyeTh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIzc0FBQUFBSnlMcUZpY2k2cU1uSXVyL0p5THEveWNpNnY4bkl1bzhBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUM4aDI2OHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGJ3aThoMndFQUFBQUFBQUFBQUNjaTZna25JdXBKS1NMa3ZBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU1DSFRWaThoMlA4dklkMy9MeUhiL3k4aDIvOHZJZHZzTHlIYkF3QUFBQUFBQUFBQUFBQUFBQUFBQUFBMUlNS1hOQ0REL3pRZ3c1MDBJTU1tTkNERENnQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFKeUxxQmljaTZnazJJYlViTkNDNS96TWh3Lzh3SWRQL0x5SFoveThoMi84dklkMEhBQUFBQUFBQUFBQXZJZHVRTHlIYkdqb2hyYmM0SWJmL05DREMvelFneFA4MElNUG5OQ0REWVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFuSXVvOEp5THE0aVlpN3BReklMNy9OU0M0L3pRZ3VmODBJTHovTXlEQy96SWd5UzRBQUFBQUFBQUFBQzhoMi9Zdklkdi9NU0hSL0RZaHZ2czVJYkw4T1NHei96WWd2UDgxSU1CZ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUNjaTZrY25JdXIrSnlMcS95WWk3ZjhxSXVEN0x5SE05RFFndStBMElMci9NeUc5UkFBQUFBQUFBQUFBTHlIYjZDOGgyLzh2SWR2L0x5SGIveThoMi84ekljdGVPaUd2dmpraHIyWUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUp5THFaaWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXJVTFNMV0JETWd3eTAwSUwwaEFBQUFBQUFBQUFBdklkdkxMeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgzSElBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQW5JdXF5SnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDOGgyNW92SWR2L0x5SGIveThoMi84dklkdi9MeUhieGdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUp5THFDaWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcVdRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFMeUhiWEM4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2MUx5SGJFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQW5JdW9PSnlMcVh5Y2k2dDRuSXVyL0p5THEveWNpNnY4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF2SWRzYkx5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHVyQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUNjaTZpMG5JdXFkS2lMaWx3QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXZJZHV0THlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdDRBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRFFneEVnMElNUC9OQ0RENHpRZ3cxY0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQzhoMncwdklkdjJMeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR0NEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBdklkczZMeUhiMWk4aDI2WXlJYzF2T2lHdi96Z2h0UDgySUx6L05DREQvelFneFBVMElNT29BQUFBQUFBQUFBQUFBQUFBQUFBQUFDOGgyNEF2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHUvTHlIYkV5OGgyZ0lBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXZJZHNKTHlIYmNpOGgyLzh2SWR2L0x5SGIveThoMi84dklkejlOQ0hHK1RvaHNQSTZJYTM1T0NHMy96UWd3V0VBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUM4aDI3SXZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdjdMeUhiMGk4aDI0Y3ZJZHRNTHlIYk1TOGgyejR2SWR0dEx5SGJ1eThoMit3dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR6Nkx5SGVGemtoc1NNNUliTldUaU5uQVFBQUFBQUFBQUFBQUFBQUFBQUFBQUF3SWRzQkh5RGZBUzhoMjhndklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiOVM4aDJ5MEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDOGgyNnN2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyKzR2SWR3VUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUM4aDIyVXZJZHZ2THlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdWFMeUhiRGdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBdklkdU5MeUhiOUM4aDIvd3ZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvY3ZJZHZGTHlIYkh3QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF2SWRzTEx5SGJNeThoMjJndklkdWZMeUhid3k4aDI5RXZJZHZNTHlIYnNDOGgyMzh2SWR0Q0x5SGJHZ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFQLy8vLy8vLy8vLy8vZ1AvLy9BQWYvL0FBQi8vZ0FBUC93QUFCL1lBL0FQZ0EvOEI0Ry8vZ2VELy84REEvLy9nNGYvLzRIMy8vL0I4Zi8vd2RCLy93SEFmLzhCd1gvL0I4SC8vZ2ZBLy80UDRQLy9EK0IvLzgvZ2YvL244RC8rUVBBUC9BSDRBZUFQL0FBQUgvNEFBRC8vZ0FCLy84QUIvLy84SC8vLy8vLy9LQUFBQUJBQUFBQWdBQUFBQVFBZ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF2SWRzSEx5SGJUaThoMjlNdklkdi9MeUhiL3k4aDIvOHZJZHVzTHlIYkt5OGgyd0lBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXVJZDhsTHlIYjNDOGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHUyTHlIYkJTOGgyd0VBQUFBQUp5THFCQ2NpNmlJeUlNQXdNaUhOL3pBaDEvOHZJZHIvTHlIYjZ5OGgyOUF2SWR2QUx5SGIyUzhoMi9jdklkdi9MeUhiL3k4aDI3OEFBQUFBQUFBQUFDY2k2ajhuSXVyNEtDTG04eThoeitBMElMdjZNaURHa2k0aDRSSUFBQUFBQUFBQUFDOGgyd0l2SWRzZ0x5SGIwUzhoMi84dklkdi9MeUhibkFBQUFBQW5JdXE4SnlMcS95Y2k2dllYSmY4R0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDOGgyd1l2SWR2c0x5SGIveThoMi9Bdklkc1JKeUxxUGljaTZ0RW5JdXVvQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTHlIYk1pOGgzUDh2SWR2L0x5SGJTZ0FBQUFBQUFBQUFOU0crblRNZ3hYTXpJTVVsQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFKeUxxRFNvaTREc3pJY1R0TVNIUS96QWgxcFF2SWRzVUx5SGI2ak1oeS9rNUliVC9OeUc2b3dBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ2NpNmk0bkl1ci9LU0xrL2pFaHgrTTBJTHV6THlIYkRTOGgyKzR2SWR6L0xpSGV6VVVoZnc0QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFuSXVwcUp5THEveWNpNnY4bEl2RklOQi9GQkFBQUFBQXZJZHZhTHlIYi95OGgyLzh2SWRzWkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBSnlMcVhTY2k2dlFuSXVyL0FBQUFBQUFBQUFBQUFBQUFMeUhiVVM4aDIvOHZJZHYvTHlIYnBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQURnZ3l3VUFBQUFBTWlES3VEUWd4SFV6SU1VWkFBQUFBQUFBQUFBdklkdk1MeUhiL3k4aDIvOHZJZHUxTHlIYkR5OGgyd1F2SWRzQ0x5SGJCUzhoMng0dklkdm5MeUhhL2pZaHdQdzRJYlQxTlNEQTRRQUFBQUFBQUFBQUx5SGJJQzhoMi93dklkdi9MeUhiL3k4aDIvRXZJZHZITHlIYnZDOGgyOUV2SWR2L0x5SGIveThoMi84dklkMnNPQ0c1Q2p3aHBoSUFBQUFBQUFBQUFBQUFBQUF2SWRzT0x5SGIyQzhoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyL292SWR1d0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDOGgyd2d2SWRzK0x5SGJuUzhoMjlndklkdm5MeUhieWk4aDI0RXZJZHNxQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUQ4SHdBQThBY0FBT0FEQUFDRDRRQUFIL0VBQUovNUFBRGYrQUFBaC9BQUFJL3pBQUNQOHdBQXgvc0FBTVBnQUFEZ0F3QUE4QWNBQVB3ZkFBRC8vd0FBS0FBQUFFQUFBQUNBQUFBQUFRQWdzcEx5SGJlQzhoMjdndklkdmNMeUhiN1M4aDIvZ3ZJZHYrTHlIYi95OGgyL3d2SWR2ekx5SGI1aThoMjlVdklkdWVMeUhiVlNjUzR3TUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXZJZHNOTHlIYlJDOGgyNWd2SWR2MEx5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYjBDOGgyM012SWRzdkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXZJZHVLTHlIYjlDOGgyLzB2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIreThoMitNdklOdExBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFNQ0hiQ3k4aDI0TXZJZHYwTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDI5SXZJZHRhQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFNQ0hiUUM4aDIvZ3ZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyOUF2SHR3TkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBdklkc0JMeUhicmk4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIrUzhoMjNjQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBdklkc2pMeUhiN1M4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiclM4ZzJ3Z0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBdklkMUtMeUhiOXk4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHZjTHlIYkVBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBdUlkMUFMeUhiL2k4aDIvNHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyOXN2SWRzUkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBeklNVlVOQ0MrL3pFaDBmOHZJZDMvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGI2aThoMnhBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQW5JdW8zSnlMcU53QUFBQUFBQUFBQUFBQUFBQUFBQUFBd0lkQWVOQ0M4OHpRZ3V2ODBJTGovTkNDOC96SWd5UDh3SWRQL0x5SGMveThoM1A4dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdmFMeUhickM4aDI0WXZJZHRwTHlIYlZTOGgyMVF2SWR0ZEx5SGJkQzhoMjVJdklkdTlMeUhiOEM4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdkNBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQW5JdW9CSnlMcTVDY2k2djhuSXVyckp5THFhaWNpNmdjd0l0NExNeUM5K1RRZ3V2ODBJTHIvTkNDNi96UWd1djgwSUxyL05DQzYvelFndXY4eUljei9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMjUwdkl0c1NBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXZJZHM1THlIYjBpOGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDI3RUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBSnlMcW9pY2k2djhuSXVyL0p5THEveWNpNnY4bkl1cjJLU0xqMkRBaHlmczBJTG44TkNDNC96UWd1djgwSUxyL05DQzYvelFndXY4MElMci9OQ0M1L3pRZ3UvOHpJTUwvTVNITy96QWgyZjh2SWR2Mkx5SGJjekFoMnhFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF2SWRzc0x5SGJvaThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTGlIYVJRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBSnlMcU1DY2k2djhuSXVyL0p5THEveWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXYvSnlMcitpMGgxZmt6SU1EN05DQzgvelFndXY4MElMci9OQ0M2L3pRZ3V2ODBJTHIvTkNDNi96UWd1Zjh5SU1qTktTTHpDd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBdklkczdMeUhiN1M4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh0SWRjRkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDY2k2cVFuSXVyL0p5THEveWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcS95Y2k2djhuSXV2L0p5THEveW9pNGJzeklNQjdOQ0M4NlRRZ3V2ODBJTHIvTkNDNi96UWd1djh5SU1KMEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUM4aDNBb3ZJZHV5THlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGJwakVoMndFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDZ2k2ZzhuSXVyL0p5THEveWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnRNQUFBQUFBQUFBQUFBQUFBQXpJTU5DTkNDOXJ6UWd1K0V6SUw5ZEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDOGgyNVl2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi93dklkc1hBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFuSXVxdkp5THEveWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnZjbkl1b2VBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF5SU1FS0xDZktBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUx5SGJqaThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhieEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFuSStrUkp5THE4aWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnY4bkl1cG9BQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUx5SGJBUUFBQUFBdklkdkNMeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHN0QUFBQUFBQUFBQUFBQUFBQUp5THFPU2NpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnY4bkl1ckhBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFNaVRiQ0M4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYmpRQUFBQUFBQUFBQUFBQUFBQ2NpNm80bkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnY4bkl1ci9KeUxxVVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXZJZHROTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyK01BQUFBQUFBQUFBQUFBQUFBbkl1cVlKeUxxOFNjaTZ2NG5JdXIvSnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnY4bkl1ci9KeUxxK2ljaTZnRUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTHlIYkJDOGgyOXN2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L01DSGJNQUFBQUFBQUFBQUFBQUFBQUNnaTZ4UW5JdXBGSnlMcXN5Y2k2djhuSXVyL0p5THEveWNpNnY4bkl1ci9KeUxxL3ljaTZvY0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF1SWR0UUx5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMjZRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFuSStvTUp5THFnU2NpNnRRbkl1cjdKeUxxL3ljaTZ2OG9JdW9VQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQzhoMitrdklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdjFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBbEl1d0ZKeVBxR3ljaTZvQW1JdXZVQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBdklkdC9MeUhjL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiK1M4aDJ4MEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTlNEQjN6UWd3N0kwSU1OV05DRERGd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFOU0M1U3pNaHYvOHlJY3ovTUNIVi95OGgzUDh2SWR6L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvd3ZJZHM1QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTWlEQkNqUWd3LzgwSU1QL05DREQvelFndy8wMEg4TzZNeURES2dBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQURRZ3VpczBJTHI3TkNDNi96UWd1djgwSUx6L01TSE0veThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYlRnQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFEY2d1MVExSU1IL05DREUvelFndy84MElNUC9OQ0REL3pRZ3cvODBJTVBhTkNERGtqUWZ3emNBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ2NoNmxrbkl1cUlKeUxzS2dBQUFBQTNJTFFOTkNDNitUUWd1djgwSUxyL05DQzYvelFndWY4MElMci9NeUREL3pFaHpmOHdJZGovTHlIZC95OGgzR3dBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUM4aDI3QXZJZHRSTHlIY0N3QUFBQUE1SWJLTk9pR3Mvemdocy84MUlMLy9OQ0RDL3pRZ3cvODBJTVAvTkNERC96UWd3LzgwSU1QL05DREQwZ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBbkl1dHFKeUxxL3ljaTZ2OG5JdXJXSlNMd1NETWd2ZlEwSUxyL05DQzYvelFndXY4MElMci9OQ0M2L3pRZ3V2ODBJTHIvTkNDNC96TWd3djh4SWMrTEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXZJZHZnTHlIYi95OGgyKzR2SWR5NE5pSEEyRG9ocS80Nklhei9PaUd0L3praHNQODRJYlgvTlNDLy96UWd4UDgwSU1QL05DREQvelFndzdzQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFKeUxxZENjaTZ2OG5JdXIvSnlMcS95Y2k2djhvSXVmN0tpTGQrREFoeXZrMUlMajlOQ0M1L3pRZ3V2ODBJTHIvTkNDNi96UWd1djgwSUxyL05DQzhxd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTHlIYjRTOGgyLzh2SWR2L0x5SGIveThoM1A4dklkcjVOQ0hGOHpnaHRQMDZJYTc4T2lHcy96b2hyUDg1SWJIL05pQzcvelVnd2Y4MElNT2dBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUNjaTZwTW5JdXIvSnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnY4bkl1ei9KeUxxOWkwaDFQY3lJTUh6TkNDNytUUWd1djgwSUxyL05DQzYvek1ndkswQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDOGgyOTR2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHIrTUNIVy9EUWh4dlU1SWEvOU9pR3Qvem9ocmY4NklhNy9PU0d5b2dBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQW5JdXJHSnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcG9qa2dyaE15SU1PQk5DQzkralFndXY4MElMcXVBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF2SWR2VEx5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR6L0xpSGZoRGtoc1V3NUlhK3hPaUd1NmpraHNLOEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBSnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcS95Y2o2bllBQUFBQUFBQUFBQUFBQUFBeUlNZE1OQ0MvYXdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUx5SGJ3eThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMjdRQUFBQUFOaUM4QVRraHNBUTRJYmdYQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBSnlMcUxTY2k2djhuSXVyL0p5THEveWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcS95Y2k2djhuSXVvK0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQzhoMjZvdklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdlZNQ0RiQkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDY2k2bkluSXVyL0p5THEveWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcS95Y2k2djhuSXVyNkp5THFIZ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBdklkdUxMeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiN1M4aDJ4RUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFuSXVyQkp5THEveWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcS95Y2k2djhuSXVyL0p5THE2Q2NpNmc4QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFMeUhiVnk4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJTnMyQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFuSXVvZUp5THEveWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnMwQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUM4aDJ4d3ZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYnZ3QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUp5THF2eWNpNnY4bkl1ci9KeUxxL3ljaTZ2OG5JdXIvSnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnY4bkl1cHRBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTHlIYjR5OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh4SWRzcEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQ2NpNmhRbkl1cElKeUxxd0NjaTZ2OG5JdXIvSnlMcS95Y2k2djhuSXVyL0p5THEveWNpNnY4bkl1ci9BQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDOGgyMjh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGJxd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQW5JdW9kSnlMcWlTY2k2dEVuSXVyL0p5THEveWNpNnY4bkl1ci9KeUxxb3dBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF2SWRzVUx5SGIrUzhoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84d0l0c2VBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFuSXVvRUppSHBHQ2NpNnBRbkl1ci9KeUxxL1NjaTZqd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU1DSGJBeThoMjh3dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiNmk0aDJ3b0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFNeUxLR2pBZ3ovQXpJTVpnT0NERENnQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBdklkdGFMeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHVuQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQURRZ3c1bzBJTVAvTkNERC96UWd3LzgwSU1Pb05DRERIalVneEFRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUM4aDI5MHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyNTRBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDMGgyeEl2SWRzYkFBQUFBQUFBQUFBQUFBQUFBQUFBQURnaHRsNDBJTVAvTkNERS96UWd3LzgwSU1QL05DREQvelFndy84MElNUFhOQ0REa2pRZ3d5a0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXZJZHBCTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGJoeXNoMlFJQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDOGgyeEF2SWR2Wkx5SGIveThoMjhjdklkeEZMeUhkRVRraHJ6azZJYTMvT2lHcy96Z2h0ZjgxSUwvL05DREMvelFndy84MElNUC9OQ0REL3pRZ3cvODBJTVAvTkNERDJUVWd3MDBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBS1JiWEFTOGgyOWN2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdklMeHJZQkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFDOGgyemt2SWR2ckx5SGIveThoMi84dklkdi9MeUhiL3k4aDIrb3hJZERyTnlHMzh6c2hxdjg2SWF6L09pR3Qvem9oci84NEliUC9OaUMrL3pRZ3hQODBJTVAvTkNERC96UWd3LzgwSU1Pa0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF2SWRzY0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvY3ZJZHRPQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTHlEYURqQWgyNEF2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgzZjh3SWRqM05DSEQ4RGdodHZzNklhNzZPaUd0L3pvaHJQODZJYS8vTnlHNC96VWd2LzgwSU1MNFl5Q2ZBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQzhoMjJndklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi9pOGgyK2d2SWRzOEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTHlIYmNTOGgyL2t2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkcitNQ0hZOFRZaHVaczVJYkgvT2lHdC96b2hyZjg2SWEzL09TR3hiUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFMeUhidEM4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMjlrdklkdURMeUhiUVM4aDJ4TUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFMaUhhSHk4aDIxQXZJZHVYTHlIYjd5OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIyRUFBQUFBQUFBQUFEWWh1VkU0SWJTbk9TR3d5VGdldEFjQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXZJZHZTTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYitDOGgyOHN2SWR1b0x5SGJweThoMjdJdklkdlNMeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIzd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTHlEYkZ5OGgyK292SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDI2RUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF3SU5nSkx5SGI0aThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDI2VUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQzRoMnc4dklkdktMeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDNINHZNOVVCQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBeUlkb0JBQUFBQUM4aDI2NHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiOWk4aDIyd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQTNGTjRCTHlIYlRDOGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiNUM0ZjNCMEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUF2STlzU0x5SGJxUzhoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdjFMeUhiZmdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBd0lkb1pMeUhiMVM4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdWdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXZJZG8xTHlIYmtTOGgyL1F2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIxaThoMjNFdklkc2RBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUxpSGJTeThoMjdzdklkdnNMeUhiOVM4aDIvNHZJZHYvTHlIYi95OGgyLzh2SWR2L0x5SGIveThoMi84dklkdi9MeUhiL3k4aDIvOHZJZHY4THlIYjh5OGgyK2N2SWR1akx5SFpLUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFMeUhiQ0M4aDJ5QXZJZHMwTHlIYlVpOGgyM2N2SWR1U0x5SGJuUzhoMjZVdklkdWZMeUhiamk4aDIzRXZJZHRLTHlIYk1DOGgyeG92SWRzvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vOEFILy8vLy8vLzhBQUQvLy8vLy8rQUFBQi8vLy8vL2dBQUFCLy8vLy84QUFBQUIvLy8vL0FBQUFBRC8vLy80QUFBQUFELy8vL0FBQUFBQUgvLy80QUFBQUFBUC8vL0FBQUFBQUFmLy80QUFCOEFBQS8vSEFBQi8vQUFCLzRBQUEvLy9BQUgvZ0FBSC8vL0FBUDhBQkIvLy8rQUFmd0FQUC8vLzhBQitBQi8vLy8vNEFENEFQLy8vLy93QVBnQS8vLy8vL2dBY0FILy8vLy8vQUJ3QWYvLy8vLzhBSDRCLy8vLy8vNEFQNFAvLy8vLy9nQS84Ly8vLy8vL0FELzUvLy8vLy84QVAvZy8vLy8vL3dBLytBZi8vLy8zQUQ5d0FmLy8vL0VBSHdBQi8vLy84QUFmQUFILy8vL2dBQjhBQWYvLy8rQUNId0FSLy8vLzRBZi9BQi8vLy8vZ0IvOEFILy8vLytBSC93QWYvLy8vd0FmL2dCLy8vLy9BQi8rQUQvLy8vNEFQLzRBUC8vLy80QS8vd0FmLy8vLzRELy9BQi8vLy8vOGYvOEFELy8vLy85Ly80QUgvLy8vL2cvL2dBUC8vLy8rQWYvQUFmLy8veHdBZjhBQS8vLytBQUEvNEFCLy8vZ0FBSC93QUIvLzhBQUEvL0FBQS8rQUFEei8rQUFBQUFBQWYvLzhBQUFBQUFCLy8vNEFBQUFBQVAvLy93QUFBQUFELy8vL2dBQUFBQWYvLy8vZ0FBQUFELy8vLy9BQUFBQS8vLy8vL0FBQUFILy8vLy8vQUFBRC8vLy8vLy9nQUEvLy8vLy8vLytELy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vdz09Ij4KCiAgICA8c3R5bGU+CiAgICAgIEBmb250LWZhY2V7Zm9udC1mYW1pbHk6J1JlZEhhdFRleHQnO3NyYzp1cmwoZGF0YTphcHBsaWNhdGlvbi94LWZvbnQtd29mZjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxkMDlHUmdBQkFBQUFBSTBoQUJJQUFBQUJKVXdBQVFBQUFBQ0xpQUFBQVprQUFBUmpBQUFBQUFBQUFBQkNRVk5GQUFBQmxBQUFBRG9BQUFBNml5V1VzVVJUU1VjQUFJdUFBQUFBQ0FBQUFBZ0FBQUFCUjFCUFV3QUFBZEFBQUEwRUFBQWlLZzBaaEJ0SFUxVkNBQUFPMUFBQUF1Y0FBQVlvY0FOdjhFOVRMeklBQUJHOEFBQUFXQUFBQUdCbUI0RFJZMjFoY0FBQUVoUUFBQVB2QUFBRnRHOU0vVmRqZG5RZ0FBQ0RtQUFBQUUwQUFBQjRMSWYrK1dad1oyMEFBSVBvQUFBRzhnQUFEaFdlTmhQT1oyRnpjQUFBZzVBQUFBQUlBQUFBQ0FBQUFCQm5iSGxtQUFBV0JBQUFYY2dBQU1oUzdjazBzR2hsWVdRQUFIUE1BQUFBTmdBQUFEWVVxNDdYYUdobFlRQUFkQVFBQUFBaEFBQUFKQWZqQkhWb2JYUjRBQUIwS0FBQUF5SUFBQWFhY0F4UUZteHZZMkVBQUhkTUFBQURVQUFBQTFETHV2eEpiV0Y0Y0FBQWVwd0FBQUFnQUFBQUlBTDdEekJ1WVcxbEFBQjZ2QUFBQXc4QUFBbFJLS2pKVjNCdmMzUUFBSDNNQUFBRndRQUFDZ24wcHAvWWNISmxjQUFBaXR3QUFBQ2lBQUFBdmVHMlhpTUFBUUFBQUFnQUFBQUVBQTRBQW1sa1pXOXliMjF1QUFKRVJreFVBQTVzWVhSdUFBNEFCZ0FBQUFBQUFRQUNBQWdBREFBQi8ySUFBUUFBQUFCNDJyV1pEWEJVMVJYSHo5M05RdGhBUW9Ba0pGQU04aFVnaEU4UkpkaDJhcDFwdGFNaVdtdHI4YU9kT2lXaVlMRXpkY1pPclJWYXA0cjRFVUdzMUE4RVFmbUlRRUJBUmFwQWxVR3M4a0lJSkRWcDJFMG9Ca05NamNudDc5NTl1OW5kTExDazlaMzV2L2R5UDg0OTk5eHovL2U4alNnUjhjc2RzbEU4bDE5eDFTeEpMN24xVjNNbFQxSW9GNjNGMUErV2xHL2Y5TjE4R2Y2ZG1iUHlwWERtMVQvSWx5bXpabDZaTDhWdUcrVStQZTdUNno1VDNLZFBlc3o1K2Z5NU10TGVDKzE5a3IxUHMvZkw3UDF5eGpMam5mMXV0RElPOFB1V2l4clV6OXFhTFZObGxzeVh4YkxaaytwSjk2N3dydlN1VFptYjhuVEs4eWx2cGZ6VGwrTHorL3I2c24zVGZOLzNsVWhQeWRNTk1oaVU2aFpacWh0VWtRNm9ZdDJrWnVoUFRLMzBwcmFGMmdDMWgxU09mcHZhUldxMmZ0YjJiYUoydDVTS241b0thcGJRcjRyYUQ2VVhmVFB4V0FaOW02em1IRjJqaXNSRHEzSTFnK2RzN1dCcFQvcW5nZjRnQ3d4aXRORTh4NEN4b0JDTUE5TkJNWmdCTGdNM2dCK0NHOEdQd0UzZ3grQW40R2J3VXpBYlBLZ1B5aC9BUTJBaFdBUVdneVhnU2ZBVVZwVHFQYklNck9Udmw4RXFzQnE4QXRhQXRXQWRXQTgyZ0kyZ0RMd09Ob0hOb0J4c0JkdkFHMkE3MkFFT0FRZFVnTU9nRWh3QlZlQW9PQWFxUVFBRVFRTm8xQWRWRDlBVHBJSmV3QS9TUUcvUUI2U0RESkFGc3NFdGVyZTZsZmtxZk4wbVA1TUhkQ3R6RHpMM0lITVB5a0tpZXhIUHhXQUplSUs0ZVpLeVVsWm9HYzlud0hMNlBBditBcDRESzhCZndmUGdCZkFpZUFtc3BQL0xZQlZZRFY0QmE4QmFzQTZzQnh2QVJsQUdYZ2Vid0daUURyYUNiZUFOc0Izc0FJZUFBeXJBWVZBSmpvQXFjQlFjQTlXZ0ZydnJ3TDlBUFRnT0F0Z2VCQTJnRVh3RjJrRUgwTVFtTzFzcHdFN0JyMEg4R3NTdlFmd2F4SzlCL0JyRXIwSDhHc1N2UWZ3YVZIMTFoOG9FL1VCL01BQmswVC9ieG5xVkdxWFhxQUl3RmhTSlYwMEFFOEVrTUJsY29rK3A2YUJZYnlMU2o0bFN4WGphM0FmTEJGYkdZV1VjVnNaaFZSeFd4V0ZWSExzS0szbStERmFCMWVBVnNBYXNCZXZBZXJBQmJBUmw0SFd3Q1d3RzVXQXIyQWJlQU52QkRuQUlPS0FDSEFhVjRBaW9Ba2ZCTVZDdEhiemo0QjBIN3poNHg4RTdEdDV4OEk2RGR4eTg0K0FkQnl2ejlFNW0wb3U5MHlaTDhja2NmRklpUGpWWHQ2dDUra00xSHc2NWg1M3ZnUWM4dkhWWXZsZ0JYN1RSNXpNVHBmVDVqTGFtWFp1a1V0Tk1UUVUxZS9IYXphcEVONkp0RFpyMjBLS2VGbmw2bXp3c0MyajFKbjBkYXV2b1gwdUxkbHEwRS9zUHk1Q1l1K25qb0xtS1BoMW9ycWRmQU0wQit1MjBmVklzWTgxbHJIbTZHVTNOa3FweUpBTWVkS2paVC92UGFYK0syanBUUzUrQTlDSUNLbG4xRE93c1kzVjNxam1TeHV5OTZIbFJ6Wk4wTTN2eFpLMDNqSnlkbjN1VlRKT0puQUNuZFpOdUFRM2E0VjZqYThTamora09XMnJLbStSL3ZQUVQramJtRy82clVTK3hKOUF1ZER2NlU4YXFvYXhDNzRkbDM2SnN1MzVmYnozUEVWYnJCZHhiN0J3Q3VsMC9KRjRZUWNRSGI1c1ROTlNxWHRMeGs1Z1o2VS9Gei9wK0RWZDN0ZXBsK241OG40RzFXWktoVCtudGVNbXJEMW92bmJRcjA0eXZLcVZJSDdCZVBLNzNuZWNRcVhpbVE1ZnBFN29zN0JNMGRkalNkcUt1MDVaMkZ5M0dpNmIyZk9hdXQrazJFSzJ2OVp3OWt4ekJSazZ0THRWMWVrMU0vMC93VUMwUjdZblhxRS9ZK3pGbVdIOGV2dks0K05vdmZOV3M2L1dSaEJiRXR6M1Y3V0c4WDRQbEovVUsvWmxlRmxQMnVWbnRNNnkzeDg2MkE4NDcvN0dhOWFyNE9WQldDVE1uOEpwdVRFcm5TajB2ekV1ZE5oRzVlK0doU3YwQnVWZm9LdEN2MlpvOThNenBFSk53ZG5aekhaS085T1N1VExpaUJvWjE5R053QjdrRTFwZFRGbUxYTGFhTXQraTkyRUNadVZ2T2dXdFNXYTgvd1RZWnNFTEdHVHpWWlBnaWRCSndGdldNbEVaZmcyTmJSLzNsZ2EwYXp4S0I2YlNxQ0srQnRkVnJPWnF6Snh4Sjlsd2FFaldIenF1M1pham1TRXdraUM3T2hlUDJYc0VhTm5GQ09Kd01FU3ZkZVp4eHQydVRLWWM0cGg2T3daWUVqYkxnbHcvTWVZbFd2MnRKSGF1eGkxRVA2bDEyanJXNldvWVkyeTIzVmtUTnhJLzM2M1hRNWR0ZC9OWFdKVTZ5YlFRdTBHL3JlMTBOcGZwRzdtOHluNk42ZzEyaDZuQmMybnB6MXJXSHJOWDNXWXRxOWJmMGF0NDJKSnhuamJYdFl6eTBCNTFOV09pRmNmd3hqVUp6YStuSzNQVGU3WHFyeG5xcEljRVFmamNET09sYTFjb0lIZlprYWlFckNxOUhnUG0zUk01c1QyUUVFMGtkOUQ3bTZ2SW5tRU5McUNWeTBySk5xMlZOZnppZTNIanpTbTRrMXRFVGpobVRRYkNqaUQ1VFlzN2NoTm5NQXYyeEhUdms4VEw5QlhhWnVLcXc0NTZ3dlBTT2pEVGNnamMrMXVaTEpoeGRadTk5U01ab1lueDVsejBVanRZVFVYOTF1RmI0dWpUc2VVNkdxejlqUk8rMUhqbHQ1OURPNmVPMTR6YTUwdUN1dzBpN0wwOWFMdWxjY3o5K2FuUFAram9iODExSGVFeGZEMythTmVwRCszcTl4ZXhRemJjcWIzdVFYWlE1Wk1CRmNHcXIzb2M4RmVMVzBHNml6d0hZeTV3WVcraXpKOEVreUpTdzBCT0pCSS9sQUwrYnQ3WVluN002aGpYQ2NkVVl4VyttZDZObE04OVpjd0N4ZHRmSHRpS3FQQW5QNStiRTc1M3NFdXNyKzVlZm5NNnNTR1BYdm1ZZnhlOGd2amJkVEl1Y0pxWWViNGJXTm9Cdks4UGo2di9na2VyWTdJZVlhbzNQSmNMMStyQ05mWnZ6ZGNrM3ZCR1BOS08xWGg4TzczLzlEcU5XeGN5aC9leCtkVG1xRWs2TXpvVkNyUGdQR3gzdFo4eGJobmZqcE13LzYwNXBZVFJQOGxscGhESE9uTXQ0M1BPc3c1NWhmanhXQVZjY0NVVzFlK0sxc2crTTMvWkY1YTJoZUxQc2JWbTFsUmJiWThiZUY5bkY1dmNaNGR3Z0p2U3J1b1I0NmkrRFFJNWhHZHZtQ09NMncxQ2Q4ZmhOd3lkNks2VnZSYUloSU1Qb0ZiVzMzTmFEUW16Sk9HUjV1bHd2SkNMaXZPU2UwQjVKaXlveko0OFRkMUo2WTJJL0xTNlRDNFN0aVk1SSsxMzRVVEs1YkVSM2I3c3ZhanJIUWtzOXNkcVlLQ2Qxejl6QU9YbTBJL3d0Rk9YNXpoRUNhREZlVGpTQ3lUYStTQ0lYallzanM1YzZjMHdiQmEySjdiUTVVcVk5SDl3ektmWmN0THNzbnFGVEtYdlg3angvRXJiVm1ieUgwWDMyekdpSjVFdWVxQzg3bFNEWGY0NHYrYmJFcDJpQ05jMk00b1prckdxTHlpbzhTZWkzTVljWFEvYjc3WWxYWlhkaGsrdWxtdGdkYi9ZVlh3SW56WGY0bVRMajJBakVTNDEyUmRyc0NaVGNsODB1YTBOREVpMlBFRXZWMXNxYTBEcm8wK3pUME94OW5lc1FFMHZtZkg5QjcyY05tenAvZy9tL2Z3bHVaOTREa3Z5TzIyUnMxVi9DajYxdXptZStENnFOdjEwdjFzVE93ZnpxWVgvejJIanVWVEJuRm1PMGtVdWt1cmxnOURyNFhNMitMcm1FQjNhcnQ5bGljcjkzOVlua0hYNHJudGp6UHU3MEQ1VWRzRkdZRVpyek9XYXhEMFpPczB6Y3dqUE4zVzF1ekp0TUtkNU9UdmcyVG4ydmZvK2RsSmFFbjZwbzU0a3dSbHJVdWR3UlpyeDRqa0ljUnFoTFJuOFhwZzdOb0RiNnQ0d3VjMmkyM3pqTjRkYmR2bnpKN3I1dS8zTFMzZDlURk45eFBmRDNBTW5qaTdsRUZzckRza1NXcWh3MVRvMVh4V3FHdWxwZHE2NVRzMVdKbXF2bTRZVitST3REOUZ3azVmS0FiSk1EVWlZZktZL3NVejFVam55cFJxbXhxamU5SjZ0TU5ZMytBOVVWNm50cUNIcXVWaGVpNjFvMURIM1hxZUhxZW1RRW1tOVhJOVV2a2JHTWNZOHFWSStvUjlVVVZZcE1OZjhOVkkvYmZkYVhMRHlUdi92SlZDU1gvR0NBZmN2Q3BpeG1rU01ES1UxaEhpYm5NUDlUQzBsbTVDMERIV0hKc3RwaVpTcklRbjlJcHNaSmJ1UnBSZzVMdURiTGxjekltN0VwMjlvVmxvR3VtSys5cnBMbnlpQlhCbHNaSjBVeVdpNldNWGhnUEg5ZGpCU0NjYmFtaUxJSk1sRW04WndzVTZpWkxCZlpPaU5qSW0vajBCRVdvMkU4TWlaT3hybGpoR1NpN1RYVWxZdXRETFVZeWlpRmJvbTV3aU1VdVRJbThsYUViUk9zZldHWjVFcFJaSnhvbWVMS1pGY3VzaEs2RXJVZkd4RmppKzhja1Q0TStRWXl6T1liaG1HR3V4SytMaUFuTitpVDRFdDJpQ3VkMTRWUkdKRmd2QjQyQmtiRTFSWFlESGFVOUpLUlNHL2VDcnExYjJOdEVXdURoLzNyUXhUMjl5VEtERTk3R1MyZG12NkkxMXJrdGJFNHlFWmlpbzI4YjlpNHk3ZFI1N05STjlSNnFvY2RwU2MrS1VEbmFOYllhLzArV3FiTFpieGZpWGprQnBuTisrM3lDM3JmSVhQUWVhZmNTKzlmeTIvUWRwL2NqNTdmeXUvUTh3Q1NMYjlIY3VSQk9DUVB0bG1JdHhjaGVmSkgrVFBsajhpaldMUVl5WlBIa0Z6WWFBbnZqeU81OGdUU1c1NUUrc2hUU0xxVUlxUGthU1JEbGlJRnNnenBLODhnbWJKY1htTEVsYklXRGEvS2EyaFlKNXQ1MzRMa3dsODdlTjhwYnpQdUx0bU5iLzZHNU1pN1NKYThoK1RJSGlSTDlpSTVzay8renZ2N1NJNThnT1RLZmpuSSswZnlDZStIcEJwdE5mSXA3N1Z5SERzRDBvaWRKNUFjK2JkOGdiV3Qwb2FkWDRtV3Zrcmd6RXc0TTBQeVZGODFRQWFxTEpVdGZXRGVITGtRRmkyUVhtcTBHaVA5NE1XeHZCZXFRaG1qaWxTUmpGQVQxR1R4dzY3VFpJQzZSRjBpcWVwU2RTbnYwOVYwM290VnNZeUVlV2ZJY01POTBsOWRvNjZSd1dxbW1zbDlscHJGSGU2Vk5MaDN0Z3hUdDZoYnhhdHVVN2RUQWcvTEJXcU9taVBqWU9NU0tWSjNxanRsQ053L1Z5YW91OVJkdk4rdDdxYk5QRTZEc1dxK21pL2pZZTE3eFBJMlk4SGJrdlpmY201TmZIamFsZFJKVEJOaEZBZncvL3RhU2ltbHJBb3FZa1ZFeEkzTjRvSTdJTHVtYVl3aEpGQlpUS0FVUTF0RVJkU0tXNzBZRHg0TUxxQVlZNHdINDhIZ0VnL0dnL0ZnUEJnUHhJTXhoaUF4eGhoampBbStlUXdHNG9GNm1OK2JtZGQ1OC9wOTMzd2dBQmFNR01hZ2lrdXJYTEI1M0g0dlZzTEk5ekV4d1RuQUJDc1NrSXAwWkdFMUNyQ0J6NDNiYWt2c2NPeHd1dXh3T25kVjIrRjFPU3Z0Q09sUEVTSVJnMFFzeEJJc3h4cXN4VWJKUkVQQkRCdVNrSUkwWkNBYk9YQ2dTTThaRUlWWXpNRThMTUpTckVBdUNyRkp6eG01YWh6bVlqN3N5T1FPODdBT20vVmNCQi94U01ZQ0xNWXlyRUkrMW1NTHRycmRIajhGeFpCNFVid3NEb3AzR3QyK1pyb3ZQaFNmaXMvRmwrTHJKbTlITzcwVlI4UVA0cWo0UmZ6ZTB1bHVwRithQ3FKSnRJb0pZb3FubzlHajBzUU1NVnZNOFFiYU81VkRMQkszaTJWaWplankrWEp5VmEzWUlMYUlIckZUN0dielZLL1lKNGJFQytJbHNaL05WNFBpYmZHZStFQWNGcC81QXZ0ODZvWDRTbndqdmhQZml4OTlnUU0rTlNaK0ZYK0l2elVOU2pUejJsRjgwSDlFYmQzTWJsUVltc05RVGRNdzdUdzZESTFoR0JHR3BqQzBoS0YxRm1QNHE4M2c3NmFBdjdaaVZNR0ZPalRCQXo5NkprZWVUSk5qUUhuNlRPelY0eDQ5MXVuUnE4Y3VQWGJyL3phb1g5L1M0MDA5RHVyeE90Zk80bjFBc1Vic1J4dEdNYzVYbWJDUWlTTEpURkZrb1dpeVVnelpLSll6NllpZ09JcW5CRXFrSkw2MjgrR2dRallOSnFxZ1NxcWlhcXFoQnE2Y3luTm40YjFCOFpqWjZCd01WRVFlQ2tuVU9qYlMrYi9uUDNuL0lYd1R4MlczK3NRcWpDR1pPNG43dDVlcEhyUzN6M3d2N3ZLVE0vZWtZbFJnTi9mWVMzNzJHQVhZNDlURm5xQ0RiSkM2MlpOMGlPMmp3K3dwT3NLZXBoNzJEQjNscXNRN3FiYUttdEhLdlgzbTNndzh2a0VleDM1YzQ4d0Fobmo5YUd2b0xJYnhDSS94UkZ1OWxNT3pwemlXVURrUGVUM1Z5NjhVdFZFNzN5ZHFKWi9NUlRMWE9zdTFydUFxMXh2Z09ickI4elUwVlV1cnd6VkthU2VWVVRuVi93R2hTdTBEQUhqYVkyQmhFbWVjd01ES3dNRFV4UlRCd01EZ0RhRVo0eGhTR0ZXQW9veXN6Q3hNakd6TXpFQTVkaUJtWklBQ1gyZHZIMFlIQm9iL2Y1bC8vVHZQd01EOGk5RlFnWUZoTWtpTzhRWFRIaUNsd01BTUFCWDhEYk40MnEyVWQzUlVSUlNIdjkvTGdpSWlDQVFDaE0zc0lxSFhoSklBb1VnVFVYb2dDYjEzUWhjVmpBV2tTNjlSVVVGUjRXQVhCYkZ4d041RlFEQzcyQnNxaUtKSTFydEx3UEtYZi9qT21mUG16cGwzWjk2ZDd4c2dqbGp6eWlPaVQ2SkZpc1hGZGRyaUV2d2FtOE81ZWYvaGlWTmREZFFZamRCaVZkUUFkVk4zOWRGUzFWUkgxVkJMamRVNGpkY0VUZFFrNVdxeXBtaXFhcW0yVm11bDFxaStCbEdNNGx6RXhiYjJKWlRrVWtweEdhVXB3K1dVcFJ6bGlhY0NGVW1nRXBXcFlqdXVpbDg5MUVvOWxhMytTdUFXYnVVMjVqS1AyNW5QQWhheWlNVXNZU2wzc0l6bHJHQWxxMWpOR3RheWp2VnNZS042S1VPOWxXUDdEMUtET2pTa0Qxbmtrczg5M01YZGJHRXpXOW5Ca3p6RzQ3eklQbDVtTHdmNGlDTWM0akFoam5PQ0gvbEptVnFya1JxbGZtcXRMUFpvcUlab21Db3BTYXVveGtEUXNtaVpORnI1ZnhWTmNmTFpheE1GYXFCNjJuQmhQRjB0VkFjZlYxQ1RRV1R6c1RxcHN4b3JSUTNWU0N0c1NpR3pOVi9EMVZ4cGlsY0Y5VlVIcGFxSmxoQWdoU1JTYVVwYnJxUTlIY21rbjMyUnd3UW1NWm50cXF3cVNsUlYrZVZVWFFFbEs0Z3ZicFBOeWFTTm5VTUY2NVdpQVdrV1pUT1k2NWxqcTgveHFuak52TjNlZnUrb2Y2Ny9wSXR6SlYyOHErejhMdWlTWFVPWDR0SmRlNWZyWnJrRmJsc2dHRmdlV0Jrc0c0d1BEajdqRlVZaVp5T1IySytWd2xtVjAyMXZPUXpoQmphcGk1ZGdlWGQ1Kzd5RC9qei9DZWU1RXE2Y1MzQ0p6c1h5Tm5acHNielRYTjYvOHFvb3J5S25valdEeUY1YklYQytpb1V6QzQrZDc0Y3p3bW5oMUtKK3NmQ0E4SVJRSk53KzdBdjdRb1dobmFHMm9US2gwZ1d6QzVZV3BCWXY3MjNSMWlJdmVscWJhTzA2YTNuTTB3RXZJenJzdGZIYWVWMjl6SFA1dko1ZXBwY04vNHNuLzNEaTczeGZZTlZucEVSSlcyY3NyVGZla295ME9DTm1nellhZFluRzRUTE4wRXhqTDE5WlJrVjFUWmZQZUZxb0JWcWtCc1pVa3RXb1pvejRhc1o4VXp1UEZPT2xZeEV2NmVaQVRveVpRV1JwdWJFN09VWk9ycDNXZVBhWUdmbm14aGF6WTdPUnU5WGMyQkd6WTUvNUViWGpHZlBqaUJseXlPdzRiS3dXbUNISG80N3dCOThidDlXNTF4aTRrMlR1b3hiM1U1Y0hxY2REMU9ZQjZ2T3djYmVOWmp4Rkl4NmhDVThZaFR0cHpLTzBaQmN0ZUpZTW5xTVZ1NDNORjJqTjgzVGhOVHJ6Q3UxNGlhdDRsUTVzcHhQN3Vaclg2Y29idk1rMXZFVTMzdUZhM3FZNzc5S0Q5K3hrMzZjM0g5S0xEMmpPMHd6Z0UvcHlrUDRjamZwbTFJY1p5cWZHNkRHRzhSa2orWklSZk1Gd1BtY3MzektHYnhqTjE4eXdtM0lxUHhzbFB6Q2RYNWpDU2FaeHlwdzV3NDJjWlRZM0dVbzN5eU5QWWhSZk1ZN3Z6TUJna1gvSjVtS0FXZnpPVEU0Ylo3OHhoMGpNOHRTWTcwM3NadW1yMW44Q3pib3FCd0I0MnN5OUNYZ2tWM1VvZkc5VlYxVXZha205Ny91dTF0NXF0VFNqcFViU2pIYk43aG5Odm5nOEhvOTNzQTNHWUdNOGRyREJnQTA0R0VJZ0FWNldCOWhKSUM5Z1lzSWpablh5ZUovNWtnQUpaQ0VZUWd6R3JNSFRldWZjVzFXOWFtYWM1UCsrZjJ4Sk0rcGI1NTU3N3Jubm5yMElKUk1iNzZQUENDOFFrZmhVTnlHVVhCQW9wYmNUQXI4UkhhTHNLL29jQ2NjRWZmQnFjYy9MSDROZkU0Rlk0TnREd2xORUlWYlNxeGFzMUVUb0NqRVJnWnFFYTJHRWUxVVNBWXFIcmhGaU1jTXd4ZUZ3eUVxZ1dLSWxtc29sRkZkQ3RGRFBFZXJZdTdmNnhiM25xZVdDOE5URnVXOTlpd2JvTVpoM0hlQ2ZBdmlkeEVmaVpGTGRvbEJKaEJsRUlwbEU2YXhNQllFY1ovTW8xR1NpeHdtYksrRHY3b3BGL1BGQTNPWG84blg3ZXVKbXhWOTBKWWE5SHJlc2VQRjdLa0ZUbnRMd2FIa2tLN0x2cVpSam5ZWk92R3AyZlB1ZTExOVQvUWIxZlBHTDA2dXJvL05YN1YvNG12RFV5ZDNqK3h6ZGg5UUQ1NFU3Znp3ek9qcHo4WXVMRXhNTDFWOGdIU2daMi9pWjhDSGhDeVJCaHRSK2o5c2ttZ2hEVXhST0VrRUlyNW9vakRvSjJFWG9HaVVCbjdQYkxKTUVUVWlLdDVnWkhxMzRaRG1WN0JmS0kxTkNhZGpyVTdMWlZMSlQ4TGlqQW4zL3hNM1o0ZEp2TEMrLzZYaWxjdUxlNWRVSGgwcTVXeWUyWHJOVUxDNmQzVHJjWDZwTWpKKzhiM241d3NteGlVcTVmNlJ2N2Z6azVQbTFQdHdmcE45dkEvMDZTQUQzUjZyUkMzQ2p4MDJVMGF2VFRvaWp5eDdvRE1CQVcwSldmTVdTb3pRY0JRUTZoWlFyQlgrZkF0ejZoZlhuVjk5NFpLUjA1TjVWNlFNZkdEdTFVQ2dzd082TUhuM2owdEliajQ0S2QxejhxK0x5MlltSnM4dEZvQW5PdlJYbXRwRUJ0UmR3RVUyQ2VCWklvQ05nTWtuSFpTcEpIZ21ZQTBiWkhQaEhVVUl3ZWNLai83ZE8vNkY2RS9WV2YwRGZKVHcxKy9QWmk3TkVnMTBCMkJaU1VMT3RzQ1ZnQm84SndWcUl4Y0ZZTGxpRDZ1QXduZFVYQU9Ldlo2dC9XZHZENTJFUDgyUlE3WE01QlVtQUhaUUk4Sm5wTEd3aTI3NHcwbzJjaFBFUnN1Wnc1elA1dEt5RWl4VHAxSDcva0hTVlZEa2hQRjlhdjNOKzZkNFRsY3J4ZTVkMnZuMTRKSGZIOU5ZelN6M0Z4V3UyakJ5YUxacCtTTGZRblF0M0h4MWx1M25meWZFdDR5UDlKYjZiTy9zeTZzSFNITVB6SUt6OVBrYlhuSnFHZjV0RWFqb3JVRnkzTEFtaTZCRmI2UWxyaDY4VWZEKzRTaDlaWGEzZUtEeFYvUUlkdnpoSHA2cWY0K3MvQU44L0JIQkZFbEM5akl3QzFZNHVsd0NjTFJ3SFZ2R0k4bWVjUURNN1BOTkY0bXBFa1FXS05CTUUyRjNZQzQxTXJreFNoQk5QNGRBbHM3bUsxNHZIemxFUzdHKzVmZjFOa1IyQlE5dDJuMTZsNWplODYvaSs4T3lPbTQvUlArYXdjWSt2QnRoV2tsR1RGaG5PRXNnV3l0WnBFZ1ZCOEFpSW1aVlluVTZIaENJRmNBT3BRbFBVc2I1Szk1MnF2cGZlY0s3Nmg3RFFQNkVyMWQrcnZvL3VyRDZwd1IwQ3VCS0pxV0hPaXBRS3gwV3FnNVNJNUhDWVFHSXd1bmtBR0lpNGk3OHh4NThGUEpEMjhLeE5waUk4dW9Ka2NxK0tnSmtIbU1McGNKcUEyeklVeUYxeXVaRHE5R1BWbHhiTy8rQUg1eGVIaGFHTHZ3VVlkZEtmWEp3VFRocnJmSkR4Y2xRTktiQXdZNWthU2dDeEcwRzZTbFFFY05TVld0OUZIeGNXZDFTUENJdUEyVlBDSEFEYmZmSGpYQ2FQdzU2OENIenNJam0yd25hc204L24wd2l5a1hHamdnS0h2SjV6aFJkSGo5Mjl1SERQc2RIUlkvY3NMTjU5YkhTdForSDArUGpwaFI3OUp6MkdrbWZzNUlWbC9TY0tIMTBJd1U5ZERxMnp2WFRoNllJYmdnb21DdkliVU5LUExGdHJoNDJRTHJ2TjFlSENuVTBuRkxZTlhIS0RpR2F5Q01YMU9rMmN1ZlBPTTg5OTVTdGZXZGk3VjNqcTFxTkhiNjMray9DYTZ2TXIyOVJsalE3ZlpuVHdrUUdVeWdQOUFSSDRSamFCdEJCV0pFb1cyMU9tTjUvbmxBRXhxT1RxNVRLUXh6YzZXbTRnMFdnbEo3dzRVWm9aMjVZL01seFBwNHRIczczMXBNck1SbzdSWXpzZkhGb3FMZ1ZDZGVUNnhMbmNEZFAxSkhNNXJpTTZ6UTRCemV6RVM4YlVzcGtLRWhOSUFwV0VzM2pkYVpTVHRSdTJxNU1RWjNlbnQ4c0xqOWdkM29TWkhRcnQxbk9seEFieXhhNSszYzdaZCsxLytHdGYvZXBYdHlNRmJ6NjAvWXlyK2hWYXJINGR5UGpTMHNUa0VqK0g0WTJmQzl1RnZ5UUZsRGNlTi9BOFArUTY3ZUJJbkFRQ1JzUzF2a3d4aGJTcmFJZDhKSnZMWmJQbGtWRkRKc29ldDlmbnd4c1krUzRiSHBpK2FXNzNkZlA3YnpteGZ2OTFhL2R2eTQrK2RuTHgyTlNPbTIrNkpqOS9hbnpQVzI4WTJ6cThlMkprck12bDJMdmo0TTNGL29sODcrSm8vNGpONVQ2MDFyYzJGdC9LY1FSYXJUQTlKS0ZHVFVnUS9aYlJEelZYUFZCT3VNb0pUd3BPWlZnWWZIRlZlTTNjM01YZkVGNERNSmJoM0x3ZVlEaElTUFdMN0V6RDA0WVVTN21TR2w4QTRpQy9IRzVka0wzK1BmZTg4VGRYYnpwNjlLWlZtbi9MLy9qSVcrazdxOWVmdi9mZTgvU2RpSnV1SThtSUd4enA1dU1OOEdVaU81bkVTVkFVR1pTR3FpL3MrZkdMTzZzL2hPUDlzSERyUlpROVBVRG9BK3d1QnpnZGlvbkpIaENFaUtoSkZ6NU9SN2NFRWorUkVoRVEvQyttUk5xMTl0amFIUjlkL3VocmxoOWJleElnZmthWXZmaTBzQTJFeGg2QUN5ZE9lQk9UYVNERGJXWkpNTFVJTmFlVFM2QlNpaks0SWsySlp3N1J6b3RIL3ZyWlE3K20zVWUvUTYramUrQ085bGFmcUw2VERyRTk2UUM0ZHdKY00wbXBjY1ZFeFhZck54T3owOGxXN3VCTGQ5Qnc5Y2VIdnYyZC9kVWYwU2g5Zi9YRDlIRDFSUFZmQUY0RzRFMHdPUW42aEV3QlNRQXByT0JjcVBleDNSSkJwZEZ2UUxqNlFYS3ltNkZNSmRoMG12RmtRQlR2RnpxcXUrbWZqZ0pUejQ1ZS9MUXd1N0hCOTBoOHQ1Q0Y4MFdvUWdQa092SWMyYUpXYkZ5amxXVHBBdTdTaFFiZFZ0Rk9IcVZkbmZZT3E0V2FxZG5oY0pxVmROR0ErVUVEWm9Sc0I1aHo2allPMCtmdDdqSkpTMllxQVdCSlB0Y1dzcjBERnVic0NOZ0RCblFMUUNla0RjNUJCbitIT211bmtveHpBRzFrU2I1Z1VRUzQwUm94TjJ2d093QitoN01EdUthcjA1akJXby8vb3diOEdOa0s4QmZVN1J4L001VnRpbFVFN0tWRzNDMGE3SUFmc1FjOVBCVkl1UndkUHJ2UG1LR0RyWUhiRCtJMVRIOXdraGwxMmduNkE4b1dJcHBSbnpNVDJXU1dtM1ZHWEE5WEdoM2Q4R0NYZy8reEtoR3dLa0M5ODVVOEtmaEtHTmFGc0ZBdEhmbjM1NDcvcXZxMXZkVXY3UU1qQTlTbnVaL052cXpaR1cxbzZZY2oveHlaVmllTXRRSWhTUXNabFhveWRuVUFGelJ0VTIyZnpodXd3Mnlmd0pZeFlCTWs0dGxYQmhsb3R4RVFVRjhMQXE0M3FxNEl3SUhCb2gxb0tLNklWS1RMeTArRWRoMVVZOEJmSmxFMmFZQ1ppc2hVSGpSTkVzSmFDSFFFZlFRRkZJUXpkUVBGdFhXMW01QndDS1lKT2p5WnJNT01DaVhvV1RMSzhwSnV1NkNVcnpRWWRLUEQ2Wmc5YU9uc3pMa0h0d3lNaE92dHU5UlVMQlNWNVp6Rk9sekl6R1EwYzgrZzFRc0dyZUtNVm0vNkJDZlY4aE05c0o2Q2pTcFdPRFZLSGQrWnpmSkpJc3ZCMVFZT0RLazVXSmxaa2MzbjJqeFRQM0pkalY2ZVhRMzhIamJ3QzRFVzhSelpwYTRHcUZteVU0V2RPM0hGVDZVbEdHR1dKZk01d0VBaHN0SitYa3FUOFVqSTYzWjBOWncrTmhlektSbFBLcHBNK2lqblNhOUhNbkg3MGlTWmdDc0Y0RXJEMHBUckxFMkJaalBwVk5EdmNsZ1VtaFNTaXBMUTFzRmhQMjdBVHBJM0EreGxkU0ZOSlpNR1gxZ3h5MEtiR1pTNkdWSXBnYVlLcVVJK2w4M1U1ckh3ZVpoTjVXQjJjWVhzVTNjWGU5QXVWaUp3bkozVUpEbW9hRExoWVpkTUF0c1dVTS9PRUVWaE94bGVOVGVZekFOOStXdzQ2SFYzMlMyd242UkNLNWFhNmF4b05uM052RUI3dnRJdmJtcFBEOTIzWU84dFR3MGx4OXhoUjk0YlMyYVNFZC8yTzY0YWFtOWhqMDdRaWxCTTVjdE9aN3l6Syt6M0JRL0pFeWZlTU45cWM3Zlp0MkNOdGliSm9DMnNXcnFBQkJaTS94bmFHdk04YXN3VGhXZWZReWxhNHc4SjFFUkJNcDFyeng1cG1LQW5uK3BQOTlmQW13RTh3R1orQThZZlpvMC9UbkhaSHdiK29Dc1duVEZBSUpxYmZBb0tOeHBEb2E1TzBHTVNvVVE4Rm8yQVhocnNDbEk3N1VoYWxTU1gvUUg0OWpUSXIyNlNJQlBxdUVRcElBY0VPR3NCM1ZZNHpzMUlSUkdQbS9tVjduUVFFdkRCUnJzY0NXY0NIdXRLb05SSEhUZFZidkJYZU9BRzhPZytpOWVlT0ZIbnRmaklSM1MvQloyY29aTTExOFV2WjM2cCt5NjA5VzlsZTJqUnp0NnJ1Y3lHa3d3WEFTaVRGemJ4YUppNVI0TlN1RkZodWJRRDd5YVEyZGtpTWVCKzBJQWJJVHNCN3J3NjUvYzV1azN5a29YcTB1S1MwQUV5OWJqc3djNmdNWU1WWnlDMU9SNDM1a2l5T1lEL09rRSswUldyV2JqY0dpeDhGanZNWW5mWlhhZ2RHUFBZbXVhcDBTaFltMGRXZ1BrVVdibUFrNkhXOUYrZjUxRmpuaGk3RTJBZUMxVTZ6RFlSS0NadlJpOHJueUVZUUlyRm80RjBNTzEyMnYyZGZtTWUrNmJ6Uk1rek1JK3FUaEtGYll0OEJadlNCSnh2U2h0YStjRTJaMmNWMWdCa0lwY2drcm1PU04xMjRLb0c2QWJzOHdic01Oc0h3QnRnNCtVREN0Ui9CakwzVFd3TU10K0VGeTFvT0o1Z2MzVEREZGNGb2x2VVRBUVk1MEY0ekFnTWlHdVpGTk82UThVTVJYTVRYUlpjTkplNWFCWm1xOGZvNGk3NkhybzRQZEhoczVvZHRuaUVDcXNYL3dnMEE3QktYbjV4NjR4Sm1CS0VlRnJ6QTRHZXN3ZHdpSkc3MUM0UGxSUXZhR1BDQ3R6b3VvYVRiN3RBQlJhb0tJQ2JKTEVySlNHRFFwQXhocUxPSlo5cDk0VENkUjZZTUpiSk1kM1NncnBsblZNeTFVYjVxWGRVTnVrK211T3lTZXY1LzdzTVpQNVFKcXRzbXF4NmtOOEJiaGZ6alFMZ1BoQlpxTDhxRkVYV3BYeWx4Wjdod1o1S3NjSjhwaG1Ma3F2cE9NK3pjMkhUWklnMlJ4RWdzbmtFTGtnc0lFZ29VOEUzbjZPbnAyZXdaOURoNG5OWWxZSTJSL1VGOU9zYWM2UmhKWVNNcTZQYU9neVllRmFVMCsxZHZRNE8xSXhBRGJ3Zk5XQkdnWTJlSTl2VUtSMm1BbVNoS0RJdVRaU2hnWjV5c1Z4UEZJSFo0OThHbm5BUkg5bXFqbUVBeFNZTHhBcGNRYXlnelZyTlowMFVHYVBESWpCdUpRUTVBc2E3SFBvZnV4TGpMRkVHUXdpK1NzempBYnlTS0NkTzdOK1BQdUM5ZTFlck45SkhxamNLbHNuYjRjL2t4Vi9RNmVwZjBIc2ZnUFV4SHpQYmx3NXRYODdCK21aVnRZMXM1eDdvYTdrSDJxSlpEWmVSNlNBMWFKekJ0L1A3ZGVOOUFCLzkyWUlvWEVCMzh3VjJLTFVBQmFXZzlFblVSRTBnV1pJY3hzYTM0Y2tRNDA4T0k3THhHb0FCY3FxN3kySTJDVXNTaGFNTzhNN1ZRd0lvMUc2VG5MS1RRWk1SR3NENkxrRHcxZUVUWkxESzZyQk1CUmJJRWNRTHNna1VIZUdDNXExazBDVDRLZGtrbXhXVVVnWlAwZUQ5QktCWUdIOXdlTEdOR3prOGlZcG1FeGgzQUpIakpYTklUZ2RpNXZjNndzNXdoMVhxbHJzWlBBdUhSOURMOFVRZHZPakdqd0JlRDlnM0lsdW0wTExJT2lDNFNNRHBtekRraityVzZOL1lCVEJZVkFpWFI0ekZtZW9XWjVhQThqVlNJUzRITm40bVdvQS9OVGlrazd3TWorMzZaSWRORUptUjVnR1I3REpSWFNNOGlTZUNtMk0rL2x0R3ZWVmRLWTBJS0cvaEtuRjFkMXFVaHJrMmZnVXpXTm5keG5FT3MzMkJkVXZvaG9SMW43MGN4cFJZTndMa00rd08yNmQyNlJheVVHOGhlelVnTFlheHE5NGcxanhMNnlvY0NRRG1CVnRZRHp1MHVRNE9yTFpjQWkxMkwrZmo1MkJsUGN5bTVHc01iZHpGN1R3bmxVRG9tY0JZY0ZCaENRMGxFUTBsa1psS0Rkd0RpbllBYlNPcnVjYUZiSzh3UHZONnR1ZWQyam4rQjRBOXBwYWRjSU9iRlZnYnlGZXd5aTVnNUlneFFXUHNCazZ0RC81enVUSXB4ZEJsUUo1ZUxUd0ZNTHU0UENWd0V0R3JiMVZNek1jSCtJRnhjNXE3K21RdFZNTjlaTlJHYlU0bklLalp1RHN4RnNQdzY5Ymt3UHNCdno2MUI0MUI5TFdZTHRRaU5GcUlnRkoyM09BNmNNQVdwd3k5ZWtqNE10SGhwQWdHdFJDT2RyV0x4NEhkdkplSEEyc2JZbXZycmxzYk8yZElwdE9YUmNiQXBRWWpTcTNWditWUkR4bDR6cVFKcEhvb0FJRjJkaWhPczVORFVoQWQxSDFnMTRSWkZnUEE2RHJNaEw1dHNJenBTcnZBbFozWVBSNFd1Q29yNVFyd1pjV2pnTFp5L3VqUjFTZWVvQS85ZEhGcGtiNmgrdWR2WG5yekQrZHFPdStEalA1T3pjNTVNejlmWmxIZ1c2bWJlUTJPV3dkR3VSd3lYRmdHak1jTkdFbHlCbUNNcXFVT3NCVVpIR0ZGcVRNWUd5RFpiRGFIemVGd0lUeXpCZy8yNEVGR1A2ZTJCeThCc25BM0dEalZzVmNMUXZYcmV0aUFFV0wzMTVTNjFVOFZVd2Zvand5V3VPS2pwaVdBcDBnbXByOHdSMndENEZRbWxlYTRGUkEzRmx0ajlISnA5UG9UZ0ZzRURaUXZqMG9YTmdzVjUvT1pHbjRjemdjTk9CSHlkb0JUVVVkR1NuMjlKdE1TSEhzQVpvTFQzbGJSS1F3TkZFWjdSaEdtb21RYVlOWndDektZb09mMEFDREtIUTY0RDlUVUhzZENvVEJRR0hCNEVTcHVSUTNtb3diTUdMa2ZZSUpXb2xESklwdEZFMFh2UWp0b28rV2V3c1NXc2pxcUR2WVhSbnBHRUtxVjR3cVNiSXdROGFmQTEzN1NpNUlPVDVja21zNHFRSFRObVcrUkJVa2l4ODA4QUJFTVVKSk9CbnFEdlQ0djZoVDJEcHVGK0tuZnFuaUxDVDFBQjVxNTE0dmVYMWxXRXA2TXB2c2FqcCszTGI3aGNMbDgrQTJMd3BucTJ2aVM4ckdQS290YjZKTVgzMUUrTnBmUHp4MHJqeDdibnN0dFA2YnJ3M1A1TjY3TXJ0M1hNN2U5ZC9uczFxMW5sM3VMeTlkdTNYcnQ4aWIwOXBOcnVmNGhVeVExdVJTaGV3dTlIcjU3MldJN1dBbnlQaTRIZ1JHQTFMQ0JaemZYUy9NMXZaVERPVy9BQ1RNZVlQRVNVRVRwWm9wb00wWXM0cS9Ia1VOZ3E1YklueTgva2NkNzNRNDNURzh4SHVzV1pNa1VvbkFucllUWWI0V20zNjR2UDJHQkIzd2dmRUVGb0d4RzJOR1RHRktLazdYUThoTzJ6VDcyc0kvemwzcGFqZkdyQ2ovV3c1RE0xTk5qa2V2cjY2cWxwNUIzNWJzeFE4T1hxbUFra3JzREt5WEZDRUhtUkxmWFI3bC9VQnJKNWloYXFWUEN1eGQzRDdCWTd2alo0dER5THZ6NzNZdmo1NHJiTWdsNkpyR3JGOE82UWppVHJENmUzTldILzVCT0QvRWNuRlJzNHRRUWorNm00elF6ZmpaTFB4RUlvWU53eTlsc2RTVVFZU0Z4WTY4ZU52WXFSTjdKYlloUmtGRTl6TVl0TjRrbmluR2lkaHNJWWlwWHp3Y3Nkc3o0eWF2SnFTTThObVRoVWVTYUIwaUxKMXRxOFdROU5nU0tPdzBGQTM2ZVEwVTdhYWZEbTlSaVF4eis0d2I4Skp6bzU4Z2VkV2NBakI2Y0ErenplaitUTm91MU5vdnVBZmY3Y1I1LzFCK05oRVBCaHJrNnRMbmdQampFN2dPdmRoOThBU0NBTFdKcGlJaHI1dHNyV1FnL3h5eStMVDRHOEgwYXJhYkoxMGxKSGZSNkJCN3JiaWZiYTFGdmg3TXZVMHpYWkR1SDkxNERYaEpPME5kUnl2VXkzenJDckxzUU40TmFMQmFIaWtNT044STJjOWdzRnU5aXNYaVYvSTNxNXJINEtmaFdBcXRzR0pqREJOcTNGWTVORHBsR1JxWnBCYjFLWkZrNkNTY2xJZUVwczhQd3RERWNMMERwVEZ1RVFseXh2MkxRVndZVmo2a3RuVWs3STVsaXlxeEVyelIzSU5YZTVaKzliRXFCME5IaTk1OTc3V1d6REVZYnZmL3J5dGIydkJPczdUWDYrdmxlYjNMelhuS3ZFWGIxeDdqWEJ1dzArVGpjbktCSDF2aVNLVUtYWjhwYWZrUVg1c3VaME1Va3dhYWN4U3dIM2NzRU5veThwcmtQdW5Fbk1IV0pwVXB3NTBIcTFZLy9SQmg4OFQzdldYMmMza0tWdWJucXJ5YXJYNlVqSEZlRXorU0JYK1A1QWU0dnQ3SjRnYmxPL1ZOYXNqTXNGa290WFJhMEQyd05NVTdrZHdmRE80cXhlRkNTQll6N0EwWE5zSDR6R0wwWXpTQm40SkkwU2NlQjd6QU5sQmxwZkJucFROS2l4SXBTSzUra3RLVWhHOUgzTmZKRHdJbnJkSFQxbGgrcDIvTFRQRk5rUmlqeXZYa0I4VExXbXlaL0JBc0NIVjNiRTdsbGtXQ1IyNHdZbjZMSHYvVzhxQTY0ODBiVUlRUUZ1cG9KdlpPQ0tHbldyY3pYcEdWcGVqbzlNTHdqblhEdy9KNlNwNlJsUjNscTZUMnJ6elZrUjcwTjA2UGVSbjlRL2Q2cXFxNEEvc3VHWFJqUVpONGJOUCtMSVpWYU1tQkFTMCs1VWpVNXgyRjgwSUFSZ2RVOGgzSXpHdkY1NjNYWUZraHVWeWpnaXJ2akNLK212emJqRkdUd3l1cXd1MFYvYmMzT2Nia0NyZ0RZcVFCUjExMDV2RWNOZURIbUZ3Y2R1MTUzYllFVWo3bGQyWFNzSjk0VDlMdWk3aWhDdEc2S281OE02WHFhb2ZPMVE4N3I4anI1YXJQRmRuQVN6R2FDczFuVDk5clFuKytBZnNkekdPY05HR0ZHTDdCRkRGM3ZzcGd3MmJDOEVXQjVUeGx5bFdydG9FU3dBK3NLSzl3MUVwS0ErWmlleFgwMUtHT1l0RW1nUDhmUEFOQXpUWVBRb1dPQlNUS1pQTStPQlVXZ1RiWkFjeHJWYldlR0J1cGNKdmxlV2t1cnV2TURydVJFeEhDZUpDZVRqV2xXQmoxZU1PZ1JaL1M0Z1NjTlpDeFVSdWVJRE9hS29yQkxLcmphUXArUW1vS1RwOGlTY3E0MnZtWFV1dXJibEVzTVBCNDI4QWlSbzF3V3hrR3Zjek85THRaR3IydVpCazNQK3YxbStWK01aMExhbWYxN3pudDJzOFJ5d2JRc0pTcGZhTTRLdzd3d2g2TGs2K0E4YXNDSndiM0M4TlBobUtsc1ZTeWlCS2llYTRRVUNuWjFKbUxCVENqamNYVUd1Z0lNcmszajZXYjgvT1FkWEI3b2NCVXRpd2FGU3dQWXpzNU9SNmZEeGFEVjdyOW1lRUh5Wjl5ZTdRSnljWmhhaHBOWkVkb0NkWGU2SFc0RzFhS3RuZVdrTVpnUmpZYUh1YzFtUnY4WE9oY012eE9sZFdtcGxNTGRaS1VXYW5HNmRGOVJNNndncWVoNVBhS0p3OU9jYTVoS1EwUU5vc3doV3EyVVdydXQzY3dyeHVDYUcrQSthc0NOa1Q3dUQ5UnhCQmxoa2N3aWVxUTBaNFhDWWZxOGdDT05oTHdKWDhMUlpmWFlQQnl5bGJ1VDJ1RHNCNDJBK1dycVlJc203b0J2SUFCRDEyN0ZHNXFCVkxpdmkrWGtNWGhSalo1N09BMFV2S2Q1Zmw1TnoyM00xTk91TlVyWnZXK2xWcWZEeFM1R0ErN2pCdHdrNlFlNGkrb085Q25wc01XYVh0RUtYVk1FYkRaSzBjUEVvdkY4RGt2REhJOGFjMFRKaDNqY3RBNTNUS0JnTG82MnFBUGExTmx0ODNaNE5kQm0vVjRmMnZnRi9VdjZZOUNMQ3VSMXF0dEJCYkVidEJjUUtqU2RDb3BjVStmSldSUlltREt6anVsdU1XN25taFJCTTNSVGJVYVlUQjQrVE9IbThMcnFvU1NmVGNRQ2ZqaVlIWXBFd2pSc1ZyeEZYMUpYb1ZIdlNjTGxQWXIvOG9ENkE1S1VTK1F5VTY3L2FlMzBtVDA5eTNGMUtqbGZEQTBmNmoxMGVpRys5cHR6bzRYdDBkaE1ZV3pPc25kbTJ5NlhhM1ppMHUwZDgvdlc5MWFmR2s4a0hpdU9oTVBIbkk1aDd0ZFozdmlWNEJTK1Fkd2tRWTZwblFHLzNXd3lpWFNsd3lZSVM4dFBKTkNreDh1QzNSTnNJZVFrMVUzNlVQMG5MRUtBSHhOdGhaMWVUeVRrU1hnVEdWY2FLNGd5bXYwT1dsekZnYXVLQ2psWW9FZlg4Z1JuYW1yZllQL095TUppZU5mUXdONkoxRXZGUlo5L3NXZngxS21mbG8vTTVqSkpWZmhLVi9VcnlWeHU5c2o5cWZpUDR1bnp1M2FkWjFkYUdmYnZuMkQvWW0zcmVXSzFlcDU0WFQxUGpNWXVWOC9qcFQzNStVQmY2bVI1ZUYzTlpyWWRMSTJlU2c4RWw3THA2YjdRMWVQUmNGK21KemQzdEZ3K01wZkxwMHZoUkdSNExyZnpla2JiOHNhdjZLODEyaDVYTzhNaEI1NVZ1dUp5Q2xTbnJlNFBpWEhuZ0NUb1hCU3FmY0pPdE9FOFlMVHRncC9SZ0E5QXUvT2c0Zm1MaVhMakFvREVtWHB1b1g4VTNqV0lORVVhOTYxRkZxdjNubG9zTGdCNUM0dW50cVV5UU5FUnBIRXFRUk5kRjdNLzNYVStHZnRKTEhVZFg4Y3Y2SytCdGtGWUIwaWVJSncwYnNXandvdXFmUDBLT0liaFVDd2FTb1FUU1U4K3FXQnhSV05hdmdjZGY0aWNDQXlReUdicFAvUWNLcFhXdDJVQXU2SEJQUlBKNmh1bHE3ZG41d1B2bnJqS1Nzdm0vV09KT0tQeTBkbGNkdHZoRWUvUzZaQ1BMbHcxTzNPQTIwcjBxUEI5c0xwK1I3V2FRUkpZS0ZweDNMSTJ5aW04cXpMek5LQkR5b2VIMFdPWTAwR01Hb0VJT2RkMmhPZXlVQzRGQU8xbEt5cUNtVlMzb2tUQVNOUE90NGVieUZxa054VytZV1dITzJIdkRuWDNaQjk2YVBFRyt2ejVoVFhKTkdPU2VvclhUVlQzMGYrcDhWUVI5dUlGb0hFZnVVdDE1SE5SdTBtU2ZhQzVlMW1LQi9mQ0pjQTQ1RjY0V0ozWU1aSStFaUpQckJCOHEyd2cyWHdjRTFTOVBabFVLT0IyZG5YYUxDUk80eWlvcERwbUsrc1pJNXJGMWl5cXFGZm52UDYxeU1MNTAwT25lMko5UzVtWkhlRmRYNnB4b1l3OE9JSThtSnkrdUhIb1ZNZy81dk9xazBkU21mL1lkVDRWZTVGeEk5Ti80ZHQzNEZ5NVVKZHlpcXlHQ2I2UkpWMFhpNjJhakNKR2pMS0RZc3NEZjF6dW9EUjFjT25xV0Y0TXJ3MnRuVjZjbjhqUGVGRzZQRjNzdlhwWDlmTTBwNjVrTTlYZlJKcHZaWFZXWHlJMnVIdGhSa09VaEZkUi92azBlN0VETkhHZStBdlMzRVp0TWhESnBVdHpNUGQ4TU9uTjNsak02NGxGT3hlRkUvaVhtTWNiZTAzVlQ1L0h2ZDM0NFVaUm15ZUVrWTl1Mk5BdXVJZFk3WXMrSTJ5Tmp3ZGlVUzFKQ0pod1R2dyt0N01qWkEveGlaV21pY1ZhS2c5cTc3S094QTBkUHF2RllZMkZGNmVGRTFFZll1T0x2dndWa3pBdENOR2tNSEh4czF0bkRIcC9HK2h0SlhsUXkyVlJ4SEFXSnpqeU9kUGlPSzJ4dHN2TkM3RXFqa3BKb2FtY1ozbngrWU8vcE9LSmYwUHFscjc1L0FiNS92ZU5mU1R2QkxnaWNhcGRHQjFHZUtqK1VzVlhkQUc1M3Jrb2ZPTmlWdmdLSHd1aTg4ZWdBeHo0MDdSRkZGR09MajhSd1Znd08zTW5FUjlBeHF4SUlydnE4VkRpTDdoODRrZkIrSkNuQzJWSUp1Vk51ZElwTFYybzVHSGM0V3ZpRVc4VHZ5ejBsWGE2dzN2S2kwY1h0MVd5VTE1QldKeXBaQ2E4OVBtVm5wNlI0c0RnbVYzVnY2U0Y2ZVZzenVxMThiK20wOVYzMVhnWDF1RWlxNThFMXNWY0JiNE1GNU9lbEVrT3ljUkRzQ0c0SDVna3dhQTh2d3EwVDlaVnU4N2FLYTFXVXNOK005Nm16KzlzNW13dVQzNHVkRE44WWlRTHFvc213dkhDMUNSZWhLNTUzSEQ2WTU1WVBpM0IzbFowSWE2Vm92bTRqNGE1KzhycDZZUERwUU5xT2dNL2h3OU1aLzU5L3ZqeCtmbGp4MzQ2ZW1RdW01MDdNanA2YkRZSG92eUI4N3QzWDMvOTd0M25tUTR5SURoQnB1RTllVjYxQlB3dTBTU3gvVVZaRm1HVlV4cGxRRWl4Q3ozT2ZDd0IzT1lFSTVGU2R3MDFqMWxYM1Y0UFdHaE1HZUZYSm5QRitEU2E2VXZKNWh5dWVvVmtlU0c4ZThpUVhEdkREeG5xeU5lRVA5dVJ5ZFh1ek9wUGhMdnI5UkdrNndDVDA3aW1hMVZMT09TMG05QXB3dGNVQmh3TitZeXJrN25jMVpZVTU2SVp4NUMyUTlaVkYyVUtBS3JKSUpQZDFLMjB5bVRnak0za01Hb0FpdzNTVjZtdFp1cmlQSFdtTXIrdTZRQ2NiNWZvaThSQnpuQTl1S1BiQ21jSkpDOWN0a3NodFFOK1VQNHJBU05KT01USjVESGZPQzBYSThSU041akkxTmJXa0tUaElJNU1Tay9TMEU0anZ5ZVJtMTN6L1hhdnJTUFUwVGZyb3MrZkxvMkxlRDJPREZUL1NQZTEvNEorQUhnNTE2N3VMV1k0VytQaVd2RVYxTDNoeFJiT0ZaZHo1UjA5L2J2bVowK3ZEaC9xVDJkWGNvTmJNZ043RnJmZnNIdmltdW5CZUdRNEcwMWFPdTFUNWVsZDBWZ3BGT2hKUitQbUxyczZPbjB3dy9HTEEzNkhoTHRCVHhsV0IwQVhKRTZ3VklRVldRSjFFRlVHZWh3NXdzZHlQZEhmRVpmV2dCb3VMSVlPRnlzc09hekMxQVcrcHg3bW1MbHc1c3ppVzk2U3lMcWlibmV2WjNyYmpYUnE0bjdIWXhQVnI2Tnl2VTJSSjluY0N4dS9wSDhQOXd6S25RNHdWYWdoZHdBRk5pbHc3VWt0aGc1eVIvOHQwenhyaEt2SkhRZDZGb01ncGpreVdLeGM1cDRpeHlNN1VPQXNjdWxEbjY5K1k5dEtOazNQVmYwZ2djN3NvbHNSSDh4RStWZkFwNm5HenRldXhxN0VTOWorNW9zNzMvKyt0UzhCd0ZmUnQxYjl4UENUdngvZ3ROYlkrVnBxN0VyMU5YWS9XTGgvL3ByYnR0MTJadnVGK1ZjRHpEdnAvZXpMVHg5RXVKalo4dzJBYTBPcGFGVk0xRlJEc2E2WTJVWXdPNFl4YkNWWHdqaWxMNVZUN0o5NjhzQURGL1orL0RNSEhubkhyLy85ei83czN5NSs0UXU0NW8xQnNGRndENEEvTzVIeGlaM2Q3NXBzMDR5VmdMQTJrbkt5bW1SZmhTOWRyc3ZIL2NQNFU3dmYrVnU3ZitLYkhyWDY3VjBPY3ppenRwTityM29UZmNmRlA5azZKSnEyaVN4ZmtvSWxTK2h2dzN5YjFOLzVycVQrcmtBRDFSL1FtNnIvU3FOYjZQVjBkcno2Q0owQlc1elp5OExud0JhL0Y4REpOQUFtK1h0VXR4UFc0d0M3MlFxL3lxUkRkWFp6THpFcm9tSVc3ekdzWTBYaHhubTlFVzNSelovQnl3MDNMR3FMYmxFSEJOcmYxMXNzNUpMeElFdXVNc3MwSWtTc1J2MEZ4L2xaQStmSXJ3aDVueHBxaC9Ob2VhRGZwQ3hwMmNwV3FoQXpZSE51TTl2ZlFMdjNVa05iVVk3MEZnVmFHaXFPOVk0MW8yM2pkUjNOZEE0Q3p2OUQ5ZmRTeGR5S3Q2VFJ1dDltRVlCMlFNRWErY3ptVm1wYmRiU0hMLytBZ2J4VlJ6NVdCT1F4RGpZNDBOL1hqSDRIVXQzQS8ya0QvOWlQRVA5TDhFbWZqb0RkMGlFcWlobm1hNGU2VFVkOTZMTGpEY3h0T3VhWnNRb1NmbXFpTWpNMk16eFlITzBkYmNhL2szR05TSVkzZmlIT3daMHlTQ3BrQjNsNStZbCtWRG5SUGVUckZ0QS9KTkdwL256T0pFdW1sVkREQnphTDhjRTZGN1VaQzZVMktzbFVPbWMzQzRnZ25yM1lLaEJCQnRPclE5RHpMSENPd1UwR2s5cllWV0sxMWoybmptSnRzRVJ0NStBa1M3SkZPbnRsRDRLQm1ob2VvbVQ3N01TVzhzaFFaYmlDOWw0aUhncG9ycWxCT3RpNXVXdktwNmxRdWtuUDR3VTVzQ3MxMjU1ZkVObHNqdDJyLzdMejlOVU5icXZwZzY3WTBWSEQ2TThzK1B0N0RwVW16aVJ5WitqTTVINDAvNis2K0hkem84TjdZckpWakczdkdadXo3SnRSZDdtY001cG5hNkN2T0dSNEJZWVM4WEwvMEREOUZEb0hxbjlmSE9rdGRrYTczYTdoZWhsUU8wLytyeEh5MjVmbXg4YURjVjE3ZnJUVStQRnk0OXVJQVhhUytvc2d2dHFKZ1JyZWp4bDRoMEVPdk90U2VJUFFNaE1GTURsN0pVSnI4Nkd2SEZ2Tm54b0FmUVBQelNSNWhtTVVyemxWelhTczBnOVMwaytKa2dSRktJVk9ZamcvaWRZaCtzZnlpaC9XdUt5cGxnWEExS3hRY3oybWlnSktza1hRSEJpMXRJWWVZeXdMOVo2cGUwU1dQZnk1MmlWQ0NaeUNVbDl2TGhPUDF2amZla25YYkx0WTJSVzRhMmxUd25IMzVkeTNUZG5JRGQ1Y25VZkVvTUVqY2VDUmoxK0tSNGFJbVZndFp1czVPN1YwVUVXMEtKdmVjSWE4TFYvUk0vOTVtV3Z3K3FlTWRZUXVFdkxIYW55TVdwVmVhbWx6NzhrckZhcGYxcmdtaTJpMjFMQ3lXcFdUYlpXTmhqVmQvcG5XTlVVRXVtMGEyV1d3ZjdQN2ovbWxtYnk1ait0SjA2U3A0dE1rbUNUaEhvRHVYcTI1cStVNmQ3VkEwNmxrUXF2NGpBdHhYaFJzd0g3R2dKME1FZko2MVo2c3J3aGVmbUlZYng1OUdveS9ORXlrMUUwVVVwUHRDb2diQjhFUlNTUUVtc2dsY25XMXlvQldyWWE0dk9GZ3Z2Z3l1VnYxOEJwaW1kY1FpeVk4NE1oK21HbVlCTGd5L1A1V3JTTGxPbGI5SVp6Ums1SmlXUCtWWW9Oa1F1L1pmQlJ6VXRZWEhKTXkzQnIvbVhKanpkMGZQempVV20zY3YzTTgwUzRBa0N5WXhodXpqUTVMeGRrRHc2MGhnVGI4RUlROVcxT1hrL1dWeG13VEJOaXhlMWlHVFB0OXVOUW1HUE04cmMyRHNiSkhBSUU1ZFp2QmVlZ3hZUVRjak8rU01FTSttK2hOOXRiZ20zWDRZeHUvRWo0bWZJTmt5UVdSNWU5VDlHL2RvWFpHd2s2QlJUbXdzRXFMY3FBN21xWDdlRmViNGgyS0VlL0l0QnVqdEVZK1hKVFZ5Q2RpUVQvMVVFOCtiZWF4VWg1dkVjWUFKNHpoQVNicEZOallpaGtiZHdpaWpnbm9RaEtMRlo0RkJWZkhoTjBBc29GSnV6RVdhdHdWQmlhRVJmQmd1akFZNmE0OG1JbmhsamhNdVdhMVh6SWU4OGdqaTVPVG04WmtIaDArMG5WKytPTC9yZ3ZMNlA1VHNPOVkveS9OZGNBczNycitYOXlOQ3ZZdGN6SlQ1bVBHWjdxd3h3dWNQWXljWXRUYmNBSHdTcHFVSzRVdHdKUjZ2ekVjSHpmM0Y2dGJPM3gvWGVjbE50VjQrOWVNdCsvbnNtNmNZS1YwaU1lTEZCa3IwZTdSNGtiWHduYTdWODF0ZzBlUk1PNXdQQlpPUnBKSlR6NWwwZkkwT1B4bkRmZ1JOenM3SEg1L1h5NnIxMk5yeFkwc1B0VitpblFxRWk0V1VvUHB3ZG8wUEduSW1PY1pZNTRrelBPZ2FrMVRSUTR4QzVvTDFiN21KV0Y5SFN6SzBuWkcwRU9NUW03S0UyenhtZmFEUWNpbUFFTzltVUFOUjFzampqVmFCd0hIdmVxdU5DREVjV1NUWWYzNFBVWnFHdDVuN2VlN3hHVEdYRThiYzhXc0JMdERoQnJpZ0t5d1cxWkFrOEpwckcybkdSeEF1bytPREd3WjNNTDdHTlFtczhOa0xYT2gzSG9JbmwxVWR6VE9oc2RSdTZFMzMrRG1LYXdONjZuUnp2OURRbGJVUlcyR1JxcGR5OWRqM3B4czJSUndhK01reGh5UEdYT0UzWFZuZ2RWNVU2enp2aVNUYmdhZTU0QVZXUndoUnM2cFhWRVJiZ3NIU0sxdXVGMUZ6YkVYSmpXM09ldmFhSWg1VmlrWDUzNVlZOTZXSWV0cXAxWlNuY21rOUs2RWVveWhvVUM4S2Q2Z2JyVjZPcG1nYUFnODNEQXhJNG9xQ2cxNlp5MjJWZ1k3QVdQTC9hQXQzS1YyOW9QdW9tZTBpYm9sUXhSaWtoUVRVRW1XYXdxYzV1TnZTRy9MNkVPMU5MZDJUK0RLSElNRHBlR0I4bUFaU0pySjVDMGd1RFB5Smpsdmw0cGFoOGRqNWFFNkhiN1FMMXd5aXUyTktNbkptZzZmbkU1dUZ0WFdZek5lNGVza1RVYklZZFdaWUpXdGFjeEtSWmV4QlhNSWVsZ3hwQlllOHJHZ1RTMDF6ZzAwQUhZVHo5WC9lbDN0eW1ZRyt6TWoyWkZZeE9QQy9BZWFRK3NjTkNOZnhXZlVXV2pMSHZYNjREUFJLTTFCQ2xFNXN0OWJqa1F6MjhMWGhBNXRuVXFwaHl0REI2WXp5WWs5ZzlPbkE1YlJucm5VWkY4dzJEZVptajl4VXJEM1ZMcURscEdPaEhlMlordkVINXlidldtdG1KczVQRkk2T0oybTA2WHR0L1pjL0VGNGFEYWJuUjBLbjF0ZFBhZkp0NkltNjMrRHkzcmcxOTlTL1lWOHJOTWt5WDR3Q24wczNyMWx2RFRNSEhVWVZ1bGgzamVLM3JlbStMZWxOZjdkWHh2Y0poQnVhUTJFUndZSEJGb3BEMHdNVHZRVnMrbHcwT1BxN3VxdzBvU1FzQmsrUm83MzV3eThnNEQzNzZtZVFaaW5DWGVURmdzYVpMNDNhc2FMaEhrS21sQzN0cUkrMHZ4SW13VllXeGNRRzRBRkRKUUh5aU9sNGFIbUpUQ0RSZVQ0aXhINFc1b01rWWRWUjI4eDZRQXRLa1JsSVVnbFdjOHdRQU1jdEVpQ0twTGhZVklVQVFqSFRtVjlYVUdmTVpZRnIvRUJzdm40ZFF3K29FRVZpL2k5TG1lWDNaU1cwbzV1cStJdjBsU2xKTDZTdklQeTR2YnlyaXZKUFJCT2Zmcmx2NytpL0FOamo1L1c5aGp2cU1mZ2c4ZFZSd3QzY2xxaFUxZ3huMnk3dTIwWWM3QisrQ3RnVFg2dnRtVk5TcFkyZmlZY0ZmNkRsTWpxSnp2dExHV0NaN2E0dFRaWDUxZ1JNWWFobU96d0c3L1dhcXhyOHNQV1Y4em4wc2xNQVlQQnRENU1sbXNLcDZIUVlMRTBqRW56YklST2dhNkhrdk16VTlmc0hqMlVMVVIzNUV2YjhrUEw1WUhLYkdYWDVNNTlDM2ZkZU9KMitEdTkzZVB2OFBzV3l0c1B4Sk9ENGZCSU1WWHNEamlITW4zRCtZSEMwT1RwSTFXSi9zY2RiejYrVnBybzBmcU9ZRlhXdjRMK0g4SjZ4NkJOa0dUS2cydEFiMWlZQ1RsUWxrMG5nWFNZQzZBM3BZUHhJUXlqdS9TMklZYkszaEpSM3owMXRmaU9kOVJuakV3eXpmeERUYUYxZ2RXSWYwZDhONUZKa0N5cDg2aHBCNnlBRWFyYWhGNHdZekVydWNCTG5BMmM5RVo1WUdVUUphZ0VmUjZubzdNRHpGbVp5TmpqeFY5MDVSUTRBejRSRlBKbTNMNTg3T2pXVzlkdS9mUmlhRzFZUjAvMEhUeDQ5OTB2ZjEvNGN2V3ZlL3JPN0VRVXAxY1ppc0RIMDRDams4bXFqM0o5L1dHdGNsckFtK1llVm1WaXFqTXJXcG82Ykd4c2ZBMmV0RE01L1ZHdHB3TWVrcWFlRGdEdVhEMmdUWG82L0EzMllERHd3WjRPQ0d0TUxmT2VEdGpPUVVUOTZSNkN5ZXRTSGNEMmJSMFE1ci9BQUg1V1A2cjFkVGdCdjZtb0k2eXBneUNlNUpud2NoMndTM1YyWU9kZnl3Y0NTK05CWHJPK1NVYVFIYzRaNzlOamxtbUgwQ0Z6bjlER3MrejUyanI5RzVobnczcHU4L1Z4bkV6TkMyeHU3Y0J3QVZsMGovQWxzTU1mWkwwZEhpTGZnZzhPcXZzVFZCSGlZQTBJS3phVFJVVDhKRmFVYWJZS09vYXJySGRiQjJXZGRxSVJwd01STHVRenFVaHZ0SmV2dng1OXUyYjdiL3dielBBeTAyMC9xdlY0dUk3WDNMTWVEMmczWHc1MVllTS9OZ0xrb3l6WEtVbHV3aTVCZ3NuTDdKWU9HS1YxZVlqTGRYbFBrdVRUWEhDYVI0N0p5Z2pyS1NHZWFUZlN4Tk1ra29sNERCMFk3Wk9qWE8xMFBrZkpTTlJxY3RFNjZ4SzNMbjZneVIvTDByaUFQczhBTG1IbXYveW8xaC9pUnZoZ216clYxQjlDQkpHRWZTRTB6YlNSQzl0MWlNQXpBdnZOejhqSDZzN0lsTG9WbldzQ2kvRmltVHgyaDRESDhCUXpmMStUZWE5MWlYQ25YR21GOTZSYXJyNkFPVjRBOXkxYWZkU2JZWHdKTGlQRnhQSzlzUHgrcWRaVXdiY3FDZlc5VkZtZkNJK3MrV0swbkRFZ1NFc3ZjTittdmNBOXpRbGo5UGx2YXVsaUFwZFY0cnNBQVFVaHNyY2RZTkkzMXVkNTlTUVNrOG1rbUJRVzdROFVYU1VsNVFJNStmSFRiNS90V0JUZmRlZkwzeFcrZkhFVTFub0ludDdCZkZkdjdVSzVsK29qMk1rYnRHU0tLWVFzT083VnRzSGhkSXA2NzR0MDlRWHlma2FqdHpKNW1mNGx3YzdESnBZSngvcU9uRzU4U0p0TE5lWkNYZUh1NnRmUjk0STYrUkllZUh6d25DNFh1Ynh4bXZqNTVyMklhVGM4YnlOQjFXZXpndnpGMUVZZ25KWXI1MmU1Y2hWTXQvTW9jQmtvbGhPTHg0NHRucUNESzNSblYvVmJTOHZMMVhmRFAxaWRDOHViUk41NUc1ZjN3NFNjLzZUTFZKZUZGaWV5UkNTWkdKNUgzWUpVakpTME5McklKV1loUzZ5WldIMSttbUxrcHpsQWhQcThIdXFtd0dVcHAxbXZ0V0U0UEdQZ2tMUVQ4aEhWaGgzQ0dDS0Noa2hTUjRUZGlRMm9tSFZVdUJzbXErT2pqMnpFeUJpdHBuQ0FYbkN6eWFoMTBENDlIdURya0FjTGtIMDYrb1p2Q004SjJOMGEvbmhPM2d1Z2pqZFNNY2g3bFoxdVM3K28vdUVyb1J5cDBlNVRCdTFDRGtMdVYxMUphcGE4VkpFWkN1SktncUxibGNXYmpVNm1ablBOMDZ0alpERXdLaERkWjFZYjE0aWN4VUFPYUZNc1pOT3hTTkRmUWh1V1M4ajQ2KzJjdjdheG01WklKakRLaVJIaTBCSU01Ym9FUTY4SFF4eWd0c2E5Y2V4b2tDclc0RDFyd0l1RW1hVHJMV2JTSnRPU2d0V0tCRHR1dEFXWlRIZzloVnlpUDltdmcrV080alo0QmdIdWRuVW15YW9XbWZNZFVhNDdBZ3k0VWdjOEFjQjE1N3NPM21MVTdIRDRUeHZ3WTA3bWViZktGaEZkN2dwdEJHeXVBOXpmaDNpUERQZU45WTl4MzdzTzNvYmcwVDc3dWZoMittT1FKMzFrSEhzcWdnVXJ4d0orbG5jSHV5MklpbkRXWWhVdzJJLzdIRnUxbVlFclRDZnhEUnR4MDlwQWZ6NVhMdldQRDR3WGUzSjkrYjUwSnVsSnB6c3d3VXd6cWpZTDU2TkxJS001UHBvelBtZXVpMGF2blI2b2MzbGdESC9teGxqMC9BeG1nUXF2bStRZWtHcWxQaDhVWDh0U0g3aWZyWXpONXVhT3ZzUkM5L2NiR2FMdDlzei9VNEw5OTRpMlY4MDBsWnMzSzUwQURxdm5CQTFtcUE1bUlrOTQxYklrbVk1ajN2Qm11K1QxNU5uVzExalcwc2hianhrd3cyR2lWYkN5NlBQWlY0SWk0ZnZOOG5OREpFTUd5SnQ1Ym9nTGxDVFMxeHVQZFlIWU5BV3B3SHQ2TlAxVzVEMDk4SUdBNFF0RVBrWjlnM1Y1aWdoTWhhcDl4c3FrdEJGNlhhZzdseVVrTzVBYlNHTmZoRkRlbFdlNXM1dDE1MUFxWUJHNm1QbnQ0cWFnNlBXT1QwU1R5Q2Y1SFpIa0pQd2RzNE56ODVHRTRuTDhvMnNvUEgvc3cvUEgzZmhYYVRGNXVJU3M0ZlAyTENZUGpXQzJzTjliK0dWcXlrODkzWTdycXkrZDM1MmFDbFQvcmR0UmY5WStaZEE3RkdjeGdYNnFtSktzY3JNUEt6ZjFqdTJLd2l5dHpmZTFVaDRlUlBuV3NxOG9lNjlodlBJb2wyMy9STWlidEV4WUt5V1N3MlppUnpERS9rbjFmNjdyUldNTk1yQ1dGaXZyYWJFcEdJSHlSeHZSbUNNcjZ6bXkzYUNZZU53dTZxVE9UTXFwMTk3MUFFWkgySjNLY1V0K2hwRFA4b203M1ZReTFmQkROdEYvUmZWZmFUZ21kQnoxR0hFTlM2MDBMMVFMSmpOVTlZR055T3FENjRMSnZOaXZ6U0M0YnIwdUY2VllDODd1UEw0d0MrOGprb083ZG9tK2FLd3IvV3RDN3RCb3pwR25LMWFlZmR5RzVvRmF0NFVXYWtmMHoxNFJuVmwrTWVPQmQzSWV1RWl3SHNybzd0Q3dnKzNTamgzT290SGp3WUQzakFFditiZUUzS3gyOU5SMUhlRVVUK3VnRldOcldvR0gxRVM3SGlXeHh2VGRMcTFwbEx1b3Q2NWdQUnRZM3ZRazNsSThiM29RMUlFQjV1N2JwQ2VJQmhhN25PTEMwcG0wSTVRcHByQjd3eFVsVlN1YnRnTzVSS3IxcWFYV3FQeklvVXNtWDAvc2w3WTBCZWZGVEp1OURQNHR5OHZvcWVzQ3dxaUozVEEwVGFBZFFWdW9xZldhUUhvYXNOUG55Q1c2Z0d6R0lUeGYvSWh3TjRtaDdSaWdaaEtrRnJPd1lyVUk0aEtZaWdvbFprck9ZblVneitKbHZsWExTV0t4eEMxcjBYQUtxODc0aXhaZ1UxZ2d1dWJad3ErbU5IS1dTUDd3dzNXcDVJK1diMmU1NUxlWDc2a2xrd3NNcjllSTNYQTdoZkMrOUZDSjhnNi9WZ3VGeFMzaG1Bc21xcmU2OHhrTmZlTXlUMmpIZm9LUklxMG9LWEdUckhiYXN4Ylk4b0dtMUhhUmRuMittbXlmM3g0SEhzYmMrbjZ5VTEzQjNQcGVweUNaRXRSc2lWUEZiT0orUU9CaGkxbTJnSjVMRkxOeVpwT2MrMkloazNaNm1EK1FVYTR0aXB1MnMybk14NWRiR05hZkw3U2s2RGVsanh5M2JtRjhGQWMrZ2pVQkg3Mkw4OUdyQ1hvMm5iQTZGNnNjd1BkM0xXbHRsRFpaak1QSktjNTZFckJhbTNHajN2Y2MxdnU2UkZidnk4cTV1TFFKczVjODhkdFJqdy9HV1JGcWdMMTdBbk1qaFB2YkRjTHNJRmRUcVUwR1h3amxNeXArTjZtMDBTdCtXeXB0dmlBKzBsWDljcXErMXVabDRiYTZXaHVnRTZ0dFlHZjUzVnd1RDZKZGF6ZlhWVG5FRzR4V3BWM0pRN3J0a0piNmgzcnJ6T0ZLNjNZdHgrRlpBNGRJQnlFM3FaMGFFbkhRMEUyNldSWm1iNURCRGhKdDhZaTNmTnlDZ3dmbXAwRGpwRGVwNDJGcHdLTkdpeURnY1NmYTE5aUJBVXRVZGZ1YUdjTndhbUc5TEJPakhTclpUUWExSU5ScU13TktobDNJY1hyYXdDa21FUExheHYxSnNEZlRnSlRBaUswYjdjMVdiREx0eDdRZ0UwRVRpdEo2ODBsSHFjT3dwWnZwNVA5blFtNXB3b2xvYStmenRkMnNUUHN4clR2R0NPVDNBT3MwN0ppT2kyQ3R3eVhoSStTR1JseGlDRjg2enMyY3R0Ukp0UnZSaWdlbFliWkpOUTYyTnRIa01RT1BNUERPMlVZOHd1emxON0RpczV2eGJ0UEhWMDRKckZFSzBKL1Q1OEcyL1FpZnpaMzJnQkRIYW00cnl3ZEFoOTl5cVBacnNlN1htdFlYUnJ0TnF4TVVxVGE3a1NEQXdRYTA3SURtb2R3YWF2aU1BZEI2Rk1hWnZtckZra3RQSm9NM1dHS1R4Ti82UmprVlI0bitmYk1YbVVXUWxuaVpWSk1UV2F1UjBvdW1qSDFoZWIxOFgrS3dMMjlzM0pkTTQydHpxQ0tkYThzbGhjM0gvVmZPMGFjTTNFSmREVDRwaG1TTFQ2clIxN1Fwb3B1TWE4ZlVEVDZwZXRuRDZzUFkyZnBOZmpmY3hYUXhvd05QdmN4dkxoc3ptdkFZY0o0MjRLRFdOcTFPNkhCWSt4MURORFVDdW1RUG5tYjgvQVBNcHFqckVNVEVpOUlHYm1zVG5qYndnZ2VZbjZTK0E0KzVVYWkzQUcxc3dnTXdXZDBhZy9rNHA2R2I0ZGlGbmVOSko2dGdhN0J2VzhyWkhNNlJGTGJoMFhCc2hoZjhFYytKQnQyN0JsUGsrbmZORTljQ0ZTUUozRGdPTjhJMk44Sisyb0FkK3k3ejdkWGp5bHFKR1g2NEZyREk5ZlU4aitCck1ySVpkLzhYT0gzcmFhRmhMZFBOMEFicDUwS3dXdXlGMWVreG1PL2w5SVdwbXJyYU5Qb0c2c3YzTm12S1k4Qjl4b0NiL0NZaHIxTTdHenZ5YkdyVDEwK3lxVTNmWmhDWTlKZm80Y054ZXRyQUticUg3WDF0cmZWcHlXMVh1bmtQbndUZFNrOEovNXZsLzc1MytZa2s5bGRwYk9RRGpCK2tBSHNsMVBZVEUzeXl6aDhNRzZVQUVuYjJrWWhSTmpMR2JsdDlrMnZEWUFtTm85cjMrTEhVeFIrYkNrazhMVVVqSDUxYTI3c2pQQm9ZR2d5TkozMDlDOG1GblpQQnJhOHFGZUtqWHU5SXJEaEN0NnJENVNtN2ZhalkyOTA5NEhidW1INDU3L2U5T3BaeHUrWTc3Vm1lRjUybVcranZBVjJ3eGo4TXR4OUlBWkdlMFp0bEFLYnBiRDV0c2dTTHJxYksvb3p1NUFXTTB0SHlmTDR3UHhLTmpzd1g4dlBsS0YxWUc2dXNybGJHMW1pMXNGaU9Sc3VMaGNJQy9sd29iTjI3WjJMcm5yMUFuRFRzeWV1RXo1RUk5Z1dzOWVYUlh2Umd3b0FsV2RmajU0VHVObnJ6UkdoRWtvRldtL1RtUWF5K0Y2bjRzN0VWd0laaGxlL1pHY2w1dDBUR1ZsZnBxM3orbm1nTVVHWW94Y085dnNEdXJWdDJrMXBmSHEwMi8zNnN6WGRRclRZZlU4VDlMYlg1b2xHWTExeTd6LzJsZFYyUFdtdjNXNGFzcytZVGV2Y2VWejZsS0lIV3RQSFNmN1o5ejFUVmIyU0pNLy9vcjNnK0dpaG1UTFlzRXZLa2FtRlorclUxWjR4VVpyd1JtZ2xnYmlSQVliUEI1bFpxOURXT2JTU051UTFwM0kzcC9hNTh1dlplUnI2V1o0MjFSTktFUEtGMkcydlJVc0MxVFArNlRQQkxMaWZUYm1DYnBSUnE0eTYvREg4NmhVb0pKcGpYTFVYcnhkeThKMEZZeDErb2RzemQxdFlpYVB1U3E4dmladFZJVFV1eE5DNmx1UGx3Uyt1Q0JwcEhOeTdMMG1aWndSUXNTMDhVcjF1WXJXbVBuamJXRmdzUzh0a1dmc3MyWm9zM0w4dmF1S3llVFVkYlcxZlYzelM0Y1ZIV05vdUtZMW82cGZWcDZYVkxzN2ZmTS8vTGhQeXYxblhwMmVQdDE5WEVlVDJiam03RGZ2MU5nNitBQjlsbXNmenh6WGp3TVdNOVllREIzMjlaVDZJdVUvMXloNmgxWVB0RHBJLzdyeXhBbCtNQndRMXlQRWRHeUVzY1ljOUFQd2h6V1hGVExEa1RTUlE3cm1GaHR2WjcvWGZpaWh1c0g5MW9UQUwvRzZ2RHlLbFpFclJtS3l4ZWxERGhPaE1za01NeVlNNjBmOEFnUjZwMW1Kbm4xK05nblJnNWZSUWpCUTRsYlVkaUN6RW5JYVdoM2g3c2JaTEp1ckFtSnRUdTBtaGprRjc2SG1teVRLdC90dm0xMG1TbzF0VWk2ZnlFTnFyR1QvZ3V1SysyOEZNUFVZakZyRmpPZFZDekRVYVo1WE9YT2Z2OWwzeWl6ZmtmYnZQQWY2c00rSlN4eGxDZWtQK0R1ZDBXT1UzTnV1d1dWd2FvZmduaGVubUt1Y1hDUE9DWGxYWDlsM3hpay9VMlAzRDU5Zm9wSGErTURQY1ZVVDl0Rk9NaXlXOWt3VkRwSWx2SlBEbEE5cXQ3dXFnc2VNeUNJby9IQlZFcFVRdStCcFlTUWFiQ09aaGVOQ2tpRmxkYnpDYkxXWjF2WTZ1NjVaNlExdmJ0V2xuYU1hZE9wU3VGOUVnYTYrUmNkZGtHUm8rZldoUlpidXkvZzN5YzFiN1hLNlc4dHdDTE5MR0habUtqaTRYaVNsZ1p6U2syeGVMdDlDWXNUamY4c3RnZDdRekVvNUZQVGM2KzlZNXJieHN0eGVLRCtZRnh1cmd5T3JxME5GcFpydjd6NnR6QmMvSFlIOHNkY2pKTHQyUm5oaUt4WUdHQTBubFJjRHU5bFNqOEptd3lLVkczeTAydDRrai85ajFUWStIZWJtc2hIQjZ5K3ZhUGxCY1h5K1dGaGVydnBnc0RlYThYN0FwcVRiR3p3ZW41VmVDYmJxNjNpQnZrQnZXNmJxQ3Exd0pVM1pJQXFvNHdxbDU5K3VnUmszV3BnMW9KR0hPMmM2K0l5b2ZXVHg1ZnYrYlFOZnQzcnk3UGI5ODJ6YWlkc1J2OWVUa2VmMkhnRVFROGJsVnZPZ1FUdGVJaXJkZzdCS3VOMnF5czhyWTlGamFiZTdVdEtpQ3lqcThmUDNiMHlPRkdaRG81TWlhT0M2c3ptQ2JMNURBNXJoNXhVYk1wMENGWXpKTnBRYkpVcUUxbVhNWXJCMEJTbWpGWGtuZTJ3R2lrelNyYnNQcEE3eitxbFd3bmxMV0QrM2F0TFMzTXpmQXBIZDBkU3BTVkR0RC9UM2lPOWl4dUwxZS85OS9FZWNLcFQxY2ovMTNNWit6NW54dDdIcjF6ZzF5cm5tbkhlNXZ0TWpDajFYWnk4NzArdEg3aTJQclZoNjV1WlR2TkgrVVN2ayt5NUFHV24vd2d2UW1lLzRIS091dGJxV0wwNmV5cGRkaTA2ZlVQWWEzWlpvZFZGRm5LR3EzdjJwbEhoQlZBK0FyR2UxN2hERmNPSEMvbllDWVRER1R5R2RDSytTdHJlYjlQaDczbU94VHJhUEJXUm9QZlZ6dkNBWHlwaXJXdVcybWtmWjlScFdIaG9YYmRScFdHdFY0R3ppVkJzRGQ4T0xVbDhMaWhTSkliTHdrUEM4OHdYV3NidnZsZ2Ftc3hrMHhFUTUwbUsrWmhnQm0vMlBaRk4rT1YwbEF4aTIyOE1tQzQ1d3kxcEpLdEpXRmpNZ0NjU2xhcTcvVmlTVWxsVk1zd0U0M3VNWW9zQ3cvM2hTZGp4VmZOWEh2MzlLSXJGVG01c0gyOU1qNWNPRlVLSkt4ejlwNVlYSzN1RHNUR001bHlwcWR5K1BEaThNSGsrRTI5dnRHQmZOazdGT3dmdkdGOTRsRGUxcnVZMzNGczkvVFFXakxhZjdJL2YyTEVwdDdjSHk3Ujc4Ykdzd252YURJek5GNjlZV29aVHYyTkpYdE1aUkdCaDRRRmVrcjRIRkFpOXFSODlaenF4dGRGVUhTQjNWNVhiZjJrVE9aY3ZsVHVKemZQdjEzNDNKMTM4aHplSitIWis5aXpBZlpzcDVhOVRHOTNkQXRBR0h5S2xwUVVUWngrK3l3OGhoL2ZJTXlpVHhEa1hJNDlFOGJwS0M4ZXdWUnNOaTByQ3pIcEVIaHBDRDNONjBDRVdTejlZUE1mRk9ib3g0UlBFUjhaWTdENjdCU2R5L2hPeFE3S0VvbGgvK0c4WXliVXV2WTZSU3JzVG1WU3JFa2VXMVNPaDI5TE5YY01iTTVESlhzcDdjMmxFMTNkYm12SlBwVDBnS2JZN2ZJSmM5WlMyZVYxaGRQOFo0VFQ0WTNDYWZxSThCalFRVnNUMHBEUUE2amI0S3MzS0w1ZHNJR1cxSk1vMDBlcVB4SWVHeG5oTU00Q1hYNVhlSmJZeVFDRGtiWlowYWUwSkhCUGtsRHZTVExMeEU3dG91TGxzR3JKakJWZ01ybFFzUTNiOTAxTTd1c3MyVWFGV3daN083Yk96bTd0NkJ0Zzh4d1Yxc2xmQ0U4VG00NHJlM1BKT2l1RXdya0l3T2NWQlRyOCtxcUN0M2tpRVE5OENlc1JyemVDWDJpdjNDZXMwL2N5bUQ1U1lsRHpJcVBBT3I1S0FKcy9ZL3M2c2h0YnVyb2NIVDY3cjlaSnRubUdVdDNmUDRtenVhUFIzOVorMW1hdHpZN3p2MXVZb0xlTFFUYi9PSnUvWDY4UXhUSWRJcXhMckZEVWhMSmhVeXhvM2N5NXVrUlFLZzlzMnpiUVB6UFRIOGtYd3RGOFhwaUFmNnBxLzhDMmZDRVd5ZWNqc1FMSDQyWmhCMzJKblFlRlpCZ2VRYjU5QjlqMkhVZWkwSjM0Vmh1RC9lQjBaT0RyeFgxdjMwNzc5ejhLcCtTdXUrN2k1MlFlZmR6MTUwU3ZWdERPV1BNNWNXRytZaXIzQjBlT1RPSXhlVVk3SmpEOGkvU1hOQ0I4R2ZCeXFkMzZlNmE5ZEkyZlVzVGgyWlhBbVBEbC93dGplNnN2a0k5cy9ENk05YXNld3BEWDNOV0lPbnZBQnc4Y0JkM2d3S2ZobHgvYmNOQ0gyR3RJcjJWNFdtdnZ4bGwrd3NVc1M1TW9pS1piQ1MraE9WZkhiNGpiYnZRc3NoSENQWnNOV2Y5VDlnWWRiSFdJQzIzekZoMU0xS1FQTmIwOXA2ZjV4VG40eWh3RStMc2JBWG9WNlNZdVVtUTR4NjJNdGk0TDY5U0x4NDBZcHkyVDBTVlp1NkFvbld5d004ZTMxZHVTK1VXdDFtRjg0NWZrZDhnWlh1c2dORFJzcngyMXluQk5QN3VSRitMRXpzUzl2bmpjNTQxek9LR04wK1REckZqRjBTSnJjZThQck8wZVgvcWUvazVBbUpQK0JQU2pITXZueCs5djVlOHpGWVdUZUI0YWU4ZGo3U1IvWjN4RFRSZHh3NXgvUUg5Q2NnREJUTjhLbWxiK1Y3eWFEcmFLQ2lMV3JOM0h0Z3FoeGJDckQwWkhPQkNKOS9vRFhFRHFuQ0VNRndicFd4d24rcWY4ZmExbWt5TElFcXZsd3Y3V2dFNHdnQWh4cGFNZUxhMFpqOERYQi9KU0pGMzR0aU1UMWRsNjFWaGdYRmlUVElUWUxLWXVxWXVKWHhuRWIwVXNpVXJkVWQ5dFdiYUVlVlZVN0ZtQlZNblhZMTc4cHpmRzV0bXk4Ukw1WGVHTGJKN3p5MDlrV1c5N2ZZWndReTJiMXVDdS9tTjJkTmdZVnJkdVlsS1JuSzZOWUtGM1p4czA4UVZDOVN6eFVCMmE5S1VxWU5hSVozTGpsL1Fyd3VkQk15bGdETlBsWkVGMGdoRVJnajNiK0x1RWVSMGY4LzNFVFd1eGFDWVZMY1FLbVlJYjMyTkFRUlB4cGJLZ3d1aEtpcExUazV0a3NRNFhlamllREl2VHBuUi9UeUc1YTN4Z1Qzd3NmK3RNNzNJbE52Uy92TkVvb2tYUCt3TlRmVk43a3JGWU9kay8xZCtiSFo4TTlxdVowbkwxU3cxNGx6ZCtUZjlCK0FMRCt3MmZ4RGNJc0RjM1cvUTMvakJjdzFvdUxxemlGRzkxb0wyMGNkTWhMTlorS1FCQTlzNm05YnRnM2JtU0Y3UzJ4cE9PanFqUitqdnF3NWRmL3I3TmxrOHJkY3NIWHVnVEZQS253Z3ZhbWRaVkwwMHlnMkI3SFp4cFFma2VPOU5iWU96bmhSZmc1T1JKVFBoUW94UndDRWEvSUlBSnlzY0w3Qjd5cUU1MjdWeEF1WE83ZnZjZ1pKOEcvV28rdy9lTU9lalY4R3dPNW5oYStKQXhGOEJoNmdGN3FSVENjWmlNMkxFbWwxQTJZSy9qVnF6NEdMb0FzZ3ZoL2k2ejJIRHNabEFwQ2NOYVA4alc0TnRFSjBWOTlMcksyS3J3QXFLTzY0Wm42SnkyN3FRYWswUlc0Y2RYRHRZQXdTSTZFRFBHRVFNQUpRM0lpNVZ4QmdoQXdSMElDQnltenhPSnhOVUlWc0ZSekNOc2FFTWtFY21KU0ZEc2kxdWhCLy91Vzd1Ky9XMzYvSXUvK05sTGZGOUg0ZHVaT2hqYW01Sjlxd0xWbThyck1GaUhYV1djZ2VBQWdGNkFnN0FWYzRib0dKT1ZZK1E3dkNiWFpnWjFDakZpeTZNSWtDR2x3TVdyZENnZFZvejd5aTVlU1NzZ0hxQWxJeDQyZkpwMS9PVnQ3bG10STRPQkwycVhRWnV3eVRhTG1hR0Y1RWt3dFBoMzZtZllWWjh6a09TSTBvMy9zMUdpdnljOHhYczFzWmZFNFFJRHRMNVhrMEpMZEpDK2JiRjY4N1BpbTErK2c5R251RkVTRlBZYzEwbFlWRHhBTkoxRVNsSDRlS1Y2OHdvOHdjYmZzakZNL3VReTgvZ2NKY2N0czM4bFB2ank3ZXlaZVhLUmR0Rm5ZT1d4eStpNWxiclQvWWY1aVlrOGZGMGNMeGEzYkNrV3g5bCtUSkR2a2cvVFBld21GY20vNDY2MnF1WUM1YmVVeUhzVFRKTC9vQS9TOFV2cFVxNkVKekZKVjZ0L1RNZW5HYzc0elBldjVKbi9XZDFYOTR4d3h4VThJMnk1K0V6ZE0rS1pLM2hHekwvOHQrd1pwQUhOQWcwZUJmN2FEclp5V3dxSWdrVVI3S0pkMVB1cFRkS3RRSU03NFprZDhFeTd1VFRCcFkzOVBoczdmeVZqWWMwNGR1Rkt4c0phY2V6aXBjZXkva01aZWd6dWV6dVIvOWdtMHVGaVpZUmRBK2hDQXp0LytYVzNaaytkUDM4cWUrdnJmdjc0anhkS0U5OTQ4NXUvTVRFOC95SStXOXBJMHgxd2x4blBadHpzQ2tXZkdwcG1Pelo5bUpMdEd3VTZDdnl0TUY0MVhqNk5Eb2ZqMnNuUVpMZkUzNE5ab3FNdnZ2aUhmL2czNHFNVEwzK1h5NXdTd0VnYk1MUW5lWUkvUW9QRFlzaC8xZ3pDa1NvaENPR3BsMitZRUVNY1JnK3MveXF3T3dZeEN3ejdrNmFwS1BXRG9xZUE4V1FHc2trcnFLWVRiQ0luU2JYTFZVOUZ6T1FTdVV5S05YWlhaSyt2ZG9lQ1ZnR2FlaGx1MVZ3dVcwdDRBSlhENTBYdlNMWGZsZXp2Q25kM2VqS3V3a1JjNk01N0M2V2xwVkxCbSs4VzRoTUZWOGJUMlIzdTZrKzYrbDI5SStYaS9qdkxjMVNTeDh4S3JMelljMlo4ZFhKMS9FelBZam1tbU1ka2lXNGZ1Yk55dUxQN01LNXBaQ05MVDhDK3NEWGhPK3NWa09uOVlHbWtxU1NtV0hZTXJrZ1N4TE9rdnR4ZWo1SFYxZ1FxUWpaWDA0dEFVL0NXWURPU3VBanViRVdyWkJTWGlMNmR0N3pDTmRISHJuQlJsRXpSL2ZUTnNOY09yQnBuQ1VuWUkwS1dUTlRPRlQvdE5XRmt6ZS9FdzB4emNOOHJ1VXF1NHN1VmxJcFA4ZEh6TndzandzMlIyMjhOWDA5SDZQbm9xKzZnNzE1ODhNSEZ2c1dGM3ZrMzNidWpkMkZSNHl2NGRnL01aU05hWnlhLzFrSkRNMnFwMW9nTEhYQmUrRGQ4SUtGdm01ZitjOThiYTdwbEl6YjJPbFRlZEF2TEQwcXMvT0JURHp5ZzNuOC8vZlQ0Rjc4NFh0M2VNS2VMbk9Kekp1RitnNzJ6OEhZNy9PMTE0bkhlbHNKS0xSYVBCWk5VNE44eWIzSFlORndid2dLTzJPZmZvZit4S2JGaXlTZ2lLUmxGSklBVHcrcisrNzg0L2lsRURMNEJsK3pZK0N1d3FwNEIvT2F4czBVY3BocEsrT0JXRmRIb0ZWZTBGOEhxZVhHZzRJT09HYzRrbWFPd2JUT1owY3JteFVSZWI0NTVFTFhCbWl1ZmZ1YlFVcy9CUWlRL0grc2ZTV2F2WFppc0RBYUNoNWZ5QjR1Ui9FSzB2NXpPbkYyY3JBd0ZncmNKc3RCYjd1bTlFWCtPRlBxdW1sd08rTXBlZjA4bWtyT25BOXRHKzdmWlhTT0p5Wldncit6VGZ6c0R2KzEwbGE0Rk9zcUQ2Vml4T3dOL2t3WXo4RGYrUG5iWUcyRVk5cWFUT0VrSXp4UW1zTXNpdXRuSk9Zenlhc0pMcjY1MnU3cTZRTnZ3dUVMdVVKZXp5K25vaGtjN3dhWlBkSUFzU2ppNFZWRks0T3VpSE5qWU1RWE13WDB2RTZOSGI3L3RLTzJidWVXV1cxNDdPanE5Y3lkTnZPclFrVnN2enRGRTlkdjBCSTFVLzVsR2RrNXZXOE03alI2ajN3YThESitKUkxuYWhRb21ab1BxUGhPSDRUTnhsVndwVVp4OFVuMXk1bTF2ZzhlUFZYK0hocXYvb3ZWN3BYMEM2ZzhoTXNIZ0RabEJEbnJaTzBrVktpNTVLTnduWEJhZWEzVWJaQXdmSS9VMVZCenpkdUZhYmh5VmwvMGhleVF0alNucWtLc1lXZzRFN2VHVVBHNkdmeFhvNytjN3JQMTl5dlpWZTFmZWJ1M3J4NytCenJXeGNRZjk4c1lUcjhEZktLRy84Y3ZWOHE3eGNmaDBoK0FrYjJONmNsUU4xZDJGVE0ydWY5UUZvbUszYmRFcU9MLzFMYmhINFRrYWhlZXk5Q2pUU1k5aXZUNzZBaHE4WEpyYXZiTnRmeFF5dG5HejhBVkJKYk5rTDdsT1BXdWpWbUdOaXRadFlLVm1zWlo0SllmNUN3U2pCNEwxSG14N1J4VVRlb1NzSXJXZXMxRFJiQk9JSkpMcmlDVEwwcnBXZ1NYSm9NN3QyYld3WTNxeVhDb1cwc21nMzlsdDc3QW9aSmJPZG1ERDNHUjlWYS9NRHlENmVyRTVib1A3dDl5UUs0aEhUc3RjekRMZlB1WWFuTnl5TTlpN05SRWVja3FWakJLT0Q4MzJMSnpaTW5uZGFsL2Z6aHUyRmZla0hma2pRNHR2T0R3eWN1aXVoZG5iOWcwRmU2ZlNzZjRPWC9uNmNvOG5oOG1aYm50L3FIZTZkRUROcUlOaHR6UHcyWFR1NVB6NHlmbjg4SUhiNTJadTNkUHZjUmU4dnZLeE55N3ZmT0QwMk1DZVc3YjE3eHlQZTExZTMzc0hKNXdPcTg5K25kZS94UHJWL2dMbytRWFlEYnpzSHlCL3AvbzZnS1k3Z2FZelFOTWNvMmtlYWNwVFFnYnFTV2d5c2RCaVdJdXNXNjIxZGx4NlhWdUkreno2MnUxQTArTjFENm1EeGc1ZThybmFJK3VzNi9UZTNZdno2dFRvQ0g4eG04dlJpVzFpNW9TNURxMEhzd2pyL1pud1hiakxYU1JIdHBONXh2OFRVNU5EZ3laWll0Y2VHRWNDNjRndW0xZzRWUkV4c3cxdUpYRmQ2L3Nnd3ZGTVovTHdKNDF2RjJkeW9DVkJ0SjQzcHVEZlRTbWFkUXd6Vmo3eStvV0ZOeHdwbDQrOFlXSGg5VWZLd2ozOXUyNmNtcnhoNThEQXpoc21wMjdjMVY4ZENmVlBwN1B6Z1pSckpEaThmZnR3YU5DYkRHN1BwcWY3US9UWXluMG54OFpPWEZoWnVYQmliT3prZlNzenQrMGZIdDUvMjR6K016czNISW1HODE3LzZ0allDdHdJb1doa2FBNWp6ZU4wakg1UytETExmKzBEUys5R1JvM1RlU3BiNkVvSFpzTUxNcmJncHZpS01ZeDcycW5aWXNLTUNqZ3hGaGtPSDNPTzI1aHozTXFjNHdQOThiakhUY253WVAvb3dHaThMOTdYVyt3cHBCTDhQVmsyQzNGUlY2Zmh0bTg4TGZWTzgwcFppNENCZVp6eVZPQktaUi8rSXIrakZJbVVkdVRoWnpRS1ArY09IcHliT1hoUVhBakhITjE5Nlh3Uy9uUTV1dWxZYkhTcHAyZHBOS2IvVEI1ZldEaCtmR0greE5KVHNWQjNSRm1ibi8vQXRLT3JxeHV3SHFBZkZ2WXkvY1NGblgxQUR4Sk1BbkFEOWdLUWhQdlJncGNrY2dCL0VsWkpSQ1Qwd21NeFFMZFpqaFlwdnVER2dlcVJEK3hPdVB0VDVSU2RMZS9kV3k0SUowL1NmUFdIM3ozV2MxUjQ2aE9mcUg3L084OSs1UitvTC9zaTZ1eTl3SXNmQUY0c1lTZTBmRTVRTFBZT0FhTlBWcXJZTUtsU1BpdGhlemIwSUp3bEZvc1didFZUcVNQaUdyNWlwTGNuN2ZBNm5KbWt3OVVCdW9nTEx2aVNrbXE0TWtBenlXcEZPS1Vwc2NhSVNrSkp5UEt6bEg3UDhkZnUyL2FObmtnT0YxKzcvYVlQK0U0ZGdhdUFIam5kTWJweWFtekhIYjNsNU5IS3Z0dmQxTzZzWG9RUGpsbmQxdExSbTh0RCtjbVpkNzIyQlAreWVhM0RFNmQzNUthbkNzTWpOeDBkdG5yaHJQVnRmSUwrVXZnRlNaRWlyUEV1TmRTWENRVjlYb3RrZ3YvaExwUW95N1IzZ2JSZjV1SFpLUE5neWZqcis3VWVzT2YwQkIyM1NYdUhyREdBWUxJNTlvbUNiVnJYdWtWSndtNldSenpRbjh2Q3hLbVlJNFo1eEw2eTFzbXpyT2xNb0tsNUdSbHlIazFYOG9pK010ZVBjaDZtTVYwY3U3NDNYVGpRVzFwZXV1SHc0UER4UWlhNWtpdnRuci9sMEVwNFltSG8vYUdKcFlIbGs2WjhhalNXTWYyaTA3ZHo2L0p4MDY0OVVpRXhBbGZ3OTdyOHExT3JaK1NUOUIvTjN4SzJEbVNIWDJYNXZra2R5ZzFvZnNzSDZUOEJ3bEdTd1RvSkc5eC9xV1F3NEhFNkZJRkdzRjVDNUlxSDdpZkhRbVowbE1lWXl5SktvajVIR05zNVNXWGVycjF1UlE0dFpPd1JZVEVPV2FibXZ0WHhlSHhzclc5NDhFQml3S2NtVTFPK3Z2aFZBMCt0VFV5czNYNkxYSnc1TURSMDFVeFJ2dVZtTVpjb0JlSmk5YTFDTk5DWHpKdHVwdGR2djhaT2I3S2Y0VHBOeDhZM2hjUENYNUplMUY2OUhrUnVwWkJQbTBTSkxBS25TdFR3VDNQdGxRWExROHlleXpLbEJaMmt5SkJnNGRRWTBlZURZNE4ybk0vTFVNODlXNXJ4amdibWlzNHUyWHZtc01WNy9jMVgzZVNlNlZ5ZFdKdHpkSHpoTXc3Rjd2emNzT3F0SksvZUViSkdlOU45QTZhT2djVHJ4OHYzL3RiNmZ0ZjA3UFVuRjhiUDVTWmNlV3NnbjlwUzZPYTQ0enVqNFp6NzhOM2JadFk3VDhKZ0UzYWFBbjJmV0VHOEVmTlpFMzhIUE5QM2ZjQWFEcWNELzNkMG82cGZZWG8rZi9zVTRLeDR0UE4rL3NrbjMvYkNvVzkvWi84TER6OUJuM3h5OWNtdnJZN1E2Nm9mcG9lcjd4NFJsa3Z2ZnovM01hSlQ3UUxnRUFLWnU2anU2TFFJdE1NcUVCdllHYnl6U2hkN044MXhmTk0yV0NiZGRzRm04OWhneTJQUlNCajdqUEFpUlhmTkFIR2dBWUlubTMyVkZQWUZtT0ZYcXBKU1hQREJ0dVdUdHczZjhkRHl6UEtuNGV2RXE0ZHZmNUQ5L2Zpbmh6Lzl6UzJQYlBrbS9PRS9xT2NSTFQ3eWM5am5aL2pkd0tJK1JpTS9MUlNLU1F3bzZ1dEZ1OXp3c3IxV3NVNlhKczRzNVBPTFYwK3dud3RuSmc3ZmNPT2hRemZlYUMwZnY3Qno1NFhqWmYzbnRnL2VmLzhIOFl1L3I0djhJOVBMRTJwVU1vbWk3bEIxMXh5cXFKYnJmZDJWY3VVZkYyNStTSGpxNHB4dzQvRE1sUDdPcjU4QjN3WXhYb1F2Y1NhMWwzNXBCbnZqUzcrQ0pPalA1TFNYZmpVR05GaG1sQ0ptUE1QVVA1VGVOejIwdjlRemVzdmtzZGRaL1lYNGoraTVNaDBlM1pFZjJaSHJIeDRlT2d1NjNzQm9DdVFtdG1vamFhQnJKOGo4WHVUQldGUVFUVDNBaUJZenRwWmMwUUtZWi9VNjlYQjlnOUZNT3BIT3BQRWs2UytNcm90Z2xrdkRyVEVYTVArRXpzeTJRK1dGMXc4TzloN2R1bkpxLzh6ZVhlUHpCOVhSL2IyREEzZk1ETzdabWx6WXV1UEFaM3VYUnFQRFF3Tzl1WjFUNHl0VE84WXFxN24rd2FHUlNHbStVRG5nNkRyS2VUY0gzeFpoSDZ6RWptL3FzOFBkWkdIV0RKeDZrZDFTMTJyZGdiUStkaDAyN0dUSExmWmdrVHI0V1FGVGdpWWM5UG1USitlcjk5TlhWNzlEczhKVDFhbnBUMzk2bkg2eE9rWFBJNTB5UUNjenpCWEZhSlJFSlNIcWRCQldBUUNJU0hBOW45TUQwVzZqNVN0Y2lFQ2hGSDh2b0F2ZGo0cTJYVTBCWDZEUzltNzZjUFVKVzM2cGNNM2R2M0hEOXRjTTlmVWZIbDg1Y1dJbHYxSkFPMjc2Snk3bmJVZlB2bkZ3WUtpWU83cTAvU3FYUjQ4YkNtUEM1MGtjZG5CQjNXNEgwN1lUUFVGdUFSZ1RObENoSmduejhXb3BQOWlhVnVadlJra21XT0ZUYjdMWDczVjJ0Mzluc0hZejE3b0NpQ3daajJOT2wrSGNGUHIydkhxK2VDQ1pqbTFQbnI5YnlOMHdYcnBxS3BXZVByQmw5SnFNN2ZwZDg4ZFBtb2ZXWDdkNDFWdXZyZ1M4WTA3M1I5NCtQSmJZc210Z2FQOUVpdDVYR2J6NnptTTdkaHptOGh3VE1McloyY3FvU1lrMitINGEzem5JcmQ0U1RlQUw4SzZoUjZxSDZVdlYzeFB1VXNjdTNzVjE2eTJ3WjczQTJ6R1FjaFdzTHZTYjRUN0dOMnJvVzJaSUVUUFZYOTBKbk4zWG00aFRUT091OUZWeW1YZ3hVWFIwNFR2SUxRWnBSbzJ1U2pwak04clVTUlpYdlpRcGpSNmV6UnhkbUZ4TmJ0MHpnTjIzVmljWGptUm1qb3lxNndlM3FRZlhwNWZQbmwyR0wydTB2RmljdnRyaE9Gakp6UTZHdzRPenVjcEJoK08wV2x3YWlkTDNMSTZPTHVKWDlYZjJUVTdzM1RzeHVZK2ZneEx3d0hDTkIyRHZUUktXT05vcEhtTHN2eVlLSnZHY3NmTmhvMGNLZTN0SWV4NmdkVFlqNTlSS3phQjBzVlF2YlhYeEsrTUI0Zk9iTWtIMXJob1RnQTBZb2V0MFJ2Z0xzQUhmQUZ0L3JGN2VqOVhKKzNIU0d1VzM2UDI5UGZEY0E4SlRBT051QmdNa05iWmsxQ1gxQ0VycU1uYnZoQkdLVTdUb2ZWcGRjTmpzYk81NzJITllnd3hLTUJFYXBQTllUVHFYc2FhVEJtakFtOGxMRnBaLzdnYjh3OExuQU1ZYkdZeEpkVXMwQXBJMUI5dGgxdmFFMG1ValBVU1RybU9HZEIzWHBHdEt0dWc1d1Y3QWE0eXQ1MTRHRStSZEo4ZzdheHQ1TjRMSWxRVkFpN2Y3QkhIblZDeGFuYlVQY0FzeU9HOWljRURxeXlETllpNHFtaVFuYTRiZExOQkdESUUycmdrMFp3MnZNTURyRXo0TDhPNWo4SUQvd0U2R2FVVWg0bWd2ZzhacU1tZ2NxNjRGcWxkZHM1Y3lCWVNBMmNMeUxCeXc1aWpEOVFLRERSSkJicEFJSTB3aXNLWGlOanFjSm92ZTJ5OEtlQlhZSHR6UG5vWFQ3MUxhbi82eHV0TVBDR1V6d1lCQXdXSWZ6QTd5aEkzT0R1b1gvQmFEdHdJQXU0ZXQrUUY5emJCV2t3U0dKM1k2YUh2bXhvd3pOMDQzWFROUVByTHhhenBEVDdQY3J6cSs3NjNqK3o2eTFwTHpaYTU3N1ZsVHZ0Zkh0KzNldlczYm5qM2Jlc3ZsM21LNUxGMjlhOWZWcDNmdlB0Mi9NRFcxdURnMXRZQnlGMitUQjJBdExUcE5IazlLb2FiVG1BMmQ1b0hTOUI3bVlNd0grMUo2WDI4NzRPN2ZSS2ZwcloyYUF0TnAvTVR2QlozR2pEcE5wVVdua1JYUUdVTnZDWHJ5TWYvLzYrMXFZOXU2eXZBNTUvcCt4WFlTMi9ISHRhL3QrUHZhanVObVh1TFpUa3crMm9XMjZjZVNscmFETlcxcDEzV0ExaUlLVkJPb3E3U0lpUitseWhBU1VqYkJxRm9rb202ZHVsK1YwRG9WbUVDZGhFQkY2dWdmL3ZBRGFmdEJFV0tidy91ZWUrMDRydHVDa0lnVU80N1BQZmM5SCs5N252dWU1N3h2WGcrSDYvSFJHVDN4bFN2cGMxclNxeVhjV2tMVHEvbklwc0dqUStiYU1RQjlwOU9qeEVDTkMrdWdjV20rMFlNakluWFR1S0dXeGhVc2pZdExpbjZmWC90K09HTTVzNm0rdlpxYTFpUEJ4N1RrOEZBcXBrZHpSa1FiMHFLaHFmampXekx4ZFBGd29lTDNwUWZjZzhGZzFJZ0hBMUgzUU5LdmplWDF2Q3JqbGpqeGdlQlBRTDgvQXNNWTJIWFpEZ3lqQUlacDR2M1JzZ3k0c0RlWEs5Mzg1U3ZuNmNFUGMvdjNaLy84NFVYc0Z6LzBTeER1RVVGdE43RUxBVzEzZGRWMm82WHRoUlo4Z1Q0cGx4Ry9ROXQ5WGVHTG9keGV0ZlhIM2RVbnQ0OG5haEZOTC9wVHhhRzBKeld3K2xidWhDelRXckUwNmZZWWJsYzJHazByc3NsdkFMa0s5QWhNZ3lUcWtFclJ4eVl3dmIrNzNSaGF0eHN3WEVHTlo5Ym1mQ3ArYUR0QUEwcTdHalNkVzgzeHlyVGhsaXRUODgvTStmTmVyenZkTnpydUxrZExNNThmMTRaZGNpazFtQ3VJaTl2M1BtZTM1MVg3M0pSUHF3MlBURi96ZWZNbEl4Sk84M25tZ3BjSTE1WDdNSXJCTFZLMkRhTW9nRkU4QURLOVF1VVhmNkRPbjlPUlFxYnhQc2NuRVdoL0Z1YXJueVJJRVMyVVcrcHVvWWJhTEJTZnFWcUFrbncyV1V3Vm8rRkFRa3M0d1Z4UXY5cHEvZ2JTdHEvVElyUW5ndjlaZFM0WDF4TmJTcVhaWkRpZW42dUVzOWx3MURDaWlXSXhrU3h1RWl2NWFGRlY4N294Tm1iQXJGV0wwWHpsZzhGQUlCWUxCQVl2Sm9PaFpES0VCMk5oUERWb1QyNTlQR0VjYldJUFBrMDh3Q1lPdFd4aWdUNXdQRDJkZUxsSlZ2UzNZWkFmUFhRODZaR0hEU2pjRmw3KzBzbmQ4RGE1RzZVRUxSMm8wRmVxN0RyaUNtam9jU2licHFlaFVKcCtUOEdkZzdQMGFmajBOUGRYN3BJbFVSQ3BGbUNTRFZDWUpNd0pDdTRrOExRR0lzRkVzODhUaVRGcEg1RWt0cWpLOENmYjVYUXk1a3c1UWQvQ0lkOEE1bzZCeHczRjB5UEh1Vy9TeERUVzg4N0dlNStqR0dMemRYN3ZmcnczQVdXM0tUNHE4c1FXdmVqdHRsT0YySWhpT3l0UkpvcnNsTkNERW1GVU9oVzNpMjM3TU4yVWVFaUdhOFRkb2NtaERlWFowa09MSDVpTW9QQmF3QW5Ma1hmQTQ4YmQyMVlESE0wR0lDNEMrUyt4R3lENXQwejVuelhsZndGalo1czdQL3dKMUxEbXpEaEk4UVJWRlhGT1FldHR0bVc4bDhMaVJ4M2tiQStWVkZVNnhVTzJDaUxZaVRhNkxjaDZBcjNEcXJJUDNoVDFrQjNxVVhkYmgvZHFHK3FRbHY2cktpYW5pU3hpOHFLekhiV1EvN3dTUEl0U0xOYXF4VXF4VWg3RFBDOXVWOEI4b082VGM3ekRFQWV2ZmNKK3c5NkZudnFHMlY4bnNiKytpNGlHTEp2a3pMd2Q4MnNTbFpFVDFubks1N25SRUxrM0FtOXBPK3pBVUNGZTlGYVd1cFMyNHZGeU5Sd3dJL2ZqWldhK0FkekltTXprYzlGSVg2L0FSb3E1MGZ5b3lURU02NkdnR1NiSEpNZzBjNEtDekxiQmpUS1RqQ2t6eXM3dXduK3ZtTEtQOUZIV2EwcGpwN0tUZGtydmNRRGFBUG5kUGYyU3pXcEJwZXMxWGRwZ1hpemh4WUxWanZMTWRIbXMyWmF0czlNN1puWk0xTWFteWxNUGE5Y0EzNm1oWklaY29MZFkyY3d6RDNhTUNPaC9GMDFmbmNWTkVRaDN3N3Y2dVZNa3NiNEJUelBqbHkrUFg3cDA0WjM2MWF0MXZvYk0wRmw2QzNDdGdOeVdCKzkzU3Y0OFAxdHhxM0dhdmx5dm04OTdNMnRySU10V2tLVVBNM2kweTBHSUxKRGpDcFZsYVJHejVrbzdIUTVIbjZQUGJRcUdlVlBhQmZOZzNaWndseHFuVjkrcXI2N1dHM2NuekZpTis4bFA2TzlZQWU0anZkMWpRKzRRNTFzZzJVTE9mQ2Uxdkp4ZVhzNjgra1BqMVo4YUt5dlpsUlZqNWJYc2F5REREUGsyeVBjRkxsOElZMklpUFJMa2cxbkhaR3J5VWtRd0lBYzRKd1dXTnRIMmxLdmZBY3JrOS9hSFhDRVV1TmRwSWx0ODVtNC95U0REU3RwT2Q2YXFSU0srUTc5L3M4a24vbHVUazNxeFh2K2dqWjhLODNPRy9CMzYvWTh3TTgrVFZSRHJQTmxOZG0xL1U4TW9aaTA2YzR1SjBXVGR0ckpsNEREWjFvY0p1YzdkTW43Z2ZIa1IrbUFIWU9Ldm05VGVIQmdId1hheWg2cUVxS2Rhdkk3blpMTlNtVmVLWkI2eUMwKzEyUVRieTFoV1hYcG8wUzc4RHdranU3YTVYeTNYNjl6Q2w1YTIvUGJlUXRWNmYvRk0vZGpFbVRNVHgrcG5VTjRJT1U1Zll2TVlnZmx0QUoyUDVRdk1EMDM3WXVNOU9wRnFmRUtsNC8rNFY3ejVhejR2RnFEc08rMWxQYUtZU2FYTzBJbkdleWtxTnY3RjVxM0NqTlRvWmM2Lyt0L09zbmdlOEd6ei92ajhRcTI2c0ZCTmpZMmwwdVV5dmJ4M3ZMcXdweksrZDFQVlNJMk5wck1WM0tNbm4yTkxiQmxRVmhranNYdGNkdFVta09DQXdteE1nUFVXQmc3d2lidUhrVzA2Y2lBSTEyL014Z2FMMEFHYkZYaWE0VFpyc1pBc3A4cXhhRUZFNm4zR09uZ0tTbUdlVmJYeXNrbW9JTllScGxaR05uUDNkVEh6akJZT0J3OGFCMlB6dzhQenNZT1p4V0FrckZtZjk4VGV3T3hxVnBhMXNENnllUksrMkRNOHZCQmJ6QzZHSXBIUW9yRVlXeWp5endkRGtXaEk0YkZ6ckhBLzJkblJDTFFYdWFYWE9KNnhjbkEwL1dldHh5K3RNd2RId2xYQ1hFWFhOc01QamRLVlQ3OUpWeHBmaHBHcXdjV2YwaXFNdFg5eUFLMFBqTk54d2ptMllFOHc5NmduNWdKNFc2UHZUamRlb3RYR3IvNXBjaFJOcmlqblNaSkhjQlJuMTByMFkzb1A4TTI1U2J0RGhpbmw1c2xPdDcvcFIzSVdob1RkRUhjT0xieG1hMjdsNjgzdjIrUE5oWnRscksvWll0ZXZENWc4TGkveFlsNnBCUEs0UEsxd2dDNHJSR0RHbTNEOVlHNnlNT3ZidGkyOGF5UlJEMnlsOXhxL245NlpUZEdURFhzMUh2ZTQvd3F3cG9QLzNqeER1SkVEejJmekkzanc5NTArNUYxbHdzRC9DMitlWUlnc1FqK0dheFhNbkdKbE01SEpOclJBeURwU2lNSWtYNzdra2pNZWo1eHgvZW1OVGFEeUY5bmgyMmxhYjl4STNmbnN4MlovaUd1M29KN3JIZlZzN2FpSHVzcCtRU2o3WFRSc1ZYVDlzOWR2cHhzM2FEMTFoejI3QWFOM25DdVFOaUIwdm02U3RSZUV1OElPWEZ0SkhqTlI5RG9GaWtFSmtTVytyUzBsRFJqWkpjSUVnZTBqVm9vcEpqd1ZHelI5dmxvcUswbGFYbFNaMkhKTitOZGRFNUxrTDZYSHluS1RQb0hlOEk4YUx2b1J2SjRjelo3WXVlVnIzaVAyMFZnRU9zaElCSVJqMU9YYmp3OVhlalo3Z1pkeTlTUnJ1WW1GSnl1cGNEenNjd1Nka1ZEMWNUM1c5OVdjcnVmd0Z5VmQvNUd2c3FOc3k2SE5JLzhHRTRkRFhBQUJBQUFBQVFERURhUmJDVjhQUFBVQUR3UG9BQUFBQU5qUTg3VUFBQUFBMk5GV24vL0cvdTRFSUFQdUFBQUFCZ0FDQUFBQUFBQUFlTnBqWUdSZ1lQNzE3endEQTR2Ti8yUC9EN01vTUFCRmtBSGpNZ0N0YkFkZkFBQUFlTnFObEg5b3pIRVl4OS9QODUzeWM4S05scDJmWjI1blI4eHh0eCtVdFIwN1F5a2JHa3ZDTERGLytNT1BwRVJOaVFqL0tCRi9xaW1GOG85MEpxbU50V0ZyKzJNa3pSOVN5b25PKy9QWjNmWGRFZnZqZGMvbitmeDZudWY5Zkw2bmluSjhBdHpvWll6VDY5aXEzUWpyRzlwbXNndGJuZG4wZTFHUG42alRla3cxYzdxVDh3MjBnN1FCUlBROGJSSHRXYzRkUklFMmtYYkV6SjNPS1FTNFBrSFBZS0kyWUlHTjQ4SzVPdExQWVBMSXh1VDFIZmsydDM4eG1MTGNhL0ozbzBQTVpiaWVXdnhNRHBBUDVDdjk5YlM5emliVTBTYm9qNmZ0Y3RXOFVYY00xMjVwUWE2TjQ4Sm80U2JIeDVoWmMxWXZvMU1hbzFjMlRWbFFYNnZuS0RCNnU3RzZ1ekU5U0pPTHBScEZUSDRocE5Va2lKQWNaand6OWlPR0FaUmhJUGxaUHRseHpLbGxETTVyRmRkNXp1eVRScDUvaWdJNWlqbGNXeXZmTUZrZjBmK0lTZklWaytVRmltd2NGODRSTE11ZU01ZzhzdUZiQ090NmhFeDhrNHZKOForWS9JemRrS3JKVUpXeUoxR2ppekZOL2NrdTNyZWE5M1dTSHZJZTcyeXRMK1dCdFVQa0I0bWJkVk4vU29QVnNoVGJhSDBTd1RiSjV6djFwelR4dTdSeDRUd1o2YWV4dWpVaVFCWmEvYktobm02czN0UjNWRkIvTjdZUGJ0aVRETmN3VnpwWXoxWDRNbnI5ajN6NC95REdXSWJybUtjVGNJNjBrUU9rbnB3aWU4V0xCcDJOMHh4ZlVROE9tWFY1alhZa1VNenhYWElMZllpUW1kYjJ3Nk9Yckc4b1ZmQnU4QzMwSVdoOE9ZYWdIRWNwNHBncCszaW1tN1VlSnhkUlRGYndHeTNXUTFnaHI1SWQwb05GTWg4dHNnVlJTUUJPRi8vMzR1UUVtVVg2VUM3UFVLR0Y1RDRxbkp1bytOc2M3NDJSRW1sQ0ZTbVJWdmF3RmNzbGpsVnlqejdSTUtxMWxiYUE1MHl2bnllVHpLMWFkbk0reWY4RWgzZ1JsaS84TDdpQkpmcVdlUllpcUdPcDdUNStveGRJR3hieDdVZWtoTitQajlTd1AvdXhVRXY1M1RiejNHSjRkUTgxYVdiTUhmRGlOdkpZM3pTK1M0L1VZTHFFTUVPcXFVVUFVeVNLV1J6bjIzMTN1TStYMnJjdXRTODZjcCt1NFhzN2dUemRUaDZ5QjRQdzVwUXozbFJVWnBqUHZocWJSenlvbEU2ZTdjUm1hbE9tajFsYklWcDBKY3JrT1RXSUlKcnVXYVp2Q1l3eG1GaFVIMDYvK2YwTjVNVkVzQUFBQUFBQUdnQWFBQm9BR2dBYUFFb0FuZ0RxQVNnQlZnR0FBZFFDQUFJYUFrZ0NkQUtTQXJ3QzVBTXVBMmdEeUFRTUJGNEVnQVNzQk5BRS9BVW9CVkFGZmdXb0JkZ0dDQVk2Qm40R3JBYllCMElIa2dmSUIvWUlLZ2lrQ05nSkJnazRDWVlKc2dua0NoZ0tUQXFBQ3E0SzNBc0tDMHdMdWd3SUREb01iQXlXRE1RTkJnMDJEVmdOZmcybURjNE44QTRVRGtvT2JBNjhEdW9QRkE4NkQxNFBnZytrRDhvUCtoQWNFRVFRWmhDU0VMWVE0QkVLRVRZUm1CRytFZUlTQ0JLNEV1WVRGaE5NRTN3VHBCUFNGSm9VeUJUdUZSNFZTaFdXRmJvVjloWVlGa0FXYUJhU0ZyWVcyQmI4RjJBWHBCZlFGL1FZSUJoSUdISVltQmpFR1BJWkdobEdHWGdacGhvaUdvWWEwQnMwRzRRYitoeDhITFFjNkIwMEhXQWRkaDNhSGlJZVpCN09IellmaUIvWUlCWWdYaUNDSUs0ZzJDRVFJVDRobUNIeUlsSWlzaU9hSS9Za1RpVUlKV3dsMGlZQUprd20yaWNPSno0bmlDZ0FLQm9vU0NoNEtLd28vaWswS1dvcG5Dbk9LZjRxWWlyd0syNHJ5aXdxTEx3dEZpMklMYzR1SUM1Q0xtZ3VraTY4THR3dkFpODhMMTR2ekMvNk1DWXdUakIyTUp3d3VERFNNUEl4R0RGYU1ib3grREpJTW5BeW5ETE1Ndm96ZGpPZ004b3o4alNDTkxZMUJEVndOYmcxNERZa05wNDJ6RGJ3Tnp3M2hqZndPQm80aERqR09RbzVWRG1lT2VRNktEcG9PdlE3UWp1U083WTc0andLUERROFhEeUtQTG84NUQwUVBWbzlpRDRVUGxJK25EOFNQM2cvM0VCS1FMWkJIa0dBUWtaQ3VFTXNROVJFR0VSZVJSSkZVa1hVUmpaR3RrYlVSdTVIRkVkWVIzcEhya2ZZU0JoSVhFaUNTS2hJdmtqV1NUQkphRW1NU2FKSnhrbm9TaEpLUmtxYVN2Wkxka3VNUzZCTHZrdllTK3BNQWt3Y1RFQk1Za3lDVEtaTTFrenlUUXBOSkUxS1RVcE5TazFLVFVwTlNrMWtUWDVObUUyeVRjeE41azM4VGhKT0tFNCtUbHhPZWs2Y1RyNVBLRStTVDhoUUFsQk9VTkJSSEZGRVVaQlJzRkhNVWU1U2xsTU9VNVJVR0ZSVVZNUlZVbFd1Vmd4V1RsYWlWdWhYQ2xkT1Y2eFg0bGd1V0paWXZGa3dXWmhadWxuV1dmaGFJbHBHV201YW5GcTZXdWhiRmx0U1czUmJ0RndPWEVCY2pGem9YUXhkZEYzUVhlWmVKRjZFWHh4ZmRsL2lZQXBnS0dCY1lIaGd4bUQ2WVZKaGFHRitZY0JpT0dKZVlucGlrR0wyWXhCaktHTThZMXBqZm1PaVk3aGp1R1FlWkNrQUFRQUFBYWNBWEFBRUFHY0FDUUFDQUNnQVZBQ05BQUFBakE0VkFBVUFBbmphN1pMTGJ0TkFGSWFQa3pTbHRGUUlDWUdvUUdjQkVsY25iUkdvemFxcVZJR2FLcjFFU0N5ZFpPS1lPckZsVDBqN0JJZ1ZiSGdBbmdBRWI4Q1dCMkRQUzdEbG4vRUpUZEp5V3lDQlJDeDd2am1YZjg2WkV5SzY0dlRJb2V6M0dHL0dEczFobDNHT3Bra0o1K2t5aGNJRnhEd1hucUlGZWlWY3BIUDBWbmdhS2grRVQ5RlpaMEY0Qm54TCtEUzlkQ3JDczNUQitTZzhSK2VkejhKbkVQTkZlSjR1NVo2aEVxY3dnOTI3M0d0aGh5N205NFJ6TkovZkY4N1RhdjVRdUlDWTk4SlRkQy8vVWJoSVZ3dU84RFM5SzF3VFBrVmMrQ1E4QS80aWZOcmhxUXZDcytRVzd3dlAwYzJpRWo3amNQR0Y4RHpkblg2ekhzV0hTZUIzTkMrVkYxZTQzbEc4cTFyOHdOTzhuVVJQVkZQeldsOTNvaVRsNngydDQzUzFWUElEM2VrMzNHYlVMU0VXb2JWMk8yZ0dYaWpiamFpbmJ3eFY2dXBBN3lxL0gzckpvbHN1TDFlMjFqZXJsU3pRK082SWN6VCtrVXJTSU9weGxzRGpVcE9KZjZ5RGJkWFRucDk0WFM2eEtYcHlYKzhFS1p0STNvdmFldUFsaW1FSWc2YnFwU2lnMzJ1cGhEWEsyWHRZNVZxc2VsbHdOUXU0elVkZExycHN4U1RYeUhoUHZTRDBHcUhpQVdwbGp6ZldkdGpUcTJ4YVFBZHBNd2xpbmJwcEVMcFI0cGRxRzFYeERBWUR0OXZjRC9WaHJFeUhZbzZIMWR1dS85TGFUL0RRT2tVVTB5RWxGSkJQSGRMRXRFUmxXcVFWVUIwV2hYVVgzeGJXQitUWmlHM0VSL1FFMXFiZHIxRWZhd2UyaEZMc3Ixc2xEZVdVVnFtRXg0ZStpZWhUZzF4a1JkU0ZOZFBOVkd2VXhoUEFGMkFmVG5nM2tOSERldU5ZTFhYc0QwREc3a00vaEQxQi9TNjZLTk15VldnTFhXNVNGVFNxT015N001SDVQZjFIV0UxM2dhMkV4MDdnSDFiMXN4UC92UmxzdzJySWcyYUNieGZubGZBT2IvcG5mdE5UWUtzY2FqTHRnZHFnZ2IwVDAzRVdFZHA2akY0cU45QUh0K3cwMlBhamJQWkQ2REk2aUczc3FISjFUT0UyTENmTjBydzhVdG40dWNOcVBIcUtON0NUYStCclBBTzVWK00xNTY3UmptV05lK2R2VThobWtFTFR6RG1HTGNXSnFkVnk3ZFI4K0d2SXIwN2tET3pqNGhhYnRJOW9qZitLNlhJNHcvSG8rTmpkSDgzNi83My96cjMvVXM1WGJYL3B5QUI0Mm0xU0NYUVRWUlM5dDRRSkpBVUtLSUlieU9wR2JaSTJUZDJnU3dxRjBrcExLQ0NpMDhrMEdack9sTW1rcGJpQUFncUNvcUs0Z2lEdUN3THVvT0MrcjhkOTMvVzQ3eDcxSEpkazVwc0VjYzZaYy8vNy83LzczdnYzb2dEMjkzY0lVZnpQeHh2U2Z3RjdvUmRkR0kweEdJdHhPQlNINFhBY2dTTXhIc1U0Q2lYd3dZOEFTbEdHSU1vUlFnV094akU0RnNmaEtmYkdFMmpGQmJpTkV0MVFzQVYvNG05RTJZZDk2YUVYS2d2WkQwL2lhZmJITXh6QUlnN0VGL2lOZ3ppWSszQmZEc0d6M0EvUDRYbjhnUmM0bE1PNFB3L2dnVHlJQjNNNFIvQVFmTVNSSE1YUmFNT0xISU9YRU1OV3ZNeXhISWNMY1RzUDVXRThuRWZnRXg3SjhTem1VU3loajM1OGcxY1l3S3VJNHpXV3NveEJsalBFQ2g3TlkzZ3N2dUp4Mk1uak9RR2ZjU0pxRUVZdEptRXk2akFGVTFHUGFXaEFJMDdBZERTaEdUTVF3VXkwWUJabVl3NU94RnljQkkyVmFFY0NHekdmVmF5R2pnNzhSY0JnRGNPc0pmRTZKNkdUazFrSEUwbE93UUpPWlQybjRVdjh6Z1kyOGdTczVIUTJ3V0l6dXRETkdVZ3h3cGxzNFN6TzVoeWV5TGs4aWZONE1qN21LWlRaaW9Yb29ZSlRjUnEyWVJHalZMRUpwN09OTWNhcDRWUE9aenNUN0tCT2c1MzRGbWR3QVpiZ1RDeW15U1F0cHRqRmJpNWtEeGZoYTU2S0hUeU5wK056bm9IMTJNREZYTUl6ZVJhWGNobVg4Mnlld3hWY3lYTzVpcXQ1SHMvSGczZ0lmVkdOOC9BRzNzUmJlQnZ2NEh5OGkvZnhJZGZ3QXJ5SER6QVFBM0FRRHNZdGNHRXpSdUlhM0kxN2NDZnV3cU40akJmeUl1ekNidHlFbXpFSUUzQXl6dUZhWHN4THVJNlg0aEVVWVR2dTRHVzhuRmZ3U2w3RjlmQ2lFTWRqSXViaEZQVERXWGdZWjJNRktpR2pDaDcweGlodXdDcWNpOVc4R200c3czS3NnNFRCMkFmN1lnajJ3MUFNdy80NEFBZHlJMzdBai9pSm0zZ05OL05hWHNmcmVRTnY1RTI4bWJmd1Z0N0dMYnlkVzNFL2ZzWXYrQlY5OERqNjR6dXN4ZmU0RnlPd0JzTnhDSlp5RzdmekR0N0p1M2czNytHOXZJODd1SlAzOHdIdTRtNVhRNlMrdnFDNnlhMjNKanRsUlpVcVcwMjFTM1ZYZHNpS2FlanVTaU5tNkdxN3QxclJUQ1hWMFpaUUYzcXFvNFlsSzRxcVcxS05JcWR2cGNFMFpFc0syN2xTMk43MGhMUFgzR0dIclZkWWo3bkRnbkZTanRHZDByVVNuOS92bVpSTmNVMXVsVTN2NU53ZHFjNG1MNmliNHE0VHZkVTVURktkcFNXaXFuZktmd2tEUWFsZVZsS1dLdFhiSFluZEtsZDl1b3pVNEJ3MTVCMlZsa21OZHBWK2pmR1VIcFBOVkVkQ1RsbnVScWVnMU9Ta05PV2xsQVdsWm50WGhHRnY4My9hOFB0Q3JobnBZYVFaZVdsQnZ6aXJsQ0pPeGNnZUZTTml4SWd6WXUrSXFla3hLV0lQS3JYWUJmdTJSRFhWVkpOYVVtcUptWEtYNm0zSlZmYk96bnU1MmZheE5NZE84OHpKcVNjN1dzdWltQ3lVVWZLMFZuSzNvN24rL1lGeVNYWEVWaDJ4MVp6WXFoQmJUWXV0Q3NyWVhtSUhQTEdjMlBHTTJQRzhsaldiM0tObHJ4Um84OTJhNkZNVHVtdU83dlAzMHIyOHNEMW1xcXFla1BXb3BrZ0pSN1pFdmdtcVhZbU1DWFRuU004M1FWQXlIRW1NUFNReGhBbE1KOFhNTjBHNWxNdzNRYTAzdVpjSktseFd4Z1JXdmdrQzRxeEtTamtWVTN0VVRJbDVVOElFS2RzRUtjY0UzWTRKdXJNbTZIWk0wSjFuZ3A2OEYrMXhUTERJTWNHaTdNUDJVUXd6cXVseW9vOWNuRlRpaHBIb0o5dDNzcEhkbW9nR3lUbEtzVlVrLzl0Q05zTXVKYUwrd2wzWjBCbEdoSVZ5WnFac29qMmFpSHJIaXVXRTVZazU1ZFBMQVhrbXlzUkZNY1hvNkpDZE1USWIvWE9PeW9SZSs2bWJFMGFYM083TlBIU0p2NlFrNEE4V1pRak5wTG9nWlZocVFtMnpCdWR2UkZzVG1iMk1NdW5yZm9FQmdSVUNLd1ZXT2Vnckc5U3BtcG9SemRST1AwYTBXSkU3UGZHZXpyaXEyMHRWajhySnVMUHMrSGZwRmJtWnRTUmJHWENGVTZiaGNKYVhDQ3dWV0NZd0tMQmNZRWlnNkMwazhrSStnV0tHa0pnaEpQaENnaThrK0VLQ0x5VDRRalpmZXRSU2dVR0IxUUpySEt3cWMxeGNWU1d3MnNrUGlMb0JwNjZ2d2lmUWlmMCtPNjgyWEZ0clkyMXRUV0d4WmJXbGpXL0VOZDM2QisrMjljRUFBQUFBQVFBQi8vOEFEM2phWTJBZ0FEeUEwSUhCZ1drUEF3UFRSY1lYREF6LzlabC8vVHZQZFB6L1Z5RC93Ly92LzdWQmZBWWpJTlJsMEdXTVkyQUE4UmxUL3Y5R0ZtZmF3eGdIMW5lSU1SSkVBd0RNS2lPTEFBQUFlTnF0VjJ0Ykc4Y1ZudFVOakFFRGtyQ2JkZDFSeHFJdU81Sko2empFVmh5eXk2STRTbEtCY2J2ck5PMHVFdTc5a3ZSR3IrbjlvdnlaczZKOTZuekxUOHQ3WmxZS09PQStmWjd5UWVlZG1YZm1YT2ZNUWtKTEVnK2pNSmF5OTBRczd2YW84dUJSUkxkY3VoRW5qK1hvWVVTRlp2clJySmdWZzRFNmNCc05FakdKUUcyUGhTT0N4RytSbzBrbWoxdFUwS3FoR2kwcWFqazhMdGJxd2crb0dzZ2s4Yk5DTGZDelpqR2dRckIvSkdsZUFRVHBrRXI5bzNHaFVNQXgxRGk4MnVEWjhXTGQ4YTlLUU9XUHEwNFZhNHBFUHpxTXg2dE93U2dzYVNwNlZBOGkxa2VyUVpBVFhEbVU5SEdmU211UHhqZWNoU0FjaEZRSm93WVZtL0hlT3hISTdpaVMxTzlqYWd0czJtUzBHY2N5czJ4WWRBTlQrVWpTQnE5dk1QUGpmaVFSalZFcWFhNGZKWmlSdkRiSDZEYWoyNG1ieEhIc0lsbzBId3hJN0VVa2VreHVZT3oyNkJxamE3MzB5WklZTU9OSldSekU4VENOeWZIaU9QY2dsa1A0by95NFJXVXRZVUdwbWNLbm1hQWYwWXp5YVZiNXlBQzJKQzJxbUhBakVuS1l6Uno0a2hmWlhkZWF6NzlVVE1JQmxkY2JXQXprU0k2Z0s5c29OeEdoM1NqcHUrbGVIS200RVV2YWVoQmh6ZVc0NUthMGFFYlRoY0FiaTRKTjh5eUd5bGNvRitXblZEaDRUTTRBaHRETWVvc3VhTW5XTHNLdGtqaVFmQUp0SlRGVGttMWo3WndlWDFnVVFlaXZONmFGYzFHZkxxUjVlNHJqd1lRQXJpY3lIS21VazJxQ0xWeE9DRWtYUms2c1JHcFZ1bTFWTEp5em5hNWpsM0EvZGUza3BrVnRIRHBlbUJmRkVGcGMxWWpYVWNTWGRGWW9oRFJNdDF1MHBFR1ZraTRGYi9BQkFNZ1FMZkZvRDZNbGs2OWxITFJrZ2lJUmd3RTAwM0tReUZFaWFSbGhhOUdLN3UxSFdXbTRIVituaFVOMTFLS3E3dTFHdlFkMjBtMWd2bXJtYXpvVEs4SERLRnRaQ2NoSmZWcjIrTXFodFB6c0V2OHM0WWVjVmVTaTJPeEhHWWNQL3ZvalpCaHFsOVliQ3RzbTJMWHJ2QVUzbVdkaWVOS0YvVjNNbms3V09Tbk1oS2dxeENzZ2NXL3NPSTdKVmwyTFRCVEMvWWhXbEM5RFdrVDVMU2lVSEVxeGhwa0VOdnpueWhWSExJdXE4SDJmSTFHRElWakxhck1lZmVpNXp5TnVxM0MyN3JYb3NzNGNsbGNRZUphZjAxbVI1WE02SzdGMGRWWm1lVlZuRlphZjE5a015MnM2bTJYNUJaMWRZT2xwTlVrRVZSS0VYTWsyT2UveXRXbVJQckc0T2wxOHp5NjJUaXl1VFJmZnQ0dFNDN3JrbmVjdysvcHY2eXM3ZXRLL0J2eVRzT3Q1K01kU3dUK1cxK0VmeXliOFk3a0cvMWgrRWY2eHZBSC9XSDRKL3JGY2gzOHMyMXAyVE9YZTFGQjdKWkhvZms0U21OemlOcmE1ZURjMDNmVG9KaTdtQzdnVFhYbE9XbFc2cWJqRFA1UGhzdmRmbnVRNlc2eUVYSHIwd25wV2R1cGhoTzdJWG43bFJIak80OXpTOGtWaitZczR6WExDeityRS9UM1RGcDRYcS84Uy9MZDlUMjFtdDV3Niszb2I4WUFEWjl1UFc1TnV0dWdsM2I3Y2FkSG1mNk9pd2dlZ3Y0d1VpZFdtYk1zdTl3YUU5djVvMUZWZE5KTUlMeURhTDU2bVRjZXAxeERoTzJoaXEzUVp0Qkw2YXRQUXNubmgwOFhBT3h5MWxaU2RFYzY4ZTVvbTIvWThxdUEyNUd4SkNUZVhyZDNvdUNUTDBqMHVyWldmaTMxdXVYUG8zc3JzVURzSlZZS243MjNDYmM4K1Q2VWdHU29xNDNYRmNpbElYZUNFVzk3VGUxS1lob2RBN1NESENocDIrT21hQzR3V25IZUdFbVdiYXdXWEdNa29vK0RLbnprVko3SVJUVGFpaU4rOHBYNnFDNFhRbWNSQ1lyYThsc2RDZFJDbVY2WkxOR2ZXZDFTWGxYSVc3MDFEeU03WVNKUFlqOXF5ZzVlZHJjOG5KZHVWcDRJcVRZenVuL3lJc1VrOHE5cnpiQ2t1K1ZkUFdCSk0wcFh3bDg3VExrOVN2SVgrMGVZbzd0RGxJT3E3ZUZ4bEoyNW5HMDROOS9hMVU2dDdidi9VcW4vbTNtZnRDRFRkOFo2bGNGdlRYVzhFMjdqRzROUzVWQ1MwVFJ2WUVScVh1VDdYYk9SVGZLbjUxblV1VUlYcjA4Yk5zK2Z2Nkd3T2o4NWt5LzlZMHQzL1Z4V3pUOXpIT2dxdDZrUzlOT0xjemk0YThCMXZFcFhYTWJyck5WUWVsOXliYVFqdUl3UjFlKzN4V1lJYlhtM1RiZHp5Tjg2WjcrRTRwMWFsbDREZjFQUXl4RnNjeFJEaGxqdDRnU2ZSZWx0elFkTmJnRi9WWXlGMkFQb0FEb05kUFhiTXpCNkFtWG5BbkM3QVBuTVlQR1FPZzY4eGg4SFg5VEY2WVFBVUFUa0d4ZnJZc1hPUGdPemNPOHh6R0gyRGVRYTl5enlEdnNrOGc3N0ZPa09BaEhVeVNGa25nd1BXeVdEQW5OY0Joc3hoY01nY0JvK1p3K0RieHE1dG9POFl1eGg5MTlqRjZIdkdMa2JmTjNZeCtvR3hpOUVQalYyTWZtVHNZdlJqeExnelRlQlB6SWkyQU4rejhEWEE5em5vWnVSajlGTzh0VG5uWnhZeTUrZUc0K1NjWDJEeks5TlRmMmxHWnNlUmhiempWeFl5L2RjNEp5Zjh4a0ltL05aQ0p2d08zSHZUODM1dlJvYitnWVZNLzRPRlRQOGpkdWFFUDFuSWhEOWJ5SVMvZ1B2cTlMeS9tcEdoLzgxQ3B2L2RRcWIvQXp0endqOHRaTUxJUWlaOHFNY1h6U2N1VmR4eHFWQU04ZDhUMm1Ec2V6UjdTTVhyL2FQSlk5MzZCUFdnQS9vQUFIamFZL0Rld1hBaUtHSWpJMk5mNUFiR25Sd01IQXpKQlJzWjJKMjJNRERJTXpOb2daamJqVmpVV0lRNG1Ma2dQQXNtSFNZWk5qQ1B5MmtQendIT0F5d0hHSmdadUlGOFhxYzlEQTVnQ09MdkJKSU1MaHRWR0RzQ0l6WTRkRVNBK0NrdUd6VkEvQjBjREJBQkJwZEk2WTNxSUtGZEhBME1qQ3dPSGNraE1Ba1EyRzdDb3NFaXdzSE1wN1dEOFgvckJwYmVqVXdNTHB0WlU5Z1lYRndBNTZVdStRQUFBQUFBQVFBQUFBQjQydFdVd1c3VU1CQ0c3MzJLa1U4Z1FkTGxCRlhTcWlxS1FDemEwaTdjcC9Gc1l1cllZVHpaZE44ZXA4NjJXd1NvTjhRdHRzYWZ2MzlzcHppNzZ5eHNpWVB4cmxTTDdGZ0J1ZHByNDVwU2ZWMVhyOStxczlPam9pTkJqWUtuUndERjRNeVBnWXdHbzB0Vit5N3I2bHNydTU2eUs5SWZVTlowSjFmVURCWlo1ZmNydHVTMFozRFlVYWt1eVFrMmpCM2s4UG5pMDFMQndMWlVyVWgva3Vmak9EN3lJbndtMUV6YVNKaStIMFovNUxHM2NiN3lnOU84ZXc3K3VjajNGRXpqaUo4eSszMzFCTXhuNGZ6QXVOQVVhamE5eENiUDIwbnNFVmljdWt4T3BVbUFkV3NDVk40SlhQdU5qTWdFY2NLYW1sd2dEVEVQTVVoTGNQMXhDYXU0YnlwZXBvSlg4QzBkSkN5eVJaWmc4OW9KZzFzMEZtOHN3V2lrQllUcS9BdWduTUFjSXltR0xCaWJlVzd5VmJVczhza3o1ZmtsUTdFbkgzYmlOd2oxM3dhZVNlbjYrWDdIcG1ubHIya3U5bFh3NW5qeEx2b1F4QmNCOFVuQUpmdnZWQXVjRDlKNkR2QmljZ2hSb29scXc4Mzl6VW12WjdYWm1OcWduWWRUM3BlSFdrOVVDbUhVMUNIZi9udXhBNVVpZi94aC9BUmdWRzJxKSBmb3JtYXQoIndvZmYiKTtmb250LXdlaWdodDo0MDA7Zm9udC1zdHlsZTpub3JtYWx9QGZvbnQtZmFjZXtmb250LWZhbWlseTonUmVkSGF0VGV4dCc7c3JjOnVybChkYXRhOmFwcGxpY2F0aW9uL3gtZm9udC13b2ZmO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGQwOUdSZ0FCQUFBQUFKR3NBQklBQUFBQk1CQUFBUUFBQUFDUUZBQUFBWmdBQUFSaUFBQUFBQUFBQUFCQ1FWTkZBQUFCbEFBQUFEb0FBQUE2aXlXVXNVUlRTVWNBQUpBTUFBQUFDQUFBQUFnQUFBQUJSMUJQVXdBQUFkQUFBQTBEQUFBaUtnNmRoYVJIVTFWQ0FBQU8xQUFBQXVjQUFBWW9jQU52OEU5VEx6SUFBQkc4QUFBQVVnQUFBR0JsYzRHMFkyMWhjQUFBRWhBQUFBUHZBQUFGdEc5TS9WZGpkblFnQUFDSUpBQUFBRTRBQUFCNExUZi9uR1p3WjIwQUFJaDBBQUFHOGdBQURoV2VOaFBPWjJGemNBQUFpQndBQUFBSUFBQUFDQUFBQUJCbmJIbG1BQUFXQUFBQVlpSUFBTktpQ0JtMlEyaGxZV1FBQUhna0FBQUFOZ0FBQURZVXY0N01hR2hsWVFBQWVGd0FBQUFoQUFBQUpBZjNCSkpvYlhSNEFBQjRnQUFBQXkwQUFBYWFsVFZJOEd4dlkyRUFBSHV3QUFBRFVBQUFBMUN4aXVTTGJXRjRjQUFBZndBQUFBQWdBQUFBSUFMN0R6QnVZVzFsQUFCL0lBQUFBellBQUFuR09EVllHWEJ2YzNRQUFJSllBQUFGd1FBQUNnbjBwcC9ZY0hKbGNBQUFqMmdBQUFDaUFBQUF2ZUcyWGlNQUFRQUFBQWdBQUFBRUFBNEFBbWxrWlc5eWIyMXVBQUpFUmt4VUFBNXNZWFJ1QUE0QUJnQUFBQUFBQVFBQ0FBZ0FEQUFCLzJJQUFRQUFBQUI0MnJXWkMzQ1UxUlhIejAxMkY3S1FoQUNiSlFIbC9RN2hLWUlFWnpwVlo2cDJWS1MydGJaSWJhZU94Q2hZMjVsMnhrNnBCVHBNbGFLQ0tGV3FBdkpvdzBNUVFSZ3FEeTFXb0tDeUVQSXFhaEpodTVOQWtpYW0zdjd1M2UvYjdDWUxMTFIrWi83ZmQvYyt6cm4zM0hQUE9kKzNva1RFTHcvS0ZrbTc2WmJiWjBwVzhleWZsa2krZUtnWHJjVzA5eFBQMSs2OWVZQU0rZnFNbVFPa1lNWWQzeHdnazJiT3VHMkFGRGw5bFBOTWM1N3B6dFBqUEwzaW0vUGplU1V5ek40TDdIMkN2VSt4OXh2dC9TWmtHWG1Ydmh1dXlBRis3MHBSZlh2YXVlYktaSmtwODJTSmJFL3JtcGFWdmlwOVRmcEdUNG5uZWM4cm5yMmVmM285WHIrM2h6ZlhPOFY3cTdkWXVraStycE4rWUxsdWtoVzZUaFhxc0NyUzlXcTZQbVphUVQ5YWx1c3dyUlVxcUEvVHVrak4waS9ic2ZXMDdwZmw0cWVsakphbGpDdW45V1BKWUd3QWpXVXp0dDV5RHVwYVZTZytldTFXMDNuTzBpRm0yb1h4M1VBdkVBQjlrVGFTNXlnd0doU0FNV0FhS0FMVHdZM2dIdkJ0OEIzd1hYQXYrQjY0RDN3Zi9BRE1Bay9xby9KYnNBQXNCSXZBRXJBVVBBZVdNWXZsK3FDOEFOYndleTE0SGF3RDY4RUdzQkdVZ2sxZ005Z0N0b0kzd0Rhd0hld0FiNEdkWUJkNEcrd0dKMEFJbkFTblFCazREY3BCQmFnRVZhQU9mQTdPZ25QNnFQS0JMcUFyeUFCKzBBMTBCNWtnQzJTREFNZ0Y5K3Y5YWpiclZlaTZRWDRrODNVYmE0K3c5Z2hyajhoQ3JIc1J6eVZnS1hoV2ZQSWNkY3Zab1JkNHZnaFdNdWFQNENYd01sZ0YvZ1JlQWErQzE4QnFzSWJ4YThIcllCMVlEemFBamFBVWJBS2J3UmF3RmJ3QnRvSHRZQWQ0Qyt3RXU4RGJZRGM0QVVMZ0pEZ0Z5c0JwVUE0cVFDV29BcDh3NzAvQlo2QUcxSUk2NXY0NU9Bdk9nVGJ3SC9BbDBOZ21KMXNwd0VsQnJ4SDBHa0d2RWZRYVFhOFI5QnBCcnhIMEdrR3ZFZlFhVVQxMHE4b0JQVUV2MEJzRUdKOXJiYjFjRGRjYjFBZ3dHaFJLaGhvSHhvTUpZQ0tZcWkrb2FhQkliOFBTejRoU1JXamEzQWZKT0hZbXhNNkUySmtRdXhKaVYwTHNTc2p1d2hxZWE4SHJZQjFZRHphQWphQVViQUtid1Jhd0Zid0J0b0h0WUFkNEMrd0V1OERiWURjNEFVTGdKRGdGeXNCcFVBNHFRQ1dvMGlHMEUwSTdJYlFUUWpzaHRCTkNPeUcwRTBJN0liUVRRanNoWnBtdkQzRDJ2K1RzTk1nSzFqVUhuUlRyTmxXaW05VmNiSEVlUHVReFRuNGFmc0JIcWRYNmk1Y1kwOENZajR5Vk11WWorb1pvYlpDdXRMVFFVa2JMTWJUMkVOd2E0YllCVGtmb1VVT1BmTDFURnN0OGVtMW43QkZhcXhsZlFZOW1lalJqKzR0bGVNTGRqQW5CdVp3eHJYQ3VZVndZem1IR0hiQmpQTlpqbFNCcnJtNkJVNHQwVlVISnhnK0dhRG5zOUw5QWE3VnBaVXlZM1EzcUtuWTltM21Xc3JzSDFCekpWTVhVbCtpdGFxNTBONnVYdE1BbTQ1RnpCK1RkTGxOa1BCSGd2SzdYVGFCT2g3alhhbXhYbjlHdHR0YlUxOHYvZU9tbjlIMnMxLzNWcUpmaWgwWHZnWGRJZjRxc1N1cks5R0hwcjkraGJxLytoMzd6Q2lXczFpWGNtK3dhd3JwWno1Y01QSUtJRjc5dEltaTBWNDEwUjA5aVZxUS9GVC83K3hWY1Y4dFZMOU5QNkVwT28xL1lhWDFCNzBWTCtGaXJwYlBjSzNVTHVxcVNxZm9RdmMvb2FyM3ZDa1Y0MEV5ckx0V2Y2VkluWWh1NXJiYTJHYXRybjB1emd5YWpSZE42Sld2WE8zVURpT2ZYZHRtUktVcXdsbE9oVjdINkRRbmpqNkdoQ3V6WjE1R2ovc3plejdEQ21pdlFsYy9CVjM2aHF4WmRvMDhsblVISHZoZXVXa3pHVnpEenMvb2wvWkZlbGxCWEFlckkzQzZpVTFiYmlzKzdjbGt0K3BXT2E2Q3VDcytjUkd1Nk1TV2VwZnB4MXkrMXowbnZ3NWJlaDNPNVB1SlU1ZXF0dHVVSWZ1WjgxSk1RTzY5eUgxSzI5TlN1QUw2aUVnOTdSQy9BZC9qd2FzZjBidXFpM25XenFhTVVmeGJycUpQb0RyRjNRYnhDRytkcEwyTktUVXRTVGRVYkh4cU5CTVNpM3JIYStHdFFZdSs0WHo3OGUrTWxMTEE3dmNyY1BiQnp6YkErbXRqamVnNGJsNGJIcmFIOTZtSTlWRXZNSnBKWUZ4WlpiZTlsK2lBOHcreDZWdnNzblhWYzlMUnJreWxIZlV5TnRlL0tKSjJDK0pkM1RMeUVxOStaU1RXN3NRZXBSL1VldThZS2ZWeUdtN2xiMzFvV3R4SS8ycS9SRVJQQlRHVGtWME1uTzhteEZsaWlkK25aRG9kVitqN3UyMW5QQ2IzZTdsREV0VXZiYm1KZGMzUzIrbkU3bzNwOXMxNU5hWDNTZFZaYTZTZnBkUkNlOWN3d0E0L2pUK2dVWFZ0VFo4L042UDJPdG1xalhpQ0pDTCtUQVp4MVp0V0doRllibVpySVN0ejlDTFArcGxqTTlzVWtHRXRxWmZRWmg1Yy95UnFhb2oyaHM5YmJ0Rm12NlhmdHliRzNETW1MMlRwOFhKdXgrZzhZNnpNMUp1WW16V1pLOUVrck82cnhVckpKbjdXck1pczNZdjNTY2Q0UlExWWJKemxsL3BoMW1iUDNNUm1qc2ZHVm5jNlFhNjJSdUYrdFdMNjV2SjA2OXI2c2g3dEl4TU9POWxxTm5MZHJhQ2I2WkZpNTlRN1ZPZnRRWU0vbFdldEwydmZjajU0YW5GaGZiVzIrczRRRitsYmVYYzBlOWFKL2pkNXNUcWhlcTkrbGRCRGFRMTJJREhncVByVU5uN3RQTDQ3NjF1aHBZc3lIZUM4VE1YaTNoVlBuaTB5SkdmcGlsdUN6UHNEdjVLMU5SdWZzaGZFYXJsMDF4dmszTTdyUmVqUGZKWE1Bc2ZPdVNleUZWZm1TeHVlVzVPVjI3NUtvSy92TFQwNW43S1N4ODlna212VkhiY05vbjV5bUlvRmJ1WFArd3VpMnlwV3J6MW1iVE1oK3NLbTJqcm1FMjQ3ZVc5MmNyMU8ra1JIVGlQRWxOZnBEOS96cjQwZ3RUMWhEODZYMTZ2Z29jMUxpYzZHb1YvekFXa2Z6UmZPV1lWY1JLWE11ZVZJK1Fab3Y5YXcwNWpFdW5zdjRuSGpXYWsrVEg0MlZrWEdjaWxxMUUvSGFPQWRHYi92aTh0YW92Vm52YmVOZUd6MzJKc2plRnp2RllmMnU5VUVSZTA3bVl5LzUwaC8wNG5mVUc1OUNib3Y5OHVmYTQ4M0duK2czcVg4L1pnMWhHY3lvdUxQbDlPNGY5WmJJV1VlLzNlUjdGenBxeVluUVBzbU1xek9SNTNNeis0VE1KOTZhTXp0a2NtRjNOdkVXYWQ4TFQ2ZVN5OFo0ZDdIbm9yWmRGbHhxc05YR1pPOGdOdWJxcUtZdmFSMnQ3cnRRTENNSXgwa0lXNS9ma2xRQzJZYjlIcHFDaE1TekhJdHpyaFcwSlorbnpaRUNOajQ0TVNreEx0cFQxdEdQbUMrL2g2d244YWN3dDJxcndUQnYwL1ZXRDI2KzVJdDdzMHRQa3V1L3B0L2pSQ2VOb2tuMk5CRG5HMUtaVlVOY1Z1RkxnYisxT2JRWW5iL2ZScnh5ZXdyckhTMVZKcDU0YzY1NEUvalN2SWRmTEROT3RFQmpaL2IraFkxQXFiM1o3TEZ6cUV1aDV5bHJhYlhSYzJXL3paem5uRVpYNzIzZmh3UmI4dHVvZTVnOXJHLy9Cdk4vZnhQY3k3cTdwZmdldDFHeTdQOEVQbXpINDBUdVJ1dkJJbzRXYXhQWFlMNTYyRWp6NnVWM3djUXNkT0lobC9BNHVXRDhQbmdkenQ1T3VZUVA3MVpqczhYVXZuZjFpdVVkZmt1K3hIamZJZm83a2RWYVlYWjB6WmRaeFQ0OGNxYjF4RTA4TTUzVDV0aTh5WlE2enBNSTMwRFV6eUMzRENSNjE0dElLS2VmTCtZeE11UGljcXZyOFRyNktDaUVoT3BVK0hmeTFORVYxTWQveStpMGhoWWIxVnJjM2xkOVphVjYrcTc2eThuVmZrOVJrbXZlMHNuZDg2V2ZGTXRDV1N4TFpZVUtxakZxckNwUzA5VWQ2aTUxdDVxbGlsV0pta3ZzNkltMUxtRGtJdGtoODJXbkhKV3RjbHlseVNIbFUwRnBWY1BWYU5XZDBSTlZqcHJDK0Q3cUZ2VU5kUzE4N2xDRDRIV1hHZ3kvdTlVUTlTMW9LSndmVU1QVVE5Qm9aRHltQ3RSVDZtazFTUzJISnB0L0E5VXo5cHoxd0Q1eStOMVRKa041V0h4dld3b3dwd0NyQ0VvZmFqMDIyK2hyLzFPTFVrNnNsQTBQbHdLV1d5Sk5CZ0g0UjJseUI4cUxQWTFrbDl6V2dFTTVzWktaVTY2ZGwwdDlIRXFIUjJmS2Q2aXZRLzBzalpGQ0dTblh5eWcwTUpaZjEwTUZZSXh0S2FSdW5JeVhDVHdueWlSYUpzcDF0czNRcUZocEREeGNNaHpHUXFNNjBCaEhScFRHMjFFREhicmUwa0NMZ1VncGNHck01VW9vZEdoVXJGVEkzTWJaK2JrMHdhSENtSng0bXVUUVJJZXVzeFM5a3ZVZkhTTXpGKzlsTEgwd2RBMDBtSEpYTEw2YkRISEl2ZnJMQUl0TWs3VjF1SzUxS1BIN2tvdWhTZDhxakEwTTdkQTJ3bmdEM2dFemVHY1lSaTQ3M05aYytaVTRGN0Z6U09QOGVpSEYvTHRnWmQyZ2RLUmwwZElMU3JjelNyZTIyTmRhb3NkYTNqWFc3Z1pZcS9OYXF4dG9OZVd6VXJxZ2t4SHdITWtlcDF1OWo1UnBjaVBsMjZBMHVVZG1VWDVBZnNMb0IyVU9QQitXbnpINjUvSUx1UDFTbm9EUHIrVFg4SmtQNWNwdm9LQThpUS9KeDlzc1JOdUxvSHo1bmZ5ZStxZmthV2EwQk1xWFAwQjVlS09sbEorQjh1UlpxTHM4QjJYS01paExsa1BENVhrb1cxWkFJK1FGcUllOENPWElTbG1OeERXeUVRNS9sci9Bb1ZTMlUzNFR5c04vN2FhOFIvNkszSGRrUDdvNUFBWGxJQlNRZDZHZ3ZBY0Y1RzlRVUE3Sis1VC9EZ1hsQXloUERzc3h5c2ZsWThvbnBBcHUxWEtHOGlkU3l6enI1Qnp6REVOQitaYzBNOXQveXhmTXMwMjA5RkNDejh6QloyWkx2dXFoZWtzZkZWQzVrb25uRGNvZ3ZPZ0l5VkFqMVNqcGlWOGNUYmxBRmNnb1ZhZ0taYWdhcHlhS0grODZSWHFycVdxcWRGVTNxQnNvVDFQVEtCZXBJaG1HNTUwdVE0enZsVjdxVG5XbjlGTXoxQXp1TTlWTTd2aGU2WWJ2blNXRDFmMXF0cVNySDZvSHFNRVBTMzgxUjgyUk1YampZaWxVRDZ1SDVWcDhmNG1NVTQrb1J5Zy9xaDZsejF5aXdXZzFUODJUc1hqdHg4VDZiV1RodDZYYmZ3RXpMRXFOQUhqYWxkUkpUQk5oRkFmdy8vdGFTaW1sckFvcVlrVkV4STNONG9JN0lMdW1hWXdoSkZCWlRLQVVRMXRFUmRTS1c3MFlEeDRNTHFBWVk0d0g0OEhnRWcvR2cvRmdQQmdQeElNeGhpQXh4aGhqakFtK2VRd0c0b0Y2bU4rYm1kZDU4L3A5MzN3Z0FCYU1HTWFnaWt1clhMQjUzSDR2VnNMSTl6RXh3VG5BQkNzU2tJcDBaR0UxQ3JDQno0M2Jha3ZzY094d3V1eHdPbmRWMitGMU9TdnRDT2xQRVNJUmcwUXN4QklzeHhxc3hVYkpSRVBCREJ1U2tJSTBaQ0FiT1hDZ1NNOFpFSVZZek1FOExNSlNyRUF1Q3JGSnp4bTVhaHptWWo3c3lPUU84N0FPbS9WY0JCL3hTTVlDTE1ZeXJFSSsxbU1MdHJyZEhqOEZ4WkI0VWJ3c0RvcDNHdDIrWnJvdlBoU2Zpcy9GbCtMckptOUhPNzBWUjhRUDRxajRSZnplMHVsdXBGK2FDcUpKdElvSllvcW5vOUdqMHNRTU1Wdk04UWJhTzVWRExCSzNpMlZpamVqeStYSnlWYTNZSUxhSUhyRlQ3R2J6VksvWUo0YkVDK0lsc1ovTlY0UGliZkdlK0VBY0ZwLzVBdnQ4Nm9YNFNud2p2aFBmaXg5OWdRTStOU1orRlgrSXZ6VU5TalR6MmxGODBIOUViZDNNYmxRWW1zTlFUZE13N1R3NkRJMWhHQkdHcGpDMGhLRjFGbVA0cTgzZzc2YUF2N1ppVk1HRk9qVEJBejk2SmtlZVRKTmpRSG42VE96VjR4NDkxdW5ScThjdVBYYnIvemFvWDkvUzQwMDlEdXJ4T3RmTzRuMUFzVWJzUnh0R01jNVhtYkNRaVNMSlRGRmtvV2l5VWd6WktKWXo2WWlnT0lxbkJFcWtKTDYyOCtHZ1FqWU5KcXFnU3FxaWFxcWhCcTZjeW5ObjRiMUI4WmpaNkJ3TVZFUWVDa25VT2piUytiL25QM24vSVh3VHgyVzMrc1FxakNHWk80bjd0NWVwSHJTM3ozd3Y3dktUTS9la1lsUmdOL2ZZUzM3MkdBWFk0OVRGbnFDRGJKQzYyWk4waU8yancrd3BPc0tlcGg3MkRCM2xxc1E3cWJhS210SEt2WDNtM2d3OHZrRWV4MzVjNDh3QWhuajlhR3ZvTElieENJL3hSRnU5bE1PenB6aVdVRGtQZVQzVnk2OFV0VkU3M3lkcUpaL01SVExYT3N1MXJ1QXExeHZnT2JyQjh6VTBWVXVyd3pWS2FTZVZVVG5WL3dHaFN1MERBSGphWTJCaDBtWDh3c0RLd01EVXhSVEJ3TURnRGFFWjR4aFNHSFdBb294c3pNeGdBaWpIRHNTTURGRGc2K3p0QStMOC84djg2OTk1QmdibVg0eUdDZ3dNazBGeWpGK1o5Z0FwQlFabUFEdlZEZ0lBQUhqYXJaUjNkRlJGRkllLzM4dUNJaUlJQkFLRXpld2lvZGVFa2dDaFNCTlJlaUFKdlhkQ0Z4V01CYVJMcjFGUlFWSGhZQmNGc1hIQTNrVkFNTHZZR3lxSW9rald1MHZBOHBkLytNNlo4K2JPbVhkbjNwM3ZHeUNPV1BQS0k2SlBva1dLeGNWMTJ1SVMvQnFidzdsNS8rR0pVMTBOMUJpTjBHSlYxQUIxVTNmMTBWTFZWRWZWVUV1TjFUaU4xd1JOMUNUbGFyS21hS3BxcWJaV2E2WFdxTDRHVVl6aVhNVEZ0dllsbE9SU1NuRVpwU25ENVpTbEhPV0pwd0lWU2FBU2xhbGlPNjZLWHozVVNqMlZyZjVLNEJadTVUYm1Nby9ibWM4Q0ZyS0l4U3hoS1hld2pPV3NZQ1dyV00wYTFyS085V3hnbzNvcFE3MlZZL3NQVW9NNk5LUVBXZVNTenozY3hkMXNZVE5iMmNHVFBNYmp2TWcrWG1ZdkIvaUlJeHppTUNHT2M0SWYrVW1aV3F1UkdxVithcTBzOW1pb2htaVlLaWxKcTZqR1FOQ3lhSmswV3ZsL0ZVMXg4dGxyRXdWcW9IcmFjR0U4WFMxVUJ4OVhVSk5CWlBPeE9xbXpHaXRGRGRWSUsyeEtJYk0xWDhQVlhHbUtWd1gxVlFlbHFvbVdFQ0NGSkZKcFNsdXVwRDBkeWFTZmZaSERCQ1l4bWUycXJDcEtWRlg1NVZSZEFTVXJpQzl1azgzSnBJMmRRd1hybGFJQmFSWmxNNWpybVdPcnovR3FlTTI4M2Q1Kzc2aC9yditraTNNbFhieXI3UHd1NkpKZFE1ZmkwbDE3bCt0bXVRVnVXeUFZV0I1WUdTd2JqQThPUHVNVlJpSm5JNUhZcjVYQ1daWFRiVzg1RE9FR05xbUxsMkI1ZDNuN3ZJUCtQUDhKNTdrU3JweExjSW5PeGZJMmRtbXh2Tk5jM3IveXFpaXZJcWVpTllQSVhsc2hjTDZLaFRNTGo1M3ZoelBDYWVIVW9uNng4SUR3aEZBazNEN3NDL3RDaGFHZG9iYWhNcUhTQmJNTGxoYWtGaS92YmRIV0lpOTZXcHRvN1RwcmVjelRBUzhqT3V5MThkcDVYYjNNYy9tOG5sNm1sdzMvaXlmL2NPTHZmRjlnMVdla1JFbGJaeXl0Tjk2U2pMUTRJMmFETmhwMWljYmhNczNRVEdNdlgxbEdSWFZObDg5NFdxZ0ZXcVFHeGxTUzFhaG1qUGhxeG54VE80OFU0NlZqRVMvcDVrQk9qSmxCWkdtNXNUczVSazZ1bmRaNDlwZ1orZWJHRnJOanM1RzcxZHpZRWJOam4va1J0ZU1aOCtPSUdYTEk3RGhzckJhWUljZWpqdkFIM3h1MzFiblhHTGlUWk82akZ2ZFRsd2VweDBQVTVnSHE4N0J4dDQxbVBFVWpIcUVKVHhpRk8ybk1vN1JrRnkxNGxneWVveFc3amMwWGFNM3pkT0UxT3ZNSzdYaUpxM2lWRG15bkUvdTVtdGZweWh1OHlUVzhSVGZlNFZyZXBqdnYwb1AzN0dUZnB6Y2Ywb3NQYU03VERPQVQrbktRL2h5TittYlVoeG5LcDhib01ZYnhHU1A1a2hGOHdYQStaeXpmTW9adkdNM1h6TENiY2lvL0d5VS9NSjFmbU1KSnBuSEtuRG5Ealp4bE5qY1pTamZMSTA5aUZGOHhqdS9Nd0dDUmY4bm1Zb0JaL001TVRodG52ekdIU016eTFKanZUZXhtNmF2V2Z3TE51aW9IQUhqYTFMMTVmRnpIY1NEYzNlK2FBd05nN3NFY0dNdzl3QXpPd1dBQVhuZ2tBWkFFUUJBOFJCS2tTUEFtb1p1U1pVdVdMRk1INWRpU2ZNWk9mQ2kydFpIajJMRXRmNWJ0bnhObEV5ZStyeVJlUjhsYUc4ZkpPbzZkdzhsbm0vSWxEcmFxKzcwM0J3YVVGTy8zeDBjSjE3eCsxZFhWMWRWVjFWWFZoSkpOcSsraFgyQS9JaElKNmo1Q0tMbk1LS1d2SkFRK2tkeVNHaXdFM1FuM0p2cUdNOUsrRno0S0h4TkdWUGoyQ2ZZTTBZaURGUFZlQjVVSm5TY3lZVlJtRjZDRmI3Y2lBUlEvWFNERWJvTm1tdHZ0VnJXdVFvbVdhQ3FYMEx3bFNhWGVSMmpIL1R1cTM5MTU0N2R2WXM5Y25mcmM1MmlTOW1HL0J3RCtKWURmVG9La2gyeldOMmhVa2FBSGlTaXlwSnhYS1dOa21mZWpVVm1teTRUMzFSWHE3SWpIUWoxZFBWNTNSN0F6Mk5kajAwSUZiMklrNFBlcFdnQy9weEkwNVMrTmpKVkhzeEwvbmtyNUQ5REs2VmR2TG0yWnZYUysra2UwOElsUGxMWnN5WTFQVFkzL0NYdm0zTDdSZlg3djRZMkhibUpIUGxmdTd5OVhiUnVIaHpmOERaQ3B0UG84K3lqN0lrbVFZWDNBNzVNbG1YQVVKWGFTTUJiZExWTWc1a25BTEVZWEtPa0tlanB0S2tuUWhLSUZDcG1Sc1VwUVZWUEpBVlllM2NKS0k0R2dsczJta3UzTTcrdG05UDFqSjlON2h0KzBNSC81NVBqNHljdnppMjhaMnBzNVV5a2Ruc3hrdGg0NU5WaWNuOWcyZnZLaHVmbUhUbzV2MjdBNFVNcE5IUnNySDl1ZXc3azVZTXhORytuQ3VWRnF0QUxjNkxKTU9hM2FYWVM0TzF4ZDdWM1EwSmxRdFdDaDVFNk1kQU1DN1N6bFRibExJMXNBdHdGMmdKSzVCNDZWeThjZW1KTWVlV1J3MzZaVWF0TSs5c3pZOGZ0blp5OGRHMk1IcXI3czFpT2pvMGUzWlpFM0tPOS9OL1R2SklONkVmQ1JaQ2FkQnpLWVNNaXlzcXhTUmZFcndCelF5dW5HZjVvV1FRVDg1bjhINkpYcWc5UlJmWjdlRDdQdzUyZStmTTZFUFFldzdhUlh6NjZGclFBeitHVUVheWQyTjJlNWNBMnErd0Q5V2ZWK2FxditIQ0IrNlV6MVdZRnZhZlVLK3crWXh5d1owdnU5SHFZd21FV0ZBSi9KNTJFaStSUkdrWGJrSkxTUGtRVzNKNS9KcDFVdFdxQklxOVp6Q0R4V1NaVVQ3RDlLUjE2ekMrZHAvTVJEYy92Zk1YSWd2YkpoNU5Ca09qTjV1SFRnbGM2L0F0NDROUGZBOGhoTTg5d2NUTGUrYWZmQVVHN3FlSG5zMkhSdVpmR2N3SEVQalB2ZG5LWTVQUTEveXhLVnp6T0tZMVlWSmtsK2FTMHRZZHp3bFlMdmUrNmkxOTkxVi9WMzJUUFYvMGx6VjZkb3Nmb3RBUmZmK2dMQWxVaVhIdUFrWk5SWXRtTDFjN1lvdVJmdXd2VXAzZ2tBMzQvQU94MmtSNDlwS3FOSUw4WmdabUVlREJKNU0wa0pWanVGQlpmTTVpcUJBQzQ1ZDRtTnZPUGVrNC9HYmdrc1RFd2Z1SXUyM2ZmYlo0LzE2bHRQN0tFZnFmRU9qdE5CTW5yU3JzSmFBcmxDK1RobGlUSG1aNGlaZ3pnOEhyZUM0Z1J3QTRsQ1U5UU44SWJlV24yYUxyMjMrcGN3MEQrbGV2VmoxYmZUWGRWUEczQzNBbHlGeFBXb1lFTksyUW1KbWlBVm9yamRNa2dMVGpjL0FMc1RSdndIRjhTN1VvYlRIdDUxcWxTQ1YrZVJUTDdkRW1EbVI0WndlMlRndEl3RTVDNTV2VWgxK3N3dmJuM1AxNy8ybm9zajlDZFhud09FRHRNUFhwMWl5ZG80bitSODNLMUhOQmlZTlV3REpZRFlpU0M5SlNvQk9PcE5IYmlUM3N3dTNsaDlQYnNJMEdUNkFrQnpYSDFleU9OUjRPR2ZBdzk3U1k2UHNCWGI1dlA1TklKc1pOcHVwc0VpcjNIdEZzWitYbGwrWUhiMmdlV0srZk9lMUpZRHc4UFhiVW1udDF3M1BIeGdTNG9lbnhPU2FjNzhPWFpzS29kQ2FBeUVVRzc3TVZNT3ZZclBwUmRYRnV3T2xNa1VaRGVnWkM1WFB0WTJKeUVkTHFlM3pZc3ptMDVvZkJxRTFFNmwzRjVUWUIrZ0V6ZGN1blREWnovMnNZOU9Uayt4WjE1OTR0aXJxMWZZb1gvWldpNXROZW53TFU2SElCbEVxVHc0MEFVc3BNclFvOFRtRlVwMnRhWk1NWjhYbEFFeHFPWHE1WEkzVTRKalkrVUdFbzFWY3V6bjQ4T1RCeWZUKzR2MWRLcGVYWWpFNjJrVkt2b1c2Zkg1aDRkbk4rL3krdXZvOWU2amljTWo5VFN6MnkyYTNRYzBjNUVBR2RmTE5zb1VMb3dZVmRoNTNPb015cW5HN3RyUlRvaW5zejNRRVlCWFhPNUF3c1lYaGJIamVWTlNBL2txNXgrY20zemI1ZGQ5NEpPZi9HUmxDaWo0eXVOVDV3TFZ2NldoNmcvWW9iL2ZQREt5QlhnekJPdjdFUHNDNlNWOWVzNEhxOXRQR1pCdHZvNTBzQ0pPQXYxaTBrSi9wcEJDMGxXTU5UNmF6ZVd5MmZMb21DVU9WYjh2RUF6aTVvdHNsdzF0M1g3VHB1bkRHNmJ2UDNMa3NUc1gzclJwOCtqdEd5Ym5TeFAzcnB6cm5iMndaZDliengrdURFNE9GWXF1UU9lUm5jZGZNVmc4a3U4ZEwyVDY3QUhQOHA2aHZST0pDYkdHdW9CV1o3a09rdEM3WlNTSXVjT1lpMXFvSFNnbnZPV0VQd1dyc292Ti8vQXVkdURDaGF0L3dBNEFqQmtZNjlzQWhwZEU5SkRFMXpTOGJVbXhsTGR1eFdSQmdMbDlwaVI3VzkvOExkc2ZmdDlkSi9ic1diNkxGbmZjc1ZqOHZUZlJOMWR2dS82V1c2Nm5id2JZcG82a0luNndySnVYT1BTaEV0WERwVTZDb3RpZ05GRDl6L3YvNW4vZVcvMFJDSjgvWnR0QjVGS1NBV28veVBkemdOT215VnorZ0RCRVpHVlRBSG5jblFwSS9VUktRa0R3djVTUzZNYlh2UFBWRjk1eCt6c3V2UEtkcjNrblFGeGxsSDlOTVMvQWRRQitIK2R5RGVTNDA2WXdlWTFnODNpRUZDcWxRQW9GS3lXSnBxUzNQMEpkMVRkLzh1azMvSkoydk9tTDlBYTY3eGUvcUg2MCtnN3FNY2I4SVlCcEl5bTlSNU9wMUdyVU5tTHplUGlvM1dMWWJocXAvdXNqWC9uYWc5VWZBclA5SHBmZEI2cy9BbmdKZ0xlVHkwblFKVlFLQ0FKSVlFV1lmOVQ1K0d4Sm9OS1lPeUJzK3lBNStjNVFwZ3BNT3MzNEUvVDExVmV6N3VyZDlMRkZacGZPTFY3OW1YUnVkVlhNai9SdWxvWDFSYWhHdThnOTVJdGtnMTV4Q20xV1VaWExPRU9YRy9SYXpWaDVsSGEwdTlvY2RtcWpOcmZiWTlQU0JRdm1oeTJZTWJJRU1LZjByUUptTU5EWklTdXpOcXBBUzBWZGFRbloxUVlEODdSMXVib3M2SGFBVG9nRi8zRUxmcGpEbjlHM3U2aWlZaDlBRzFWUkw5czFCanRhSStZMkEzNGJ3Ry96dEFISGRMUmJQVGpxOFgvQ2doOG5rd0IvcHo0dDhMZFIxYWs1Sk1CZWFjVGRic0R1Q2lIMm9JT251bEplZDF2UUZiUjZhT05qRUxhRGREL1hIenhrbXo3cEFRbURDZ1NSYktqTDJZZ3EyOVJtZlJISEl4UkdkeWU4Mk9FVy94eGFEQ3dLVU8yQ0pYOEt2aEtXWmNFdVZQZk4vTXZuZHY2eSt0U082ajhJQTJQbFQ4NTlmc1d3TVZyTWY0Z013MWduOVUzV1dJR1FaQTBadFhveWRyUUJGelJOVXczMlBSYnNLSjhuc0dNczJBU0plUDdsUVFiYXJYYXhyd1B0d2lDZWJ0RzlNWUFEalNVWDBGQ2FsNmhFNSthZVNpMGUxdU9BZ1N5cHNnR1lxNGhjNVVIVEpNRVdJcUFqbUMwb29NRE8xaldVRnBiMFRrS2lFZWdtN1BabnNtNGJLcFNnWjZrb3pFdW03WUppdnRKZ3pBMFA5a1JjWVZ0blJ5RTR2S0YvZUhPZGJSZWZpSFpGVmJYc2NJNFdNbHVUcHFsbjBlb25GcTE2T0swVzlkMkNWazZxT1dDOWFIVWNaN09wSjRtcWhuZS9QTjVyc1g0aTVLam9xd3RtMjBVMUcvWXB6WWVvTWdzdGJKcGlXNEYzTktKcXJmbWQwbVJQTEJMd3VUc2FWaEx2aTl1SG5MODBRNzU4VlBCWHdLL0l3bGFVRlJrNGpBR0hXVmFqV21jMU1wck5wRlBoa05kdDEyaVNKVFV0WWZDWGdQMStDM2FTUEFxdzUvU2RhYXJJQm53MmIxTlppeDYwdWg1U0tVWlR2YW5lZkM2YnFmVmpGLzF3MjhqQmJkd0srWUx1TC9TaGphdkZZR2w2cUt5NHFTVEw4M05QMllIZitsQkRrZG50WUo1VDVUWWdsU1JMNTRpbThYbUs3cmJWZFJtWmU4b0ZieFR3RFZCdkxyMlVWOUNPckdzdDMzZk41a3RMZXBDU3dmNThOaG9PK0RwY2RwdW1rZ3F0Mkd1R3QyWjRBMnJHQ1hvQ0tnUFN1dGI0d0cvc2NnMlVwMGF6bXdNWmQ2OHYxcE9NcDBQVHJ6dzQxTm8rSDlzbWpVckZkR0dEejF0d2RRUUR2c0JKYmN2eDE4eTBzTmhyOC9tNE5aL2gybnpLaWpXZk1IamxNazRxay84cjgybjE4NFRWVHpmNUZmUURVcmpHa3dxb21VeVJWMXF6WkJvNjZNdW5CdElETmZBMkFBK3d1ZCtCODZUTjRNbWJ4TjRSaFJtajgzYVRHVUdnMnBwOEVwb3dPaU9Sam5aS0k0bElvaWZlSFFPOU50d1JwaTdhbG5Sb1NiRjNoT0FiV0hla0V6U0RUZnFFUWlrZ0J3UTRid2ZkbUMwTE0xVFRwR1diVUFrOGJrSzZnakRWWG5mQ2s0RFhPaEs0YTZDT25DbzMrRHY4c0lQNFRaL0h4YVdsZXEvSHU5NWwrajNvd0VuYVgzTjlmUDdrRitwOEh3WU5kdk0xYnpmVy9GMUM3b01FZ2MwRUZOTEw2M2hFYk1JalFpbnN5akJrMm9iN0c4ajliS0VHOThNVzNCZzVDSEIzNkZPaG9MdFRWbWZ0MUpSUzE0UU9rS25mNndxM2g2MGVITmhESGU3dnQvcEk4ajZBQjl1cHB0SjVoNDI5MkJqc29oY1g5T0x5dXJ5b1lWajlPSnY2ZWR6cUoxenJSOVdBQVRWVnU0eWRvZWIxNi9memhOVlBuR3dTL2RpcDFtWnpTa0F4ZFQxNk9VUVA0UzZrV0U5M1Z6cWM5bmxjb2ZhUTFZOXIzWDY2eWVlaEgxM2ZURFErTGVwTG1KUW00R0pTV3ZCVGlBeUk5UXBqQURLUmF4REpWa2VrVGhkd1ZRTjBDL1k5RnV3b253ZkFHMkRqcGdkSzJIOEZzdkJ2ckJhNWZ5T0FWamdzVWJCWk9tRm43WUF0UXpKTURHam5SM2pTS1JBQlhkSkNKc1UxOTBnaFE5R0xRdEhZNGdLNkxBUTBtNmcrZXZGT2V1UEYrWm5PUkp2RDI5WWRCZDMvNnEvWU0xVTcvZGtMcTFOenNuU0VzVWhjOU4vRnprRC9jWEt2M3VHbmloYUEvWjJoTG1GcVNQbVdnOU5nY0pvR2VDa0szMWdTS213K0dhc3A2bXpxMlZadmFFSm5nZzdqbVJ6WFRlMm9tOVk1TkZNdGxLYzZKNmZVcERzWlRzOG10ZW4vRHpLUSsxTzVySElhc3VvUnNRLzR2TnkzV2hvcEZrQmtvUTZzVVJSWjEvSzE5dWFIQnZMbDNqTDN1V2JzV3E1UTE4ZmpWaDloczQ5ZWdNajdZVUtRMkVHUVVLN0dyOTlIUHA4ZnlBKzR2YUlQaDlacjlGSDlMdnFGclQ3U0ZBaEpidnFVTVl5NXAyTEFScmxyUU40TkRLUXR3MVJFTk9DaXROVVMxNVoydWlVcVN6cDZjRGtlTmdzUFB0WW5MRHpFbnIxVjMySWdRalFnSlVVeGMyMUNna0pVNmkzVkU1S1JOdmoyQXZkL0JNbEdmUndQYlp3cUl3N2dKdUlBL2RkaE95OVRaS2cyTytOY1RnaHlFclQzdXMxL0xpMHVXS2tNQmhoOGxiaW5CWGdzVVU0czc5K1B2dWU5ZSsrcS9pNjl2dnE3ak94ZmdYLzdxNFFPVkw5SjMzWXpqSS83dHZsY3RobHplUnVNYjd1dXQ5Z1BoT2Y3Z3ZCODJ3MXI1VVgyZ1owQWRTK1hvUzZ4SjY5K0VPQ2pINTFKN0RLNnVTL3p4V3djakZBSzZxSkNaU3FETkVvS0dLdmZnVGNybktjRmpOanF3d0FEWkZ0bmg5MG1zMW5RVFFFUWsxYnFJUUVVNm5JcUh0WERvYWtJRFdCOUd5QnM0dU1Wc01JY1Zsa2ZVU25qQjBoTXVxektvQ0N4eTRhWGxFTlQ0S2ZpVkp3T1VHYzVQTTJBOXoyQU1zVDVROENMcjk0azRDbFVzc2xnVkFKRWdaY3FJSG5jaUZrbzRJNTZvbTBPcFZQdDVQRHNBaDZaaGJaZnJZUFh2WG9GNFBVQnEwdDhtR3pOSU91QTRDQUJweitCSnQrb28zbG85VGpBNEtkUk9EeGlEVTZ1RzV4TkFjclhTSVc0TEt3K0wrMEEvalRna0hicWg5Y1dQOVhtWkxDbHdCcnNnalhvbGFtcFNaN0VGY0ZWU1Qwb1B1WFUyMjBxc3pHR2NocTJIMjludTExcjZHdjFGOUJEbXUrSEF1Y29ueGNZTitDTU93QTcvMklZVTVKZTdTTGY1ZnZlQWIzRHRNeFp2V1VlTUlDc01jaTk5WWE0NGRGYTBtRkpBTEFBMk9EbWNVZUxiV1RocmpXYnh4cURXL0R4WDhESWR0VHhYbVQxTjRSTjZvRjVnWkhBSHVtbWJCYUdDOVljV053U043UWF1QWNVOUM2MHFoeTJHaGZ5dWNKem9TYzQ3SFpqSGY4YndCN1h5d0JidG1rd05wREpZRUZleGhNcnpnU05aMGF3YW9Qd245ZWJTV21XL2dNeStOM3NHWURaSVdRdytRRTBQdkJwaHlaejE2SVF3aUhoWVZUNUNaSFFVV0FEanloQVZUOE1BS3ltMC9VdERCNUEveDExVXFmSEE0TXdiUGJkZUU3RStiYlRrQlVmZ1RIMGczMExpZ3Y2Z2VUTHRkTWo0L2lDVXI0a1ladHhBeHVrTEgxOUsvc0dNZUdreUJWNDc2SXdmWU1FL2ZnU2JRWUVsbkVjSGtkTTFVSmFCcllOTkRiUnUzQk9nS0RuMStBQlptOUhTMXlBaGxzNURUc05HajZIYTBpUUx0SUVCbGVLdkF5ZFIyVG9MSVNkU2ZMcHRYMjE2S28yN2xwZjNUUmEvYVk0L1ZGaERjaUdnS3dIQlRCb2U1dm1zWGtFTEkzRGdzV0FlOU5oZmhhQ0VRYlFGL3I0d2M2bjg2ME84RnpFNWZmekE3eXlWcTdBT3FuNE5kQzZibHhldnVzREg2QjMvdFBXQzF2cHJkVi92SGpoNGpjdTFQVDJKL2xjZXd4YjdXMWl2ZHNrZmg1SExITzF3WUh0eHRNK3R3b2JxQVhqL1JhTUpMa0lNTWIwVWh2WXZCd09tOWZxRE44R1NFNm4wdzNidlJmaDJReDRNRmRQY3ZwNWpMbjZNU0E3K3lrREpURm53VG9vamR6dWErQjJ5WndyZXd1Y0g3ZjZpSkE3QU9jdCtzWVE0TndHZXk3dlRKb1BVbmtXNEdtcXpIVTA3ckJ1QUp6S3BOSUM5MTZFeTg4Z09UMjlCajAvQVhBTG9HbUw0VlBsY3FObWNzcFk5ejVRd0RJcTEwaUlCZWZERnB3WWVRdkFxZWlqbzZYK29pelBncGdDWURKSXAxWjZUbC92OEdEdldOOFl3dFMwVEFQTXh5MllZUTV6UWgvckEwQlVPRlp3bnFoOHViWDIxTnM3MkR2b0RpQlVuS29hekNjc21IRnU2NE1XcFZIRnJ0b2tkRlMxeG5HczNOZTdhVU5aSDlPSEJucEgrMFlScWtQZ0NwSzNSSWowTStEN0VDbWlaTVlscU1CNjE0RG94cUdIWFdXS1FwWnQ0cEFtM0FYN1RyS3JHQzRHQTZnRHVkcWNkaEtpSVljV0tDVE1nMHl3UUFJQjlKS0RTcHJ3Wnd3ZDMzSnh2WG51RWlyNmwrYlkrZXJkMlJIYlV4L1RSbkwwNGF0dkd0aTdNWm5jdUhkZ2NCRi9McGFQWDVxYnUzUzh2Skk1WFRrM2NUYTNjaUc3N1dpcEJMcC9kaHZZQUVkTUc2Q1pGMEprUmVoTEtrVlNrN1dFUG1VUnV0aGI5SXZaeXhaYXdVcVFkd3VaREl3QXBJWUpYQ2RNd3kwNGl5dlNGcHg3TERoUnpnUDhYQWtVWjdxdTR0eUVFWStNTU0vYkl5UUg4M1hmM0ZNNTFFTmNzQ01XQ3ozeFRxWXFjb1FTUlpxUDhFOVowNmRMNGdYY0NFQmxvYnhIbU5HVHhyRmJSSStMelJFZm15ZXUzQ2cxajExaFRmZjE1cjM1VG94Q0NhWXFlT1FxSEplVmttYWR0ZVlrWHlCSWhTZFRHYzNtS0ZyU1c5Z1Q1dzhYUzNobVBYYTJyN2h5dUovL1hqbGI2QWtIYURreW1jTFRhL3FOY0tENlZiQmE4TGhmdVhIbzBrNDh1WTVIeXpjTTNjOS83WW5SWXY5aUQ3M1Q0ME5YNXNEZW51cWpYajgvK20reDNpSmN0b0xOTWdaMDdnTVp3K2JMVGVLRjRubFlxd2tBTVpPcm4wZCtSczc1SVdESW1SVnhCbVlYcCtVMUw1VnhibTZ2blp1YloyQmdLTkJJdUNzazRzUm9PMjEzQjVMR0daaUEvMzRMZnBMc0FQajc5RDFkWUdSaEgyemVXZThMTTNweDFIb3hUd2RDSWV3bjFCM3Fqa1VqNFlhKzJveStRTjdmeCtWOXdKRDNYd1VJci9pa0dJb1E5NWwxeDlGb1lDYk5kb2FCMldMWVMzcG8zWkh6ZWVObi85SjdBSitnUWRzZDVFdTRuL2xCancwd0VRZlFTcHpEb2pnbFdOUHQ2YzhVMHNaZUkrQTlZY0ZMa2d6QTI2WlBGb0VQTEpoU2JZOWNBOVZnK0VLaE1Gd1lkdnNRTmhmQUdLZmc1SEVLaytRemV0Q0tVOWdNeXZvSU1OZ3c4Sk5pbkU3MGdoSURmSFk3a0VYU2J1TTdtWEt1WlRmRzRVUWZ2aURKMnFXWDhJWmVhR2lzM25ldDFxQ2pPZE9adER1V0thUnNXdmRMREp0WTU3UWllODFnaXR6TW1VMXRhMDhzWG5QTjhJckJQUk5KVm1vOHVEaWhWZXA0NDNlc3VRelg1bEpXNnVaeW5jMTAvYmxFMk5WL3dMbTBZS2ZKUjJHR2wzVm5IZC9OUFJYaEo1dHJRVFlxUVZGRENXbzlBYUFNV1F6YUdFZlNnVEdGTXJyU0ZKakI4eGdOWW5yVHdPWlNGd3gzUnlmT203ZFVUbUZJaWVIc1NOMzE2TCt5K1IrKzRRMTNQVXBmKzljWEx2ejFrZXB6TkFQajRyQzVMQWtaL0w5Um5BYzQrSm1JclU0MTFOWkVzTmp0bE5vNzdHaW5PQnZPZ1FIblZRZkh1WnZjcXp2Y2dIQW50OTBFdStmQlZsVVY2WFlDaHBhcTNJZHVJVVUrWjdmVjRHdW1OZEdMVFpta1huclJ0a3M2ZXIrNlNiY2IrWmVmdlhlYllUV3QyVk5FMnlRNm1ua3dIQmNCT0ZzYTJXeUZIUkM2UXhmSXhMTmNKb1lNWHZnWVBOZ3ZoR0ZVYlNKVDQ5eDNHWE92cmlFbU4vbmFuTll4clRENTZ1UFUybURySGRXSHNVdlFDV1gwOWpKSk1heCtWUmprUnRTc3Y5MFB6ZHZTQ2JlSXR5cjVTMGEwbXI4V2JuWFhaeHVpMVM2LytzVHh1eCttZi9YRHJhT2pPbzZUeHg3eGZhekxrTFdYRGIrVUpRcHJFVW1tcnV6MnByeDF1cktBOFdFTFJveWNCaGdsZmFnbjNoV3ExNVhYeERZRi9MR0lQeGxJSXJ5YW5pemdQVzdCQzNONFpYMGtzRVpQWG9PYjMrK1ArQ05ndndORVUwY1c4SjZ3NE1YSkxxSEwxK3ZJYTNCTEpnTCtmRFpSVEJhallYOVBvQWNoT3Bwd3JORXR4TmNVMXdjdDNiSVZjaUYveUNOR215MjBncFBnNTVVZ0EycDY1UnJNa1BIRitIcnJZTnhqd1loeWVvSE5ZK21VYTBBMFk4SmwwTXhxRjQ5RFM1T0R1cU9ORXVZQzlzWDFqQzZqaUFMTXg3VkI0Y05DZWNZbFc0SnlHeDBCMExOTmpiamRCNTM0TTNrUnFRd0t5MXJQVWJZcHFPMmVsWUZpblNjcDIvZmd1OHdJdDFjLzRlc2VxN21Va3B2ajB1ODlXaGZ3VmpjM1A3SG8wY1BwQVZhTW5hcm9MMUxCSXRJMDVTU3MxL0R1LzlLODEzZ3pRczRLV1pyRW1BZXVVeVphNkpScmVrR3p0WDRPZVh3ZDU0T0lzUTcvQStBTzZmMHVtOEpqN1VBMkFpQjZ5WWk1UTAxOVdhNUYvbm93NERvdjlDY0I2d2tMVnB3OExYQTBZZG1vNnREc2trSlZXSk1OTVh5UmNFZDdJaDdPUkRKK2IzdFhSeGNIN0RSNHRSbkhFSGxTK0Jrc0hBRkJRTlBFVWFPcWFpSFozdDd1YnNmakRRQm83TGNDM3VNV3ZERDV1ckNITzJDa0FxWVJTV2JUR0pkRURiZ0NSRis3eiszaklPMDRlQ08yNWtNY3g1aEJ4MXNBSmtoVUcvcjd1RU5GSXBKTUxsSFRYY3VXTFJjYWJIRU9hcWQyajlmeUpRbDRqMXZ3d21SZW5FODYwWi9JWWJKNWpGaVNFYkFKRlkvQVZBSFY0YURVMGVubzVJNCtEdHZXQ1BzSkMzWWNyRGpPcHlhdUlBUHNpazFDOTVmaDlERDJ3V0FBRUtXeFNDQVJUTGc3SEg3UVVEaG9oM0JidGFCRENGWTFuNnM2MkpJc0RoNG9yWXVENXZpNkhMamJjNURvQ1FONFBBYVN3K3MyNkhwQThKUUd5NTZKZU1pYTh0d1lHV2xzVzVSeUhjSkJIUjYzbCs5OEZ0ejNXM0NUWkFUZzd0Sm4wSGRsd3BacU9zcGE2SnFBN25SU2lwNHNIcmtnK3JBMzlQR0UxVWMzZWIrWXd6cmNNZUNFdTBwYW9nNW9VMCtuTTlBV01FRGJ6RGpDL3RXZjAvOU5yNUlvNlNXL1kzakczSlJKc004ekVEYzBuV0tLR2daN1d3RXJ2TlVUR1o0c2lSZmpHTHNLaXhJdFVLNHF4b1ZCTG11TXk0eUlubXJSUXBiOW9obUc0UERUT3o4bElNQmc3NFUxM0tZcEpFcWpOaTFRQ0NaTjNSNVZveVRzMzJQNGw5K2RLcXRxVGdqbE10ZjZ2N053K3Z6aDFMYmtob240emtKKy9Oekl5WnR1Uys2OGZYd2d1YkVyTXA0WUdyZGR0MzM3WWtkblpiams5ZTBMZHkwZnFuNm1GSSsrSzlucjgrOXpPWE5BbDVuVlg3RlI5aDNpQStyZlAvZlVBQXpQNXdKU2Q0V1lMTm53QkcyK3pjblliS1RoWTJwK3ZDUmVDZUord3JlU0lBNlVuS1NtYnlKUy80UmJvZmlZOEtkTGVqdFhMQktCUk1hYnhvU3ZqT0dLQUQyeDRzWlJkN01NRU1CdktvcHNOSzBmSEM3dWp0eDZNYngzY1BEQTVsVDFWNW5OZ2NDV3RIN2R3VitXajAvbDA4bXQ3S3ZlNnJjUzJmejBzUnVqMGI4S3g0NU9UMTNQdDczQjFlZnBUK2tMUUh6UUtYd3dHajhlZDhtQXEyUmxZc1ZiWjJMRmFPeGFtVmk0VjlKU2VqSXdsYm93VVJhUit1VU5LNW1ac0o3ZWRPREFrV2hrS2orWW56a3hOclk4blMvbWQ4VzZqMjFIcEJqZzlDc1dOZWovZ0VGL043QjROTUlFWnRLODE4TW8wci91WTJaK2JOTGZkUDRFaFM5RWdRM01vSC90aWVXeXI5Ry9nNUNlN3E0ZzlPN0xwMVFNc2k0M2pnNm1JVlBQY2ZRUERMcW5KdzhPRithaUY2c1BIcHhNNHd5azlPdTJKNUhvWlp5R1ZKejZ2RmVUdjV5NlBocjVIMTJ4bzBTTTlYbldDV3N3REdNRkNSZUdHUkQ1Q3FnNHE5UkFORjd2em9sRzR0MlJSRFNSOU9lVEdpYk5OS1piK05GUmlkaEp3Q1dKYkpaZUdWamVnUDFudGg0WkxSMmFURmZmYUx0dUlqWHBmLzNJREJoUmpoMTZObzNUVUlGcHlFMHRqMGMzTG5RRmFIUnFvaklEL0lGUzV3SDJQRmlWUjNTSERTU09uUXBURWc5YXJEU1o3dDBxTlk5a2dyaWkvV2hMaFBGQURxVFV5dHFIUzJCMGdTS1lTWFZxV2d5TlFiRzQvWUp4VEtPdys2YWxBNzdlZG0rNEk1ZCszZXN1M2tTdkxPMDlwTW9uWkRtVk9YU2tlcGErMjZCaGprWHBMMGdQNmNkSVZCY0lxSHdPQkZRM2lLNGc2TzhCMk80VTJJeFY0U29NMWtTT2lKOUJZWlFBR1UrS2ZabFVwTXZuNldoMzJra1A3VUhKbzlUTmZObU1xREdzdEdiWlF6MFdHOHhIYjd2bjR0ajVZcjR3bjVuY0d0NzcvaHBMU1BrcHpoQzVWRUsvK3NzVEY3cUNCd0wraWJIckV0a3Fzc1kzdTJKSERKMlc0QUg3ZDBUMkQrWS9lQ2dlQVRMNGJkWlV4K0s3WlN0UEZJTUtRQzBUNTV4Q1ZxQ0VkQXVKNlo2NUdOMDdNbi95NHFhUlpNV0hBdUh6eFlHekM5VlAwYjZ4YmZGWTlWMmNsdVB3L2ZQcys4UUoxanhZQk5iQzc5Nk5RaXRvMklKdG9HR0xBR3NRMFU3cVZJRlFYbE5FZ3hrWGhGN3ZpL1gyUldOOXZaR0w3R2crRnUyRFAvTG5xazZLNTNoczlmdXJPYU9mQ0o2Y2RNSVVkY0FTNWpsR1pvOHdOM3p0c2xPb2p5UVlCdmFUVU5EbmFZdTRJcUpqcmFsanFSYnV4TU9mVENUdTdrdzY3ZDYyV09UaTdobzJMM3hObG80eUZvNnlEVmMvT3pWbjBUd0FOSGVRdko3Qi9EazhMaE1VUis3bFdwd2dOdWJRK1VUQ1c4VmRLV25lVk00L2MvRXY3Lytubjd6bEcwamRyYy8rb1BxVGYvNW5BWk44R21CS3hLTjM0RW40ckpBMWJxb0ZDMTRnMWFjdnN1OWNUYkt2aXJaU0w4aURERG1xT3lWZzNyUWRwQnN6UEprQnZwSk9JajZBakUxVEpMN0Y0MUxERDRTOFFCNlAxeDZLc0tvTXlhUUNLVzg2WllSVmxmeWNQWUpOVEJKb1lwaTVnWkVGYi9TNjhzN3JMMVlHNGlNK1N1Rm45NGlYWGxrczlKZUxROFBuRnF1Zm9ZT2prOTB4VzZkTi9CcUxWbityeHI4d0ZpL1pxenNrQ3NQbk15eUc0dVVTalhLWm9Nak1jS2NFK1RoNElBSVhlK2FUSmQxbDhuZkt5RWsxUnJBZWc5TXIrOWF3dHlGdmN4eW5PTW1DVG1LSVZkemlERmtHVzV6ZkIxSWc3by9uMHdyTWI4VVVyRWJhWDFENFovZ0dONWpiZnF3OGR2MVVGbjlpTlBJTG0vY3NidHE4Wjg4dlVaem1wNWNybFJQd2MyYjV4dXVuZDF4Ly9ZNlpvMXkvS0xKUmtGZTR2MjNYZFp4bDBDRVUyVXVaSXMzekpEV0RNQ0NvK0E3czUrNlRMbWtoNEljdGdHc0hZbi9pN3BPZ1FRc1R4V3pPN2EzWEVHWnVEZThkNXBJSkZZVzV5RjJXZXZBdDl1V2Q2Ynk1UVNYajFmOWt0OVRyQjBpdklwZXRpT3RXZllzTHpIclliMlhGdzlVZ3dNK1NxWWkxS21RcVI1WHliUlIxV2hDbVB1clQxZ3BUbU1wckNkQ0xEV0pUc2ZaUkVKc1ZHa2hrVjYyZGxQTWF2WjFXaVJ0MmdEWTdySTlPQjdDLzVmVDBjSGtwaUdxRWhrUjRKQW1YYUFhek5jU011SWs3NnpWalJwQzhBWE43UWtiejdSaHNEN2hjaWM3OE5sZ0xOMDlzcHVnelU0dTU2cWNNbnlqb1ZYOE1mTFplRG1EODE4b0I3Q29QejJiN3h4UHBwWjI3Ymp3MGVuS29uSnZONWdiaitjTnp1K0tWdWNMV1d6Zk1neVhjSFl4b0hhN3A4Wm5yWXZIWnJtQThHZ3BwbmUwejQ4bE54YTZVd0RNT05zRDk3TGRnZngvUkIwR2JnalVLYTI1ZVZVQ1J3ZzJiTGx2VHk1ME9NV1Voa3dKVDJJMCtrUW9QV3F2d3FFY3hqWDd1R0hubzdObUxqejdhazNYSEFvRnlZRzdQUXpSNDVBMmhKNDVVTTNGRlc5YTBIYUx2N2FzL0IrQlhZQzN1MDUxb3o5QjVFUEFZNThNRkJPREJld1kyUENXWi90YWcrU25YMjJxSEpqVUI0ZmFtVUVCNGhWTUdBeGxTWmVHdWNUOE5rbUhjZHhIRVJHbitKTDFTZlJZa1E1eWVxVHIzRndmUDdLR3pnSk1UZW9NWmJjNDVETGJLT1N6eFZFSHBiNzkrenlPUHZPb2JBTyt0OUphcVU0d05CQm43Q3NCWm0zTVlmSkdjdzdaYlhuZlQ0Zk1uemgrNjRYVTNud1dndjBOUFZSK25wMkhuUEduRWRPQWU2a1RwNWRCa0t0ZFFyRXZ3ZGhLTXl1SGNXOGxoNGlGdVQxcmJNNTkrNk00NzczdjZ6eTdmZDkvcTgwOCsrWk5xOWVNZkYvamFWL3VZaTg4RndHMlhtVVJjWEZnYmNnZzNZU0I1RjhNb1k1NnFIYXlJMGF0MUljWWY5Ly94ZmE5OTlKNGZSZmRPdTJJZFByZlduUnN2MDU5WEg2V3Z1UHFablpzaytTUmpVZEZmRHI3OUlmUzNUbDVpOEtYa0plWW9XeVgwa2VvTDFMR2ZicVduOWxmL096MEpOak8zYTltM3dHWitBTUNwdEFzNis3RmgzK0lXNUFZMXlnR2ZaOUtnSkVaTSs3YkZrenI3dGtoc21xVFpwRXVXRlF2eWJIZXpzV3Mzak4yNXAwYmduYUVYZThjeWYrM1VNSkw3aVdiVExoT2JaTHQ4TFhQWmFMKzBwSGN4T3RCZkxQVG1rajFoSGxWbVUybU14Unc4WWNXaXhmY3NXc1FVUXI0Z2h0UzlEaTNHeW9NRHNnYldWZmM2SkRFYUdKVEpPNmdHQ0d1MmxmVmNBQ1pWOU9LMW1xNFpuQjRyRmhndERSZkdpK1BONDNNMmp1OVphM3hoR044M2pNaXNJdFZzTGNlb3dueXY5MVNHcDhiSUJweDJCdE1IazFpYlFadHQ3YXc3elBHTnZQZ0wxaWdkNWlqakJSZ2xudWNORFE3ME40K3pyWEdjejFuampQOHJJVi81TlhtNjMwVFNaVytUTk0wR09MVWFudE1jM3ZDTHRyZEc1elJIbHhtdjRDeHUyVlRaTnI1dFpLZ3dWaHhySG1PN1NLNlN5TURxODlKMXNHY09rUXJzNThDbGJrQVNWQWhtT3A0VXVpWEhWR1VnendBUEdGKzB4VFBxVVBPVU9QZ2s0dnNaTzZWTzlENHJLeTRiUTFSUnFNUjNPOURCZTFKck13YzN0RTQ3VW11Mm16Z2N0VmVXOU5USU1DWFQyemR0S0k4T1YwWXFhRDBtZWlKZGh1ZHFpQTYxcisrNUNob0ttMm1zaXhPRkhOaW9odFV1ZHE5c05zZTMvMzljUEhPdXdhdTE4VUFvdmxTcU4rZG5CMDVNYkRxZkxKeWhPdzNEL21xMU1sRFlHVlhzVW5SekVoMWZVOXYzZEhTTUdZNnZYRHFkcyt6OTZXeDZwREJZcEwrUFpuLzFKOG0rVk1JVmJtOTM1VWdMZVJyNk8wSis4V3Z6WHVOQ3VhRTE3elVLMU9FWGZXbXRSQjJBTmhwSVU1REVwa2k5NGRvaU5jWVg1RUFCNUdwcnNWT2p5ZE1XVGFJZ2Q1NzVOV25TVjdkUDJKWnhiTDUxQ2FJUFhMdHhDMm42SXNOQ2YzQVh2UXJyYjVCc0lxc0NwWjZhMTlkR0syTWczZnBEakdnSlVCVHgwRWlEUWFYWE5xRnFYWXNRakhYT0dHRXZJRzNUcUsxZTdtc2EyQTEyc2I0TUpUT2g0SXluREJIVi9JS3Erc1ZiZkdnTkwzRVNpdmI4R1B2c3VxK0p6Wk9TalJPakk4VkNOaDJQR2N0MmtBNDZydVZ3YnBYQi9SSjgwRTN4NWNVWGMwazNCWjgzZUtndC9wT0tGdi8xQVA5OTg5Zmt2MkZpSXc2N3piSGlvdlkycWtsMmJkMHQzZG9UeWkvcG5WOWpYMml4eDBjMFFyc0Z5cWx4V04xRmFuZTBITE0yWDZHb3lGeXJsV3kwcXFPQlhiTFphNk53T0xTVHdEZlJkZmRGSVp2S0wrbkZaa0pFOUJLV2dMTnJqcFUxNzErRGZMQ2FHZDA2Q1R0UGFXaGdYWjJCKy9hNTNINUk2TUhiQ2JrVHMva2tGZ0N6UVZLNGwxK2duOEo4QlZsaGw2Q3p3TzZhNTUrbkxwOHlzOGg3MWliY056WlowcjJNSmhNOWNTTzV1WnQxMTNMdUJUN2Z0dkJKSmdnNW9PL3Q0WkZzZFRqSjh5WXllSFRXZ0U1OXFuWTh6bWc4RTgra1U4bEVyVHVlcW8zbkdnNStybEVpRCtpaFBxb3FCUW1VaGhnWWp3U3pLVkJtbWNGdFNaRVVkVHZDQmpzTkU3ZlI3M29PSkFZWExISFZPTDJTQ1pVdlhhTVZQNzJxejVvbkpWcXl2ZHljK2RxNVNjL1IwdHFNK2NIRmpZbTFKeW1aZnJuY2xDMnY5azh0alRTZXJWaHo4S3cxQjJGekRqQUNyV0VPK0xFbGc0bTRCS043K1hOZzlmV2MwUmVlWGI0RlkvSDFIVTBjaUI0dlRzTTFqR2YwMGdPOWdJanU2K21yOVdIa3pJK3Yvb3BkWWQ4aFdYTFp6dk5FNkk4SXQzRDRFWkNYVXNWRFpUVVdSU2NxOUNYUCs2Z0NFcUg1Q1RPZUxJbURqUVRPNnJMQXFQRVVTVE5Qa1VRUGNReVNBSlBoL0hyTmNHRTF0OURXSERyQnNxRzhWRVVDRmc3MVUzOCt6VS9heFZuWUlSZ2ZudEcreXpvTHMrRUpyR1lENm1uU2ZEREFKSEVXWm4yc21oOGJaMkVKMEdVVmZseDhIZ3dTRTFHK0dhb21vcGxXYmV6VTJqYk44ekV2NFNlMGdGSFU3WFY3OHltSEZsMXpSbGEySEVQWFBpdTdkT25peG8zcm5wZGQycjdYZTJiNzFTL1hINW1aL25SNlJkVGNNOXhUSExtNm1udkNyVTZ2aUFNSHlzOGI4SjBPcktzRWRNUFRjNnoxWTNtWVJCWlp5cHZDc250YS9Sa0NyTmV3dzRObkJ3c3puY2x2MXAwWXlKWmNZNTFjemo0czVPd2tJZmQ4TXNLUDhvUjBMUkJOeFZ6TVM4YkozZ1hncjhCdVc4dmp2WWllTnlLd3FZaU54dmF0bThKa3hLTElOajN4YURLV1RQcnpLVHRHKzFnNGZjL0NLUllqWkVHZkUwZ045T2V5WnMwREk0R1luemUyN2lXZGlrVUx2YW1oOUZDdEd4RlVaUFh6YmF1ZkpQU3pYMTlNVTAyTkNJOU8wOGd4RVJYR2JtL1pWUXE2TXF0djFEcHpOb3pwV2F1dnNObVhxb20rZUlVRnJMVnd5UW85UkkvTGY3MnY1NnkrNGpLWGs1R0c4MWxlQkVIVlFLUEViaHd0dXhrYVJQcU5qUTV1R05vZzZuN1VPbk5CWjJ2NlFqbjVHTHk3UzU5cDdBM1hJdGNvMXVNYzdLaTVDMGZEZUdvOEdvSlZjWDhEanhaSkkrMHVpRkd0eDZTOVpnRUZrUngrVFM0TmNscG5VOENxelN4VXcrMXBDN2Rvck1Yb2VhUStvdVJiQjZWcjlNSGpBM1A4TENwT2J0STllT0xTRFZxSEd5UmVKNWY5Um13c3FSMjk4QUtyMW43RUUweDd4SG1CMWZtYUprdDZ1MUhCSUpOSm1VVkV6V09xaGxvTVRVZFc4enM2RWk2VU1lR0dzNnVicCtkaytYckdJbEY2VTkwWjdlQnFGNDhaNkNlajVGNjlIZlp1S1VHcDNFOFZLczJieFJrMDJPdzBDWmEwcWhvN3FvbDRUT2lTQUNyQjViN1pGQ3M2S2VSc3F6ZFFzWE1QRG93TUQ0d09qaGFBc3Y2a0hhUytZcGxBcGc3VDZOR29CVXlhc1Fodk42SWl5MGUzNTVyakVXYTdOeWVIK3JtWmROcndZSHpUQ0pTa3ZUUEhHd01VcHJzU3RuaUYyMGhzQzQ5VlFMcjhqTVhadjVBMEdjS3MyUVRQQms5anlESWVaOWk1Zng5WVNsckJzejZUYmJLWllsOW1LRHVFQmlDR3MzaHo2SFFCL1N4WUNWcUpRTWJHTmhZSXdqT3A3dnp2bDdsZHZ2NVFPYmtwdkp6YnUzRXl2VzE1dzhpU25zV0VyNG1qQWR0SWZtQml6K0xFaHIxN21iSmh5Qld5NzNZbGZaTVRZNU8vZDJySEsvWVdNZVZyK09Ca2lwWUxFeGZ5MWVDaExac1BIZHl5NVJCZkV6a1c1Zkw3TjRUODdpZmtnbjYySFg3dHpZUGhFZ2Z6SmdSc0hPU3hEUnNtU2lPeU5zdmRxeFRkcTAyeER2Ym1XSWVoUVVZcjVjRk5RNXY2d2ZpTmh2M2V6bzQyQjAyd2hOUFUzYkQvWjYzK3c5RC96Zm9OUXdDOUpRN3FQUGQ5Z3AwRkFvUTdaWnBRY0RTak1BZ29ESllIeTZPbGtlRm1KTnFNK2xtU3dFTWFodC9TWkpnYzBRK0JsaU9CNWFqWmtwU0IyRmRabU9lcHdOUVNDWXN1Mkd6Q2M4ZjFHd1lqNTdxV29hUW5sQVZGUm9zcEhnc0Z2SjRPbDV4VzB1NU9oeFlxMEZTbEpMMmNXSS9GbGIyTHIzd3A4UjVzNVVzdmZPMGx4WHhZZEgvT29EdnVCWS9EZzlQNmlYVm1IcVpjczUxc1NmR1dreTQyb2xhVEx1VGsxT29WOWpEN0JkaE5yNTk3S2dpU3hORU85cklMMWFYNWlQbUhCSDhzaWNjQkVCVHlTZWlrVzJTaVM5UTBpdkhZTlZ6MzFNalhyKzBnSWFNZzNFcnpJOHp4NlMva2MrbGtwaGNQNEtsNTl0bG9Pb2t6VXN6RDVJc1I0d0JFRkVnN28yLzBSM2R1MjN6ajRZM0g4dVg0ZExvd211eGRHQjBhMlRneU16WXpkOXR2dk9yR0IwdWJTL1JWYnA4akhOdzVObnNrbnR3Wmp2WWxveWxYMkQyYUh4ak45YVh5NVVON3ErMzBwNjkrNVBUZWtVMjlDVUVmTjU2L2dUN09vMWFjVkpXUi9ZenpVcUE5REY5R0xsUlZQbXdNd3pEckxzSXJFWXhlOEpxVmJXcG5wODJCREF1Yk4xKzg3Nzc2YUowSzE0Ui9zem1pZ2ExK0JXTXNwTWVKU3NMa05YbzdhcllPd0tvTHNNSzlvSmViOXZEaFpSdW1KQk0wMjNrNmpvR2VXUll5MHRUS2FnRHRsUk5tcXlXOUN5d0Jvb1cxY05EdmNiZTNnWW1yRWhYTEZvVkFjR3F3aElJUzZNek40L2tmUzRjUDMzM3hydTlmakM2V2RwKzR1TEdVSFBkSzNvTUgzL0NHRi82ZGZhbjZYR0d3Y1Zpd0RqWUNzYWU0dnZJUm9WTy9tNUE1b2FoMG9SQUgwWDRKbUN2QXEwbVkrajhlNll1U0pGUzZYUDlnQ1NuVFdKVmtkWFgxcndCeUg1ZXhIekZxa3R3TnpadHFra0JQSy9XZzFxbEo4bldBTU1qbDVVZU1taVFJQzNZaFVaTUV5NUZJcU05YzRoVUpsRHFBcmN1U0lNeS94WG9hWEJaOHhLaExjZ0plcWVpanZDZ0prMDVpU0ZhQWw1VXdnVjJyTWdtbnF4SGZCWnIvRytDMzlTTzhYQzVtMUtheXFiU050YWtvSVFDbi93ZmUrcXcxTDFpWFpDOThzbGZNVEpnWWd4U0lOVTVOMEt4Y1FsblQzSGhhbFFMaHRuMk8vaW43UHRqMmIrQzFTeDRodjRKWER1dlhKYWpHZW5pK2dsTzJTNGcvRXJSN3Q4M0J6QkdnOUZkUHRWRmVnYW83NW5IamdIcnptVlNzMkYwVTlLa2Zuc3Z3bWEzK0cwQUxjbDMwSTBZTkU1ekhvdDdMejZORmlvamNQSHZOZFZkQUYvR3ZkcEcvNHZGdFNYSXIrdHlZSE9BMlNodTBNeXFaOUtoMXNXNktFalFjZlliZkw0RWhLakZlTjBVNjI2cWxqUFlmSmFhM3JYVkFuTGVWdjlwZHNvTHptdnpTL1hYQmVsZWZiSEpDODlBOW9OR2ZBeTRiNjNnOXNub3ZQTGhCYjIrc2dTSjRvdHNvdDdGaXhqSkZHeGdXc3czcmFxVmdRN1dST1ZxVVM4SDFCcndoMXR0SDY5WWJ5R1QwN2pFZVQ0QWxHTEJTQ3J5RndvSTdFcHZNZmFOaWlpL2xUV3VpcHR0TTlic1kvd2R3SHpWeTU5NE83US9wTGl5WWdyR0FXTnBoMW5DMGMzdEFZY3dva0ZNcisrR3JsZjB3RzFCUjhzT3FtZUlYYVJwV3pDRVFkMDNOL3VDNk5mdjlUUUdIOU1xelJyZ2hVSlBMVHVtM0FRZU56SWc5SU1DdkpjR01BVkUxcGo0R3F1NkJGWEd4cExmSnNxekpHZzlSNlNwNFMxcktDNUw5MDQ5OTRMVHpvdlRibDFGd1h4MFhNdVU2Z1BGNjdvTjdyRVBVYW5rQUhteldIVEt2VEF4VE1TdmNhcDNFcU1BUXNHYS8zWWdSUG0vTTl5ZmRIbzlrNUQ3RXF0OGwvNTNQeFdOOEQwai9rcEN4cDJWcVRVQ255T28zMGt3amFLTzVSQkdnMDgzZ1REenZyc096bS95MzZsZlFINFQyd0N6S0xueDN4WlR6UW41NlpMR2tjWHVFYndWNDMwbkNldERwZ08wRVkyOWhZb3g0emhDUDU2eGdPS2hmZzkxUG84Y3ZIajE2OFRndFRkUDkzdXFQdHQreXZmb0VkVXp6WEN3ZTI0dHk5RTJXeitpZFNER0plT3VpSkh1SXFoQkZKWllQMWpSUE5UTmtVcXl5dEpsaUpkbzFCbEZhYmZXRVVaTWJiZmJXYlVEM2NzTUdFZ3o0cVkvQ3VraDViTFg4TVk3enR5MmMwZGNET2dkV0JqVHhsZ3k4a3liZVhIVm93TnhtWVpNMWtUWWJOYUprczJJL2czNC9yS0NJSDlQdWd5WmVkWGx0c0diQnRqZnd3alg3Ty9EZzNGcHF4dFlRa05jcFhBWjFKNEpPL201Um4vRDBlclJwUlJxTExzOWFkTUVLaXAvUkEwbWdTd0RzSlJNTGVUNUJsVm16SklGWmJ0Um00NVpKdEo1RTlzYko3U1dtbjY3V3VCRkQ2d1ZlVHMrcXVzemZhZDF5Q1E4cmFLRVhUejdEb2JVMDVYR3luRC9mTFBoekp5R25ha2RGUkZhSWRWUmtSTkNxZFJHMHRhTWl3bytLV2pRQmFnYjhlRzRnVWhXeE9FaXFVTmYzOTZ5K1kxa3UyWXVGVEZxV1p6WE15Q1ZZdmFZbFdFeUI3TTBsQnBJREpseGJJOXhuTGJoaGdEdXRiMHZ5ekZ4KzNJRWpxMXRxSExoV0J6d0J3Qk81UkE1OXJpWjR1NVczSnVBL1o4R1B0eEdzWE85UTdSSWVjR2kwRWJDdER2QkFQK0k5T3RJL1BqQmVuOENaenpnUlBOckJ6MHZ2b1ZkQmR2V1RDZkkrNGRidkFHTmZqWWVBK2JwZ2o4TmFLZmlKdmU0VHcvK2ZBbVpqa3NiTzJ4ME00MW1RemVLN25UWllzUEpKdlBNbkpvdmdNOUZLeE1hSVJzUnViOTBlaklIQmdYeXVYQnFZR0p3bzlPWDY4LzNwVE5LZlRyZGhaS2hoUmE4WDVZSXVsWXpoRTJvT3A5NThMdEZ6Wm1QcDhHUzYrcGdaMnJJOE1ibVNUSnpmakNIVzdEN0RPMVNkMzd5NDF3cTJMZzhNbE92aldjWUhCaXY1bWVYdjhJaVdUMXZoMXkxNE8xUWw1SUlwUncwbWFKNnNSdVpPYUVhbU5KSFg1VzQvWjVaMEFsaThuaE9OL3ZXNi9oT0RoSndWL1NleFgza1pBL25YWTVVSTZvMllYMDJ3YmsvTEp0QjV3Si9uWEZwYlhzMTgrclRWZnhUV3dZUSt4dXNBWVArK2RjYmRla0NtbjBiRTFVZEloZ3lpN3dEWnp0dlJ4bVRTWCt5Smd5d0lBeVJSejZmcFUwbXgrTFRMY3NEaXVrT0ZrUmVjaXpHdUN0ZWU4ZFJHbzRXWnErM0x3VEN5ZzduQmRCSk43YnczejJQajE2dnNvMVY4QVh3SWpDY0MrblB3Y0VpUEo1RUY4elBkOGNXdDhSVC9mVWQzdktmTithZWRXZi9tUFk5dTN1UENYNVdGNVBVbDVMcUFOd3Uvam1LVWY4Q1hxWVlIdlQ5d3RsMy9nK3VuSTBQNFcwdTVFOGtUY3IvZVBnQThsT1JXVEQrVkRXMDViOVlKQS9PRlcrRFJkYmtnMjF4YTdCcThVQ21QREtHc1g4c0xHRGYvKzV3WDN5YmtQSHo4VzNxYkE1UXN0MU91aTZDUE4wcjlXamk5a1dZYXFXME9LRStOWm8wQjltWlRhM01RR2JFdG1penhhaE5ZY3BkNnFDZnI5Wmc1dHlPQTVXOXlIVVRnbS93T0lmZnFuVDZnWlExbnljQTVZZUpzeGhIVXNOWk1WREltd21hYlJudzBVeDhPZUwyVWVydThYVndCRUVqWlJRMmk3dXAzTWZmQXdpa05adW9iVzlFdzJreTJodG9icHNiWGdpQ05OVHBpWm4yV2wwRTZYaGNFY3hMNFhQK21tR3NGNUU1VGhSZ3VoQnJuc0ZYR0FoYllXbE52S0g2dE9qRlcvOSsyK2svK2I3Ny9ObFV5TWp2WHJEbGJDM3hOTVNNajU4TEJjeTQyazFmVTFUUGFDT3JYRUtpWmd6elVTWVI4SkVCaThRSXZCUFZVVWZoWGthMktRM0hHcTBGQkc0S1ZYZFp0dEtRNzBwazBsaUxDTE1hWGtyMmhybHVKNkZvcEhlY1gxc2FCakMxZk04VkRQNm8xQllTY2tGUFdIRHhyelVIWW5JT0dDa1M4bWhRVzJER1VvWmM0QjZMMkRNNkJCVDk5STFsVGhTaFdYNFVvL2xLckVGMkx1MFFleXdQc3QwZ2NzNVM2cUkyRXFkM0c1aDEySnMycUZJd0NZcVBrUEtiN0Noc1hGbzdOWmo4SjJrM012dEFkVFdFMnFpaktFeTlVZVBSQ3pUM2JJcjJGSjdnODlsaGRpc3VOY3lkNWpzdkp1WDIxTEJmRzhmcXNsQVplaXVETlNINnFVRkZKM1dISGdLSlpiTVBkWVd3Wk0weUNWdUgwbUNvU2JiQzJhcXhBSzFwS1dpZmJoaTdja1RyMDUwMHBOMUtILzV2VmtkWjVOM0ZZSjVqejAwL2VwSWN3NTZmZ1lZcmNRMjMyT0pvcndwa3RGa29SV045dVUyOG5kaHY4dkkvWU1EL2gzRHFKUWFoQlFuTkZ0Vjk2U2UyWDlQYStmQ2J0OW5Pbk9LZDh5eUd1dDJUcTA0eEcvV3VXU05md2FIUGkwVmpqa2pqbjVMWjRISGdXNkFFOCszYkRmbndRNkxTaWQzaUFObDZlRDRXM05CcW1XNkxsYUJvcnlYVWJGZVRXSGJqVDdSR3pLNHFVWTA3Z21GVno0RmJkaDltU3ZLNkFsOWNWWU1Mbk1jTHJOMUZqbjY4ZFJmdDVIbnNYdjVVSVEzall3NjBhOGVpOHBnVENERjRWR0xRS0M2eVRQMmdXRmxpVFAvZ1Y2ZTNlNmplVHVib013bCt5TTFZR0lkQ1c1M2p4UGVjZFlzL1pRTWk3ZEtlTlozdTVhdGxlUFEwT0RLMUY2bGNyUjRmV09obXN3ZEd4VHBzbVI0ZmJtN2FaTVMwQzUrOVpPTWRDaE55aGUrcHc1c1doVEZzK3ltOGp3MG81cmREV2U5WThYcE82QmhvYVZrVEJhbEltTW1ZY2o4RGxXUXVYTU9CeW45NFJBSGcyZmloWFI4TWsrbEZFRlJzUlg5UUtuZXc2amRZZ3RkYnBBbWc1R21uMG5JVlhmQlh4V2p1dkNYN2RHWWcwRENzSW9QdGhMVXFaMW0zV1lCUkRHNW5TZXZ2WXhLdXRFYThhdjRYK2s1RDN0OExMclBjaitseWY0VEt0RzY3aHVLUjUzUmtvUk91em5KOFROZVFIdm11WWFRdjNVaDN1aVNRaDcybUJleHhSRWFaYWE0b2FxbmlyWm10WENqekg2dzhVOWJ4OWZiUXBqWEkrcUswV2gvQjlDWG8vYmVFY0JmNjhyUVhPM2R6UmhoajVXaElibGM0MURkWXVsSFhJaDdta1hTeE1yNUFjK2JpUktvOFhlV0d4Q2dlUE1ZV05Od2RkelVXc0IxTGpneVd6UEI3bFZRZkFzanhsMUlldXF4Vm1uZHZ3Tm9iL1VLRFhXRk1zWnRRVWE5V1NVOVNCbWV6K1RBWTM5OFE2T1FYMU4yWmlIaXNqelZrRVBKSDFvc2hxYlRxc01WSmFhem11TlI2alBHOUF6RmNQek5mRExlWUxIWlEyVGJXdGlOdmpxS2FzdEZ5N3ZldTMrelhXYjAzZVJTS0UvS0VlTkgycGlLY2s4R3h5cGpiNlI5ZGZGYjNyTjE2ek50WTRVNis1UWhxY3FmV3lrdWNDODNYOTIwYjlxVGZpbWRLbnpkSmpBckZJdzg3V21Db2NxVDAxSHRUWFVNTmlLdlZsMUdwOVBtZjBDZko1UDhIcVhHYVh2SVNhSlhHYk9ydFdIYlhHc1lCOG5TTGtlTk5Jb3FiSTFGcEJyejAySGpTVVdsdlNPNXFycmRXTjUxbXIzL0JOQk8vdXFhKzJabXZjMkJxN1hWTndEV0R5bkdjK2xuY0ozU1JMeURIZDJhRXdpYlFieHdiaUNMUGU5YkVtSTVvWEZLcXZUOS93bEZzcW1SU1daVE50Sk5IdnMxYS9ZWm1nMVlJVklxMitEUnVzNXBCZUE5aW9GdWxEMkxZbTJNOVpzREZQZEVyZldqY21YalhTY2tldkFkdGNRaERCRzdLK21WNmgvMFhJbVJiMGlwdE9WTFYxRnhHVXNwYi90QVhGMmtXSlJ5LzJiWnpMOG54eDN2ZTd4Vnc1TUI3TlVhdUN0bzc3cVQ2YmZCMzNVNHNtM0lYU1hQR04wMWZnOFcwTGorUVBDSm5YZHpWV2ZGdnJVcXJyNDhTMWk3NVpmVHhuOWRGOW1HQ1Y0TnBZNnhNbVd1Sy9mczIzYmpwQzcyYWY0L2tFNzU1N0t2bGZyZm1XNU92Y1RGVlNzTXliUXF4MHUzSEdJNHBNL3JXYXdSQWFXN1V1K0dhdmkyRm95ci96cjBtMis0TXRpOWZOZGcySGlvV3U4VXhpWUc5dTkzVkh3dU9IK2xLUkFhK3YySlVwMEpIdG8yTmI3STVVSnRQWk9lWDN6VzIvbWdyNDdncDFkN1J2c2R0aW9pNU1EeDJtbndHNllGMllLTDhqaEVyMHJGbGxDVEJOWi9OcDJSNHVlSnVxd1dUTXN3dkFxS2RuYks1UW1LdjA5RlR3NTFnUDFhZUdoclp2R3g3ZVRuL1pOMXVKeHl1emZYMnpZL0g0Mkd4ZmFXYW1CRjlBSE96N2RlelBTUXp2UG1pdXdXWmNpeVRqQmsyV3pHZ2RRdmMyMUdGVGdXTFhxTVAyNzVHaFFDVyt0MmoyUGJBL051NHZSWWYwcmZUK1lHQkRQSTBmNHNOMGZGTXdoSGhaZGRpTTJpLzNHQ2RPYnJNQURPVUZZQ0lObitEZGRJWW5QN1NtTkl6RWF2TGZlbVI1TjJ2NUpaMjErbXZlZkVyVHV0WW1sNVQrcXdYWXRsU2Q5YmtrM0RlUHRlWkFybEJWeUpWOWhIekpHS3NIUmhhTFloYVVPZGE2VCtyR21yRnlISERmYVI2NFRiSXlob1Qrc1U1ald6TXArQUY1TFJGay9ZYWdmdmdhMDRlOCtiUWhTOFQ0dm1lTkx6WkV5SDhUYUFlYXhtZGtoVVFhSGtpMUIyWXVVVjNheURvanhhVDd0VzNXNHEySDBpblVtekMzcEE1MWgrSHJGN2cvYStFZUJ0dy9iSndzWWRKSEEvNHluaXcxZllyWDZ4cFk1K3B5UTNnVmppYmM3UmJ1aGZWYjJ0ZU9JSnlDRVpocEpIVmpjRGFNNFRsckRIRlFaSDd2WmZKWHRqSFBwQmwxaDRWNjM3b05IV3N4NzhITUZFcnJNMVBxOEhjMTRGOWJIeUViSVgveGN2RTNNMHRhNDkrMFFQcldiZDFpaGVRYXNsQ3V1VVJDZktaNGdzaTZ2UGEwTmM0bzhObzdYK1k0VTNVNUt1dXZqVnpyVnExV3gvb1lXM2tnWXlDZmMyU1VmTTBRdTI2d0x3WUhnSUY5RlBOZHFRUTd2aXp4WWhuV0l3cEtjKzJKRDhhQzFtK0tuL3hvbW9VMnhnRFlGR1pVOU9LbmtRbTVsdmpJSTl6T3RuNUJKRDZ1YVdFVENUUFl6cG9XRHlHbDRXSWZEQ0tYeVhveGdTM1NTdUMzTUpHdnZRYzBtY3JWTDY2L0pUUlp6clVkd3VRTHRKY052dWdCdnZqWXkrU0xQcUlSdTAyenI3UlJteE5nMk5TVjlkZnd3RFViLzVycnVDWkxJeU9FL0ZTZ0Z4bUNOWlNtTm52RGVKVDVRWXFiUWF1bmt2RzBibndpN2NSdU4yNFRYM2Q4WW8wUFhQTU54OXAxWGdRTDNHNVQ3U3ZXaTllaXlSSmVhRGRSR1IzcEw2QnUyU2lVSlpKWXpiQnRySWRzSkR2SUlYSmNQOW9PK2xRSFZaa2ZoanJSd3lUdHVoS3p3eGl4M3VrY0JoU3FsSzBZYVZKWVdjSnVrKzNuVFRhTzd6WTlDUWxsWWQvaS9Pek1sTDRsWGVuTit0S1lHZXV0aTRTeEtzalZ3aERVdXJQQldrbDUvcjFlc3hUbFlJeWpSWGhwYzNMVDNvR2gvZDN0bGF6TnBUbENMbS9TNmZZbU4rNGRkQ2M2dk1GSTlBOTM3SG44OGl0ZXUzR3NKem5XWDk1S0Y3WU9EVzNWaDRlMlZxL09iTnQvS2h6NVVKdmZFWXJRYmJtcFVpd2VHUmhrN0lRc3Vkb0M1VmgrYWpncXkxcXczZTJoTm1uanlOelNwdkZZMGVIcWl5WkhISUdsc2Y3Tm0vc0hObSt1dml1ZXlNWTd2Y0JNakdvUnJGWE42WXE2UnFmUU5YeUV2RksvbzRQaTNjVXFDd0IxTnlTQXVnZEhPWFh0U04wenA0OWRMenRtMjZpRGdMSGxYSGxaMUQ2eWRISjU2ZHlSYy92MzdwN2JNYjExa2xNOTR6SjlCZ0tmWnkxOHdvRFBQZnBkUjZDZjFqaXBBaWRYRzNNNHFkTkJMNjJMamRNWjJOMFNwYVdscGVXbDVlUEhyai9haUZRN1Iwb1dPUEY4cGtreVI0NWlUaGNXcGZCU205eEY3YmJOYWFiWWx5ck1xU29pVXR6S2F3Smhhc01vYWp0UlZMdUNIaW1uUTNWaXZwT1pyR2ZVbTBob0N3Y1BMQzdNN3B6YUpycDJkN1pwM1R5L2lmNS93b3QwWVdYdll2WFQvNWM0a3ExOHFlcit2OFdVcEk0UG5qUDRBT04rSDhLN0pQVmJyc21aNjgwOXNLckRlWEo5RGppeWRPTDQwcGtqWjFvd0pjYUt3TVo5bkQxUHN1UjFQS2ZoRGZTZGhGY3M2OEJjSyt6WVFUWEdjNjJ3bm83NFkwazhMdktqY0J0UGRYQlMzRmJGNzZLOGNwdERrbmp3cUxoYzNMZ0xzNjlXb3RscHBvcXQ5NGFleHpGck1PWVhhd29TTnB6SmhMc3krUXpvdmVKNmQxSFAyZTBTdmpVYzUyTGRPQi9qNDF6VzI2SmRlTG1YbzY2S2RLeDFGV25OeENyU3FveTA4WFJKZDNxTWpzVkpLc2FpeFZiL2c3MlZmWkhyUlZzeFgyYkx4a0ltbWVpT3VLQnJHWE5BTWJwK1Y4dTcwaVlxcGVGQ0ZxczdaclNzaUZUa1M2Q1NyZVZVWUF3SHJDR2U0Um9JWUhaYVpjeUlZWlNzc2wyYXFySzNiZytYSTRXYnQ5ejA4T1Nja29qY3NMajdUS2xjU2k3Mit1TDJNKzJGYUxSU1BSNklEc1pqL1QycC9zV0ZyZG1wMk1oeVhoN3FuVnowRmdLWi9DMUxrMHU5VXQrTzN0bFRTMU9EdStQeHpPNXM2cnJoem0yM0ZFSkYrdFd1NFdUVVc0ajBGQWFyRDR4T2hyb0dqZyt3YUZtYzhaOWtlK2h0N0Z0QWpmakgxVE5UdWcrdjg2SG83bnBsWFpXRWo2dGt5aHRNNWE3Y3MvSUI5cTNMbDhXNzc0TjNmNSsvMjhYZmJUZHlCT2dyM1owTUtJTnYwWktXb3RISFBuQWFYdVAzeFFOTlA4V2VCYkdVNCs5RUtUOVI0RWxsbURMQnUrVzVZcklKUWVTTDBXTWlPWXpOWXo0WTczOEgyMG4vQkdBRnlUaUgxZS9pd05EQjJFYkpMTUVVb3lVY0JTT3dMTVVWd0pUdFRXVlN2SW9xSDFST0hHaVhhazRSbUoxSHB6c21lZ085MlVSSHA5Y3gzVEdXRC9SbUVoMmVBTnZac1dtTE4rQ05aam8yNHMrWW9NTWQ3QWI2Tyt4cG9JTXhKcVFob1lkUTdjQ3JrU2pldk4xQVMrcFBsT252VlArYVBUMDdLMkFjQnJwOG5IMlB1TWdnaDVGMk9rQXBKck5NK0hOWXZUL0hwaElYZFVsYVFNQ3F4Y3RXZ011VTNHamJkTWZSYmR1UGRNNjBsZGhqeFlKbmNzZU9TVStoeVB1NWpoMGh6N0xuaU5QRWxXY3JMUEdzU3V5TEFIeVJJV1RDcjg4U2VrYzBrNGxHTWhsMkpCT05wdFBSYUFidGk3dllFZm81RGpOSVNoeHFYdUlVV01JclliQ2lQcFkxSlh1eExMZlgzUlowQld2VndKdDdLTlg5L3BsSU5oc0paN01meDU4TnZkWjZ4LzdmeUxiVGU2VWk3MytDOXo5Z1puQmphaDVoU3dwUDVKWlJQcXlMQmEzck9WY1hhMHlWNFpucGtlR1ptZUZvSmh1QnZ0bjJxZUhoN2R1SGg2ZEsyV2drQzdoa0JSNkhRSks1K1hyUVNJYmpFUmJUZDRoUDN6SVNoZTdCbTgwczlvUFZrWUd2NTI1OXh6RzY2K0xqaDltM0hucm9JYkZPRm1HZGZMdCtuWmhaUmNZYWExNG5Yb3hiVGVVK2R2alE0YnN1M3MyK2JTd1RhUDZiOUR1d1BYd0Q4T29Ya3RSSmpEdTdBbmdHaVpzZDRHaDRpQUhEcGFmRitrWHMzbjFUZGpmN3huOXlPS25xZDhublZqOG80TVE0SE1PckhMa21uQ0RBT1FwNy8rRXZDWHplditxZ2IrWFhiVi9nWTNPQXBjbFVIcVVnb29uaUJCTm01TnZScFVueEduU0xSMC9oKy91NFoxN0NnanlYMW11eTlHbTNPNTFKWXRsY0pJNnlOaTRJZzN6cFc1dHVUQnZ2R0NpL3BmNnV0QzFTMGNDNWl4N0R1c0drd0hIdWNmRDU4TnA1bFhaY29zUmFvY0FpeHB5ME9yR2wyeHRNemcxYjY4M0t2bDE1UWFQUjFaK1JQeVd2RnpsRXJPRmFqZHJ5ckl6VVZMQlhZekllZkwyKzBCM3Y2NHQzRzdHT0hhdEh5T2VBSmhJSjZmN21DUkxUVXlsSnFYMjNuOXAvcXZwejgwNVo2SnNSMElOeVhBL0M3NjhTZDNOTDdDU3VwY2FiUHRwZGpQbzhybEI3cUNFSGxOaWc3eS9EK3NzQkJEdDlGVjYzOEF1Q3VXc2lXZkUwRnpvSUtFNFhHTVh6RGZHK1lyd1BlTERmQnhwd1BEaVVLd0lmK2tQNGUwanZ0OGthVXhXZTE0bVhHd0FxNFM1RVJpZ2E5U2paUmVJNkkyVVkyNS9BdXBKSUIyWnJ5dFJjQ2J1dHdjWFlnaUlUNHJUTEhVb0hGOXNxaU8yS1ZKSzBPaEd4NkxyVlZZajI5a2JoNjIrWWRQWHFkM3Rqc1Y3ODR2Mk1yZjRUMFBCTHZKODU4eEphczRlb09JN2grYUZvdGZwa0xpN0o2Vm9MaWVlN3JrVURMMzJybi9ZbjY5Q2dQN2g2bFVtTmVFUldmMGIvbm4wZVZKWmV2RGZFNjJGOHU4VlRDNEwxTWFtUmE0a1pxOXgxRTVNWDR0MlpWSGR2dkRmVDY4T0xaVURwVllPcExPZzJwdmFpNWN3d01GV3F3NFhlRk9zSnNXTnlZbUFnR2RzMjNEOFhQSlI4emZ6QTRvYkV5SitaS0M3N2c2WGM1RUl5RlM1MjVVWUhld3ZiNXFKRDI3UGwzZFVyRFhnWFYzOUIveE4wTThUNzJLZnd2aForSzNmY3ZLWE5ESHJuWjRJd2lsUEVDUC92UmpzSXRwdEw5YTFxRFpiMDlxYmhlV0ZZdVZJQXRMWEd4WXB1cGJINnJlbTl2OGJvcU5NYUhTVjUrbjN5ZCt4SDlmTFlrS01Cd3VVbzF4NklwVHhZOGpqbExiMExGaXI5UHJYeEdIZUE4OC9zUjdBaThpVEZIbjNwMHQzTmpId01ocmpROTNCY05ESXEzbmRadTVYQXh5czI4ME44TTEvbVNzS2VwVStaMnhnaVpTSjJyNEZjOWVmVUp2Q2pId0RZT2NEdkg5bWpGcDVtUHhaQWdhbTN4V2JKKzNITDRselprR1VvUndEM1Z2TE1HSmhvQzFyc0tkNzNaN2xWaisvRTF0dVJlUmRJYkEvUTlNODRQY1lFbG0zRURNM2t4UENzMWUyV2RFZDlRVEZ2U25wb3kvNWo3RWRJQlU1amdFa2ZOR2c4STZCMmlQNFZTWllNd0VIK080SVdIMXFVMWoxZ3pSRE1zUVZSVnljR3BJVFJFeTF0T1dCMFozUUo3NEZxUk8rbFY0aENldlFZcHNKU3ZKNmtvUVNhUWhRUFlrdzEwT3dyOU82LysrNGQzL3NldmZMenE3LzZwWUF4QU44dTE4SEFKY2dYSEFJU2w1dVlNSGoxZUcyWWd4QUF4TjEzN05Yd2ZwYU9jN2s5VHFxaWxvRFRCaW9oWWlTR2lnQTVVbUNxVXExTmEzUGdPYkxxRlVueURQRmdEM0E4blBnMnIyWXZybHZoYWRNY0JxQURSalpSbmFyVGJ1Tm9JWmtTSEMzeG5RNXc3S3B2czVBVWlOTFZiNndPMGEreFowU2RPSDRKS1E2d2k5YlhpZE5vaVk3UU45OVN2ZTB2cFVkZmVBV25UM1oxaVBYeDk3eTRhUEUrTlVLNnlJSllyVXFLbGxqZkhkVmI3NEEzZVB0YlZnZkl0MTZrbjZDNzVMN2wzRGVsTjc1d3U3Qnh5UGRwblA0WmpEeitJcnA2cFU1VWZhS282OFgreWNudlR3NE02dnJnd0NTZmo4M2tyOG1YNlhtK285dkpkM0JXMTVvWGpJb2RVeEwxTVNmSXY5RzMwN2xyNlEvZWhEOHhRYSt2L2k2ZFcrWTQ0enMvZlNudi9GRjF1dTRkOXVCTGVJZk5YdjFVM1R2U2JTL2hIYW55d3BmNU8wZ0RXRzFmcGg4RS9wb0dtNzhsQlNSbTE1aExja2xtZmRRSjJnODBlQlRlbVlGM3JpMTNzTzFQZWRzZEw2VXRqQm5iN253cGJXR3MySGJYdGR2Q0g5T3JTWG9IN0owdW9uN0NLZEdSUW1XVTcybm90ZE95MmVuWDNMbnB4SVVMSnpiZCtab3I3L3gvZCs3Yy9QVkw5Mzl0ODY2ZFA4WjNDL0R1VXYyN0dSL2Y3dEdOaCtibFV1M2xuemErakRXQmV1ays0RytOODZxUndpK1NCSmVObFdGc0drckNqZmNabCtpKzZvOXArNU5QL28zMHRpTlhFOWgvQ1dCc3RXQVliL0tLMVJ3YUxCWnI0d0VZZURkTWliWlhmL3prayt5WkYyNCt3djRlWVNSWFUvUjI5Z1dRRzVQNnBnVFBucE9VSW1XU0JnWWdGc05VNXRGc0lGakJVbEZxbW9RWmxwbkpKVEtaRkY1Y2t0SFVRTkRTM2tFQkFzT2hEQnBDTHBldFJVNkFkaFFNY0ErUE4rZU9GenFqbmU1Z0lYQjBNWjcwWm9mbTVvYXkzbVNubXRrK0VJREZEUThMY1hmT1c5cXdvWFRnbG9GTlZGSDMyMngzSGo0eE9uMW9ldlJFY2E0U3Q5bjJLeXJkUEhEenhCRlgreEZoQzZUb1ErWjRNTEpSQTNsZUJLc25TUlVwd1NOdGNEUUtrODZibytEbkpPWlJYRzA4b090a2MxYVFER2c4Z1ZMSmo1bU53WUJ3N2FLQk5JYkRROS9VMjE3V2NPamJYK3A0TnRCcCtsNllZemZhQWp5dUNXdmFZSEVBbDFCT2plc3B5VUxJZzR1WTVvS3BpcGFyNUNyQlhFbXJCTFVnZmVWNXRvdWV6OTkyYS80YzNjWE85ZDU2RzMzTjFMMzNUdW5UMDVOVHI3NTcrK1QwdE5qRGh1RGJXNkV2Sjk0M2JKUzBNTFVibzNpZllseUV3aThkRjhYNE1MdWt4S3VTUHYzUVEwY2ZmSkIrZVBHem4xMnNYdGNJMHl2dVY2WXdKWFowdmN1eWorZkJpdm92ZU9Ca3QvdnR4b1ZyYnZPZlU0c1hTbGJtVU1uS0hJS2VlRjhQUHZqWnZlL0U3dDY1OTdOQ1I5dXcraldtd3Z5WFlEY1kxSXM5TVBQRGlTRHNncExLdzF6NXRrRE9tZ1VHd1hZQUJUZWFTWEx2cEdYNFZ1cFR6aXJySjU0RkFqbnV0cXc1N3ZFaC9mcVp2WVBIQzRYOHpuaW1FRTJlWFpnc0ZiM2VNM3Y3bDR2Ri9JNTR0dENkZ005RytyM2UxNEtxa3VwTFpXL0RuNzNKM1BLMnZaR3VuVjBobW9vRjQyMnB5UGJ4Z2UyZG5zSG85bjNScnAyaFVMSTcyT01VbjdvOWc3ZURYYUxrWStHTUs4dC82dzZuWFh4M0JDdWNIUVNhdHhNUGllQTZ3RndBVlVMZk8xbkI4MkpEMkpoMUMzemVqZzdRRHZ6ZWlDL1M0ZW53dUR2aDFYYTNPNTFvQTltUmNBdUxwWlRBNndQZDNuTEtuNEw1RVA2ZWlkNHpsKzQ3UzNjY08zMzY5QnY2KzhlbnA2bmpydU9uNzc0NlJSM1Y1K201WC96aUY5T1ZpU25EVHFmSDZZOEJMOHRQbzFDaEpsRWlydkkxL1RSdXkwK0QrcklralQ1MS9LbGpEendBcngrdlBrSFZxcUZ6OWRNNHk5T3Z3eGpIT0x5Q1RRT0dDdmdaM2xKdFNLMlZ0UTZIak9YUnBNR0dGSHB4TFlTeDRHbmIza0RFRVUzSWUrd3pZNzZCMEdJbzdJejBLUHl2SXYxRXI5UGUyMmZmZmFETjFjZC9XOWlQdEtlcnE2dkg2VGRYbjNvWi9rMEYvWnZmclBZdjd0dUhPZ3pZNjUvZyttL1owS2taclRkUjNIVjdHUk5xZjZOS0RhYjNkZTAzZGRBZlVxWDZLK0dqQUpqMERNRE0wbU5jdHp4RzhJS2lLVU83cmxPaFJSZitCclZmcU5yWWpXZTl1a3lWMWR2WVg3THRaRHZaVHhOelQza3hEZ3FqUEJlbzVOZ0twbk9XS21CYnFCaithRVJKd1ZQVzRxbjV3TjcwWUdsSlFDM0NWaWRUVFY3QmtUc2s2bGl4VThubVpFU1J5QTFFVVZWbHlVajFVOVM5Umw4bGdpY2p6SEhKZkplOGhGZjE4Vlp2MmVFdFlwZUlmWW1zK3lxV2thZGszK0xPbWNuTjVWS2hONTBNaHp5ZHJqYTdScmJUN1cxWXVEeFpuenl2Q2ljYnV0TGJtZC9YNEYwdk40UkZvblF4Z2pTei9Pd0VJelNPYjFnTTkyOU9oUWM5OG14T0RVVUhOdWQzbkJ6ZnRMSzdXTng5MDJSaE1lVXZIQm1hZSsyeDBkSHJYenM3ZGVmQjRmQ2duazBNdXdLalJ3Y3k3bFFIU0dCUFc2NHJOejY4dERXemJUanE3UXg4TWQ1ei9YVGwrSFJ1K01BcnRtMjlaVSsvejFzS0JNckhIcGhiZlAzcDhjRjl0MjBkMnJjeEVmRDZBKzhybER2YWJUN0hLYTlQUno2cnJQNFUrT0NMd0dISXJnL1JrTUVMYlVES1BURGIyMkJTY3pDcCtRWmVnS2VzeFZQemdiM3BnY2tMaGZyNWsyWHpXZ0NIdzd5c3NTN3AwK2hxc1BVclBFTVUzeVBOcittamE2YjdKYndtYmhMWXYzZlhEbjNMMktpNC85VHJic2RpVzFOc2lwZmhsRUIzdThMK0FYUkhMOG1SYWJLYnk0cHRRNkIvYlI1bXFyS0ZhcXFFbXp1WWZvemZ1NkhLL0h4YWt6RCtEOWFydEdUVW41RkFwS1V6ZWZpWHRtbmRRbXF1Q2FldFo2OHQ4SGRUS0dzZHo1WEsxOSszYytkOTE1Zk5uK3hWL1Fzcm16YXU3Tzd2MzcyeWNkUEtRbjkxTERxNExaT2ZEUTk1KzdzS0d6Y1dRd1hmWUdSSFByTnRNRXFQejEwK09UNSs4cUg1K1lmdzUrVTUvYmI5UTBQN2I5T05uMXR6MHlPeFJHd3NFTmcyUEx6Tkh4aUw5Y1JHdVA0aGt6SWRwWC9FdnNIamhmdkpHUGtZVXVXVE1PMTJhamk3eTIyWWo4QnN5dTE0YUFHYk90REdSVzEyR2FOZU1FOVdQZThVcHhoT2Zvcmg0S2NZRVgxTXZLZmlYUXd2NDhVbFBUYzQwTlBqOTFFeU1qUXdOampXMDkvVFh5ejA5YVlTNGpKTHA1MTRxYmZkT3B0cFhMUDFKeU81c25IT0dVemxVdjRLcURIODRjOTdkNVM3dThzN2VzMmYydzRkMnJidDRFRzZFTzF4dC9jVk01SHU3cGlybzUyT2l2Qm5Nd3k2MHRON2JNZU9ZOGQyekJ6ZjhVeFBwRE9tN1o2YWV2ZDRoOHZWSWZTZ1B2b2tPODkxT1M4cDZVT2dNektaS1hRZWEzOG83R0gwY2lnS09ZUS9DYzluSXdyMzdmamNHUC9jWGFCNHdaMGJWY2tnMk9hZ2NxWEtLVHE5WTI1MnBzS09IcU5qMVgvNno2TWJqckpuM3ZlKzZnLy80by8vNk9zMFdQcmU5NEMyZmNEWEh3TytIc1k3Q2JJWnB0bGRiYkMxTXl5cTZzUUFWdlc4Z3ZVODBjdHludGp0L0VTOGRwMUhURm9ZSE9ndjl1V1Q3b0RiazBtNnZXMmdBbnA5UGp3WGFkaXNRU0hNanBaSFJ5dnd5MWlkZHFaQlE5WDNmZnBjOERPK0czYVZqblR2NnI5MzdvN2Y3Vm8rU09uQjVmQ1RkOHpkMno4WFAxemFkWU8vR3Z3eHBjZnRidHZrd3RIaHdzYkpyVzk1MWFUTmJiZDdiUHFkYjlFbk4vVVBIZDJ0Mnp4OGQwMnVmcEoxc0orUkZDbUFidmtPZnRrQkMxQ0ZEdlJuSXVHZzNhYklEcEFRd0tkK1huTUZhL1l4K1RRUHFlTEtsa1ROWUMwczhScUZQeFZaSWZLbE5TM3hlRDVaOXhpZUhpSVk0MDhWdkwrRUY3Smg4cDRsZnF0Mkxnc1lwZUx1bUJ0dnJRNldqVExMWlVOekJaVTV3QW1UOHhzYXExOEtsb1dXbXZOenZiVzY4ZmJCVXY1Z1lYSjI5dUtwaWJGemhhSDBmRzV5eit5ZHB4ZjhJeHZ6Yi9PWE51WG1Uc2paNUhYUnBQSm5idCtCeWYxbmxJVkZKZGV6UDl5amZzWWRXSnpjZjROMmd2NjcrcFEwbUlubkhsTS9KWTlrNGhrZVMvbEcrbE4yZ1hSai9ScTltRXJHd2wwQnJISHFwRzJHNHRlb3lzQ3YzYVE3aW5xTVVoYmxyK3VHNERiQ0Evd1NZTzlXVmRvK3VHOVRNcmx4MzlCNDZVaGlKbENPZFplOVUvR2xrUTlzSGg3YWN2dU5TbkhxU0dua3lQYWljdk5OY2lHOXF5c21WLzlNaWdhbjB2M0tEZlRtaWV0Y3RPSTZpSmNicmY0dmRodTNHUUhMVUpDQlRKMHY5R1ZsU1NHN2dGTVZhaDAzQ0l2QjdjMWszQkYrV1dlV3E0dm9GVWVHckxkMDBWQ0VkWVBXYmpEQUVjOTlkM0JMNExyd1RML0xMbnRPN2RkYzNvbnJOeDI3dSt0MDU5VG96T1pPNXg5KzJLbTFlVDR3dU5sL0lIdmJRcml0dXpnMlBLbzRNNkhUQzdsdHR5d1VyejhVbjlodzRzQ1doY25NSm4vZUdjNlhwZ1o4cUZHcXNPQS9CR3M5aUJXSGJMdzJxb0tIaEZoNTd3TFk4UTRRZE1SMlh1YUZOZ20zczRMQURHNlBHLzkzZDZLVlZlRW1scmgrRXREVy9NYWF2K09ESDd6dlh4LzV5dGNlL05mN2ZwOSs2RU4zZmZDYjI3YlM4OVUvcFhyMW5WdVp2dlV0YnhIeUJwMlA3d2NjSWlDN2Qra3o3WFpHMnh5TU9NSFd3eEFUMys0T2ZnSGNzcWJ3Y3FLZEx1WjArcDFnNzhXN1kxR3NMU1F5WVgwMTI4K050aCt1YnY1VjB2Z1hZSVpmcVVwSzg4S0RUVE9IN2lqZTl1ak02Wm4zenB6QzMyOTlCSDdDNys4dHZ2ZXIreS90L3lyOEV6OW85eVdPWjJuMWVYWXIzM2ZqeGltZDRRT3dqcjB4WWdVbGZyMkVWeHZ1MlYwcjNlbGUvWWE1M3I2NUd5YnhaKy9jRGZyZUV5ZjJ3cGVqZlB6aHhUMFBIeS9EenoyTDhQUGtHMTk5MTV2ZS9LcTczMlQ0bmR1NVBaVFF1eFZaa2t6SHM2L21lRVp6aUR1ZXNmWmh1VUxiYjc3M2Q5a3pWNmZZN05qSkhYak9ESU55c2MrVEVKN3h0VG54eU51NjlOTndialJlK2hraW9VQW1aMXo2MlhoSUplSndNdjRTWGorenF6SzBmMlRMeEQzYnp0MWZIUDh1M2J1SEZ2TWJFOFdOK1lHNWN2bkdBeU1ITi80ek95N3NzQVRRdEJkb1drVCtpM2N6U2U0REpyVGJzS0x3dkhIb2ZONHMxUkN0cjBxZFNTZlNtVFQzSHZscVRoWGoxTGxjR2xsN2hnWW1OK3ZOVForWTJQMjZ3ZG0rQXh1Mlh6Y3pkbWhoWlBQOHhPaWV3dXp3Z3p0SEQwK201emZ0T1BUbnhmbXhlR1ZrdXBEYVdoclllSFJpYUZEUERFeVhOM1NQN3V5Yk9OVFpmc2c0MDRGdnVFODZpQXR2NjNYQjNtVEhoWU4zcGt0OGw3b2crSmNZTlVQYm5GZzFWTGcvd2pBdFlwMkFDU2NsM014MTVNak4xZCtnS3orRkVUOVQzWFA4SXg5Wm9wK3E3cUdiaVBDMVhXRUo2S3NIcTVZb1ZHRTlQdEJGRkRidjVWR0pac2xXdzl6eldXWEdZVk5NWjdJcGNUK3dGOTIwMnBoWmxidVJaa0NxYlozMFE5VlAyRk03Y3hmdXowMmYyamp6bXRLMi9zT2xiZnNQYmt0dHo5Qjk5SWJqWC9XNDcxd3VIOXFTR2hxY3k2Zm1OMC9NZXJ4SWk1SFZuN0Zaa0lNOU1KTTc5V2tYWmJRZEJwTDJNUVh2cFpZMEtpc1lMbG1MOGNLUzZLcFlNc2tFVHpvckpvdWhnS2NUbGswUDdiRTFYVTl0N05DMXVoZ1NqNVVVeU5NRCtvMjcrd2F2K3ordFhYMXNXOVVWZi9mNitmbTl4SW56N1BqajJjOTJITWV4SGR0eEc4ZWYrWEx6VlpLbVNWUHlRZEkyVGRyeTBhNE0ybTZEU1JQcllKUnRJRkVFRzZPZ3RhcWcxZjZDQXBzbWpVbWpZMHlURU5JQUNUUzBUV0tUSm9TMHNyK1FnTG83NTc3bmp5UnV5N1JGc3VQRTc5NTM3cm5ubkhmdXZiOXp6cmNuZW00UDl2dEdPdGUrVGtLM1oxTUxnOEhRdGoyRm5xVzJwbjNEQTd0bnBaN2xCM2JNUDNZZzI2Yk9PdXhQUHJRMTNaYWZTZmJNRFFUSkhmSEk3TUdwZkY3SENiWEJvS0pNdjBMRmRpTlp0MSsydnZhd3R1T1FJZ0VzZ251VWpKWHVvVkxwZDNUUDJ1NnJQOUh3YjJtWXV3R1FjVDlZdWl4bTkzR0o0RWVSS2R4ZTFEUHRsaTJKU01wbHU0RXRpWGlnalNBYVA1dkloa050c1VCTXRuQis0cGNxck1sVXNxbVZCWnh4cHNhNjJHb3RUVDYvT3RZNVA1emYzakcwMk5NRHdyNDlOendmSGwzTlozYnN5R1IzVEdXS0N3dkZiUXNMamI3TVZMeC9SYmJOcGFQakthODNOUjVOejlua2xYN1FDeDg1TjlqZFBUVFUzVDFZK3ZWNEtqVTZ5cUxUT0ZhdjhETTZWcFVCbUh2ZWlIR29UWWdWd3lCSnprQjV3K0hLekt1VlJFWXNUMlI5R1NBMWkxaE5XTFBWRmE2TllmdjAwUVcvbWd6UU42OHJCS1V6VlNHQU5hbEtsc2drdlF4cjBnZGc2bGRxYlg2dXh1Ym51YzNJREtsY1k4MEI3YzdSMTZDUDc3SSt3RnBqbXRxeXRlNUZhNTNtcGdtbVJESlpEVkk1TDdpVnJCQ0Z2azR3TUEzYmdSK09VZlptektDbHhiVHFSanBYTmRKcHd6UTc1MUljb1loUjB1SU03RENHQ0J2RDkxZy9ROFYrSDZpaWx4ajRNTXlLQ0ZPRGNhekdxUXJBUjdlMXVZcXR6ZXUyTmloSUdtWldBZG9tMkpnZVpIMkM1OU1NejJ1ZWJEQjh2VWhhbWdKUldvNWxzSHRXazZUbFVYR1IyMGlJOWZFUTZ3T3N2d0JXelcvRFlBWXJpOWJZYU5SNkswWXRqMGF0SXloYkdVV01YeDdvTDhQNDlYM1czNDdpTFExZ2d4cGhTRExoRFY1WUhmT2J6VkN1YW9ieUdHaFBTVG5RbmhYdlU2Z2lTZ0dkanlza3l1aDltUFVQVmtGWVp4VjZtVlZnbzhXcGxLMjhWTTdwNXdYYWttd09UckcyWUFGc3B2b1dJRmRqQWZKWURNV3RVS0lWUk5IQU5zMW00cUl1cVNKZkxwamZGT3Y3a2ZLNHZUQkdHVGdJcTFITXFVSDVPcXFYcTZoZW5seC8zREFENnJVdnlDUTV4REIvTmZJZnI1SC9CRGU5Q2VzbjFsVHMzSUR6ZTJWa2JtNEVYNkh1N2xBb2tUQWUzRDE3OE9EczdvT0RRN2xNc1pqSkRhSDl4WFBiY3pDZVRmNU5CRFVtV3ZWdlJLMjJHUGczNTdhUDdHT2J2SFoxTU13d0J2Q21rSVBndG9EMjRLcWhrV2d1VGxWNzRsWHRpZGE2T0NLNk9ObDZMazdLN252Y1pna285aTQxNGgwSjVjWTg2c0d6dmFkazFkS3FXcFdrMjk4WFZ4T2V2ZjF3Znp2d0xnSzhpNkRXNGF5b01DdWQ3SHhNdytGdDFycDRSZXNTdXRhMUM2SmFjN3B3UFFkSFAxSWdrZW1COExnbnFpUVVYMmZBRy9LNUF3RzNNNkxFM05zN2NoTmhmMGZzUUtLZ09IdHNWamVzaTNPS3crYVdXN2U0MUZ4YzdaSk1VYzJPSzhDY0NlQTkraldnMjAxU0hkMk9JT09pRzV3YUVaeWFzdk9menByQVNmUjNkWTMvOWhkMzMwOVczc3ZQemhiZWZlOHg0SXZyMnVja0JQMzdVT3ZSbC9GWjBaZVI2MnA5cEtMMUNWM3JaZVJJTm91K1BJeThUaTR5NUluNDk1L3pMUUU1UDdacktEamdhMWU3SFA1d3lDKzN0Vno0VldIUkpKSytMYjNEVmx0R2hwbFUvS0tvWTdnK0p4a21MeDJvUnhyNDMwQmJ3SDZvOWUxSHZHby9ZTDdjQ3VIS2tEZ1dPKzhpTHJGV0U4cTdadVVKQzllNE1LK096cS9zOVBRNEF0Yk9sdTZ0Y2twTkRVLzJPem90cHBqcTdnZ0phOU56ZDFnc09iTjVXNS9kbGUvdUdibG9iUW1FL1U2bmpvM0djK29vMDVkTi9rcUVXYVpvamI4aWdyOWlBOGZUYmhoNDdnM1MrbFBTTnBndXZhOWo5VDhuU1pCWko2d09rbWlwckVKOVN4V3ZzVlJNVmhVWDRXTFJqbVFvNmZlNmdrcXdDVXdHY1VxVjhhOUQ3RHMyV2dWbnplZUwvZFBSZ0JxY1NLY25nbW9nT3RYdkRMUzVsRUJBUVVDeXQ3TlR5Q2Q4Q1VucVVxTzVmQVRrVm9JLzgrOTZXbHM5K0hwR2RUaThYb2REWlhQcUFoMU13WGowT1ZWaC9scEF6aHB3a1hFZDJ4aXYyTVlFdWU2YzJubzJ5RjBaZCtxc2NVbk8zSEJPeWFFYlRpcm9DYng5dGhIM1lpL2pYbEpCa3ZyYXJlVFJPZm9hK2hrdzJNZmcyazd5VGJpb2sveEF3ZE9haytRRS9MV1A3UkR2TmdsR2d4RU1JZzlqRUhod3pBUit5aURpU1EwcmtXUGtlUEJNam5BQ3BjSWlKd2gwdjJTQ2ozU21xWW5TcGxBVHFKN1g0MmpGOGwxVXBLS3R3ZFRPZGk1MVB3ZnVmMnpUL1I5a2FMRG4yUDJiOFA0Y2NUc29MeUlBR1NOb0VvMUU1SGhPNUU4S2hCcU45SmloQWVuQjFKQVNucmZ6aTFncjBMakswanZ2OGhUajY2Nm5wMjU0K1ZMUmg2UXJyaVo0THRsYmJWWThBcStRYjliSngyYzcwUDQydlF4VTM2ZlJmcDlHT3o3cEdjNWV3NVY2L0hBUEh3aFBSQmNlRWR5eC9od1ZPV0hLdzc0MVhlZGJQVjZvdjVudFhabTVrdzFFa0NUaEdFc2FiVEJxdFd2TDZHb1l6V0hjWHBiRVJmZ2xTcXVOUkJLbFhSNk5pTDUxZlFpbi9xc3Vpc09jQ1RoajRrOXU2SVg3NnAxZ3FGRXkyVmRJNXBQNWJBYXJoVmxsbDdZV3Q1aTZOSWxBMy9uYUYvUmp4dE52YUR5OUgzbjZBRG1MNHFKdHlNY2FzZkF6QjArWHczcU03UkZtWEl4c0Z3UHZ5YStaTVdPTG5VVTVoMi9TUk4zY2hCM2MxR21pcDlUVzExd2JtaFZUTjIzQjZzSmdNMkVOSzlyWThkeG1xUmlPZGZsOWxtWUQzWnJzU3NmU0d2alZxM3JjV3RvbURlelVyR091Z1QvOExldjV3NFUxL2lDZmFBbCtoelUrYmJVUTJxelIwMGhNVFdRanAyeG04SUpnQk5hR0ZvR3Y1ZGFORzZyMUd5TFAwblVicnVkQm5jYVkvdW1tN1JqdnRNWUNOalpVK0pjZEdjNW15anljMkQ2OGMyVG5RRjltVzNiYmpmalp5c0JqaEJ2a0hpRWYwV0h3VXpzeDBwMXlCanlmTUxKOXpEdDFmSk9CWThjVWNndmJOQXBXY1NHa2YvSGl4Y1VMRng1NWVmbkZGNWVaN1IwRXgvZ2o4aVRHYTkzb0hGNXd4bGlNMFVlbHZlVEo1V1hOZnhxOGRnMW8yUWUwV0xCNlZTMGRIR2N5Y0hlS3hHUmlWUzVnNUdhejJXSzJXRFhDc0JCWkxXRTI3RnNuN2tKcDcyOWVXRHAvZnFuMDJiSkc0dzd1S2ZJK0xjQjloRmNhZU1TZk1ld09BbmRNNFpQcDA2Y3pwMCtuVHorUlBmM2ozSmt6K1RQUFpNODhtejhETkF4eXU0Rys3ekQ2UEpqcENtRzdRQi9JT3l3R05Yd1R1RHZzYUpwZmc4ZThrWitWVzh4Z01aejJGby9zUVlLYm16UlBIL2NpYWlONlRPQlYxTUwzU1lzZUwvRXY4dnc3K2tkeUplcjFkblY1dmRGZkxpLy9zMHNEYkhkcHo1RkI3a1BnKzhlZ0VZOXo1NEdzeDdrRmJrYXJtVk5GNzFlZ1B5elpGM3pTdGdtMTd4ZjVXc2h3ZmVBQnlzdGR3SU85bkkwN3Z1T2xSaGFZQ1lzTS90NEdJbkdjZE15SW1CL3M5QzZUMXFtSmRTb3lxREFHWnZJRy9tRzhWanAxdzB0WlBvWDFzQ1RCRDg1cnpkYTB2aTA5T3JuclI0VTNyazdPVCs1K3RQRDcwdVJkSjViM0xKMDRzYlJuK1FUUzYrR215QXYwS09hV2Z3Vjg4SjVZaUJBbmpPMUk2UktaS1pTdUVuNkt0SkNXa2JmZTB2ekJlYmorYjdYWDJ3Z0poMEtueVV6cFVvRVlTbC9TbzZWUFM1L3ExMU11VFo0SEFYL3pmNHp0c2wxbnpmZUhnZm41Z2Y2NXVmNzJSSGVnUFpra3p5LzJGK2JuQy8yTFE2bjJ0bVN5TGRpRHNRaGNMMzJLbm1lZUovaHFOcmxSNGcyY3UxV2tQRFdBOHdFVENFczNhd1BsSmxWQ0pzb1JoNnlxRVYzaTlTVDdGQSsxTlVjMDRFOFlNYVFrck1kTmczSm94MzE2S1ZFQkZVVVA2YXVoOWxCdVJmRjRsSlg4L3NDdVdId21zSnJkcjZnZTEwcHVOVEFUajg4R2ZqYThkKy93OEw2OTZkeEtZRGJSdlN1d21sOXp1ZDJ1MWV4cVlMWWJMdGlmWDNXNVBjN2tnYkh4QXdmR3h3N0EyQkNUL0FIejVVd3NNcWV5bDFoWmZ5cUc2ZlVsbm9KeUNvdjNmWEFFZm9pWG5QM3lPRGxiUWlCU2hrTjRKVmJpZFJaYmNmWmdUdTdVTWdxRERjRjYyYmFBRE81OWhyeHpkK2xaTWxWNjlSTU4yNnBoakJtK2xyc0p0clY0YlF1MXdvVGJ1UjhXRzNHSHlHckdkT0hndHltWTFnUlRVdXY1SE5mMHRKdzhyMVNlUEdyNSszSml4a28rY2J5bUdHUmZzeUpSdFYrei83S2lYWERWa2xhODE4N1pzVVpqRVBHQ3RtcnFUVDBkWjlnZWxDOE5aenNIYk1lUGU2Y1NTc0oyak5MU24zSWpBUzg1ZXJXMFJmV1pHLzlDMzFrWEM5TEdwTnUrTWZpakdrcTdMdnlqWHZ4SHVZZTYzTk45eXY5SHpNZ2Y2UUwzQ2IySHlZeTFhQkd3MGhtYW1HL1o5REFWREVUTXB2N1IyQ0E2NFVVWEZBV1g3aHp3alhiRFdFWE9VM1RwVmJGTWVsUG9XT1JFS2poaUtka1VKc1FVbGo5K2VwVEl4REw2TkEyOVhpQzdTcGY2TGwvOXN4YlQ5alpOZ3N5dTcyZGlRejlFempvSnlUcGxNdmYwYU9sSzZkL1EwV3RYUDN5OVVIcUp6UFJkcHAwYjFqSXlxekdtaFQ0RDA0VjFLeG4yWE9XdTNXUDRxMkVuUG51NUdGWWFhbTR5RU16MGlaRUlrelVGMHNBSW44SnltM1NSMDhzdlVzTnNvRTNiSzFkQ1VVRlFZa2FKR2l2N09NN3FQbzRnT0ZPZG1heXBER0xCVTRRckpabGNnZmQ3MDlIRDAyTjMydzgwcGdPK3NNMFdDYm9NdHhQWmNScytxZFJvOUFsMmxkelEwZGMxY090NFB1UnQ5enJNN2lhZnA5Q3JCaXhIMlVNT1hraHA5Y2YwTWoxRXgxWkh0LzRIRVI1VEdBQUFBQUVBQUFBQkFNU2daK2lvWHc4ODlRQVBBK2dBQUFBQTJORHp0QUFBQUFEWTBWYWUvN0wrNEFSSUEvTUFBQUFHQUFJQUFBQUFBQUI0Mm1OZ1pHQmcvdlh2UEFNRFM4ci9UZjkzc0hnd0FFV1FBZU15QUxHWkI1QUFBQUI0Mm8yVVhVaVRZUlRILytlOEpablJNSm9wNmJKVkpzMnBtSm5PWEYrMjlZR3p3RlhVUlZoWlhZUVJVVWtVa1JBa1JsZmRGV0ZkVkJaQlJJRjlnRVFRRmFoRlhWaUVsVVFYMFUySTRFQlkvK2QxczNlandJdmZ6dk54bm5QTzgzL09YbFdzd2pmQWlUNUdodmFnU2Q5anVmNmdQVWRPb2NueWN2NFRqZUpHUk51UW8xZTVmcFRyM05NWXJRK1ZlaXRodTdoMkJybDZGbm42RVNFVDA3cU5KZm9NTS9VKzQ3ZGdvWjNIZ2ZVb2RUNkpxU01kMW1WWmpIOHVVZC8vaUUxWTQydnFUeUVUc3hMMzJTanUrQkQ1Ukw1enZwbTIxK3BFaERiRytXTGFBY2VkRy9USXhOMXRMakJPTEpFcjlsY0xKOU44ekplMk5xbFRFcU5YT2tZL0o5VFgxbk1LR0wyZDJMbzdNVytRcEFoKzNjZHpXU2pUdmFRT1pYSUZIbTNtT0lRUXhsR044ZmdQTGJESEllc3dmYm11Mjdsdnp2R01kQ0FrWDVBbjE3Q0FlK3ZWZ3l6OWhubWFRMzN5a0NuRFdHcm5jV0Mxb3pSOXpjYlVrYzRRcXZVUXlreCt1NWE2aVRyL2k2blAyRzJrT1kyYnFOY0lzalVVZjhONHRZejNqdlNSUVl6WmQzMGdvN2I5eFgwMzdRdXpiKzZmMEtCV2ppTktXeUFuRUJVZnhNN254R2pqd0hxVk9rOWk2OWFCQ3VLeDlVdUhlanFoMWlGYjM2bGc5SGZDZDNCaTNtU1N1OHovR1lYTVVXajN3RlFJczNmU3VjeStNWFNqUUdlaW1YU1JKaElteDhoT1dZYW9ya0lieDVlMEVEdk12cHpHWlptTlJSeGZOMkFVbGNSbDJ6SE00UHViK1FwU3hYNllUMG80TGlZVjhoREZwSUxmTDVmYzRKbWZtQ1AzeUIwc0lhVnErdjhXU3VWM3ZGL0dVQ1JyMFNvSEVaWVlZSDNnZCs4bE9VTThaQlIxMG84YTlaT25xTEc2VWZPdk5lcTBnZmprUE9ySmNya0pMNm1VUVFUa09jb051aG9COWxvSmU3cFNvL0RMMjNnY01lYnRSdGpLd0VyTFJlYnk3RytzWUgzTGRKZ0U0TlZzYW51YWQzN0MvMmtmZkhxRFB0dDVod0QxMlVPTk8xR3NqZlE3aFFyZHhQYzZ5dk1uR2Y4QTh0R0RIUEh6N3V2aGx0M3NueUJ5SllMNVVzMTVBL3Mxd25rTC9aN1NyNXgrOVZ6ZmxmRGJtdXFuYTBrWHYzdnQ1Q3ZjMW5Ua1Q5dVBmTDVaY0JJdnRpUnNVQmNnS0NPTU1jTC94RVhXMUlzU0NhRlZnNmlTQVdvWHhacmtteVhlN1RVMW1rMWN1ZzY1VkIvV2tQbjlBeWQwUHRjQUFBQUFBQUFhQUJvQUdnQWFBQm9BU2dDY0FPZ0JLQUZXQVlBQjBnSCtBaGdDUmdKeUFwQUN1Z0xpQXl3RFpnUEdCQWdFWEFSK0JLd0UwQVQ4QlNZRlRnVjhCYVlGMWdZR0JqZ0dmQWFxQnRZSFFBZDJCNndIMmdnT0NNSUk5Z2trQ1ZZSnBnblNDZ1FLT0Fwc0NxQUt6Z3I4Q3lvTGFndllEQ2dNV2d5TUROQU0vZzFBRFhBTmtnMjREZUFPQ0E0cURrNE9oQTZtRHZZUEpBOU9ENFlQcWcvd0VDWVFUQkI4RUo0UXhoRDRFU1FSU0JGeUVad1J5QklxRWxBU2RCS2FFeW9UV0JPSUU3NFVCaFF1RkZ3VkZCVkNGWUFWcmhYYUZrZ1dnQmE4RnQ0WEJoY3VGMWdYZkJlZUY4SVlKaGhVR0lBWXBoalNHUG9aSkJsTUdYb1pxQm5RR2Z3YUxocGNHdWdiWGh1b0hCNGNiaHpBSFN3ZFpoMmFIZVllRUI0bUhvd2UxaDhZSDI0ZndpQUtJRjRnbkNEbUlRb2hOaUZpSVpvaHlDSk9JcjRqTWlPa0pIQWsraVZrSmpvbXNDZE1KNVFueWloV0tJd292aWt1S2JncDBpb0FLa29xZmlxMEt1b3JJQ3RTSzZBcjBpdzRMTVF0S2kxcUxhNHVKaTVtTHZZdlBpK3FMOXd3QWpBc01GWXdkakNzTU9ZeENqRjRNYm94NWpJZ01rZ3lnREtzTXRReTlETWFNM1F6d0RRQU5HbzBxRFRVTlFRMU1qWFlOaGcyV0RhQ054QTNYamUyT0FBNFZEaVVPTVE1VmptR09jSTZEanBZT3VBN0lqdU9PK2c4TGp4NlBNWTlKRDErUGNJK1ZqNm1QeEEvU2o5MlA3SS8zRUFZUUVaQWRFQ3lRUFpCS0VGV1FlSkNJRUpzUXQ1RFRrT3NSQTVFYmtUaVJUeEY3a1pTUnRoSGhFZk1TQlpJMEVrV1NZcEp5RXBLU21oS2drcW9TdXhMRGt0Q1MyeExyRXZ3VEJaTVBFeGdUSVJNM2swV1RUcE5WRTE0VFpoTndrMzJUanBPbGs4RVR5aFBTazk0VDZCUHRrL1NUL3hRTmxCWVVIaFFuRkRNVU9oUkFGRWFVVUJSUUZGQVVVQlJRRkZBVVZwUmRGR09VYWhSd2xIY1VmSlNDRkllVWpSU1VsSndVcEpTdEZNY1U0UlR1bFBrVkJ4VW5sVHFWUkpWWEZWOFZhWlYxbGJhVjNCWCtsaWdXTnhaU0ZuaVdqWmFsbHJZV3l4YmNsdVVXOVpjTkZ4cVhMcGRJbDFJWGJ4ZUpGNUdYbUplaGw2d1h0SmUrbDhxWDBoZmRsK21YK0pnQkdCRVlLQmcwR0VjWVhwaG5tSUdZbVJpZW1LNll4aGp3bVJTWlBwbEltVkFaWFJsa0dYZVpoSm1hbWFDWnBwbTNHZEtaM0JuakdlaWFBcG9LR2hDYUdSb2dHaWthTXBvNEdqZ2FVWnBVUUFCQUFBQnB3QmNBQVFBWndBSkFBSUFLQUJVQUkwQUFBQ01EaFVBQlFBQ2VOcnRsRTFyRTFFVWhzOGthZnBoTFMwaWluUnhjQ0VxT2tsdEY3WVZvVlNLWW1waUd3UTN3alNaVEs2ZFpJYVptNmI5QTY0RXUzYmh3cDlRL0FrdVhBdHVYZnNIQkplKzk4NkovZlJySVNpWVlXYWVlKzU3MzN2T1BVbUlpSjFuNUZEMmVZdzdZNGZPWUpSeGpvWXBGTTdUTktYQ0JXaGVDQS9SUlhvdFhLUXBlaXM4REpjUHdpTTA2YmpDbytEYndtTzA2endRUGtYbm5JL0M0M1RXK1N4OG1uWnpZOElUZENIM0VwazRoVkdNOW5KdmhCMjZsRzhKNTJnaS8xdzRUemZ6QTMwQm12ZkNRM1FuLzBXNFNCY0x0NFNIYWEvd1JIaUVlR2hTZUJSY0ZoNXplS2dtZklyY1lpdzhUbGVMcjRSUE8xeDhKenhCYzhPZmhDZnAvTWkwOEJTTmo4d3RSL0ZPb29LMjVodmxtWG11dDMxZTg1dDgxOU5jUzZLbmZrUHpVayszb3lUbHkyMnQ0M1NoVkFxVWJ2YzIzRWJVS1VFTGFiWFZVZzNsaFRKY2licjZ5c0NsN205clh2V2JxdGRaODROZTZDVXpicms4dTdpNmZMK3ltT21ONVBwQWNtelZJejlKVmRUbGJCbWY2SHZFNVk4VlZmTzcyZ3NTcjhNbE5nVWNIZGZiS21XajVQV29wZnRlNGpNQ29XcjQzUlFKOUxwTlAyR05kTmJ2VmJnYSs5MU1YTWtFMTNpLzFobVhyWm1zTlRiZWxxZENieVAwdVk5YzJlT1ZwWWZzNlFVMkphQ0N0SkdvV0tkdXFrSTNTb0pTZGFVaU0vMSszKzAwTmtPOUUvdW1RZ25IZyt4dDFYOXA3aWZNMERKRkZOTU9KYVFvb0RacFlycEJaWnFoZVZBZEVSL3ZOVHliZU44bHp5cHEwRWYwRk5HR0hTOVJEKzgyWWduK1Y1Z3VXeWNONTVRV3FJUXJnTDlSOUdpRFhLeUtxSU5vNXB1NVZxbUZTMkZPWVJ3ZW1WM0JpaTdlVjQ3bFVzZDQyOUtxblZIWW8yTlZBU2lFS2tFMUxtb3EweXd0UXJWTTk2a0NPdWcvY0xsK3pPWG5lejBDbTdxVnpaRVA3Y2Eva2UrUGMvbjNPbFZEMUpBSHp3VFBEdllyMmJxekR2eHMzdFNrYkpZRFQ2WjFVQXZVdDMwMUZXZUswT1pqL0ZJNWdSNjRhVHZEdGg3ZnJyNEhYMFlGc2RVZWRLNGNjcmlHeUVsOU5UY2Z5T3p3dm9Oc1BOckNyZXkzYndOUE05T1hjeld6WnQ4bGVtaFo0OXo1V3hleUhxVHdOSDJPRVV1eFkycTlYTnUxQVBOVnJLOGNXZE8zbDR0VGJOQW0xQnJmRlZQbG9JZUgxZkd4czkvdjlmOXovNTF6LzdVMTMvc1hPUEFML3dwdFcvOHBBQUI0Mm0xU0NYUVRWUlM5dDRRSkpBVUtLSUlieU9wR2JaSTJUZDJnU3dxRjBrcExLQ0NpMDhrMEdack9sTW1rcGJpQUFncUNvcUs0Z2lEdUN3THVvT0MrcjhkOTMvVzQ3eDcxSEpkazVwc0VjYzZaYy8vNy83LzczdnYzb2dEMjkzY0lVZnpQeHh2U2Z3RjdvUmRkR0kweEdJdHhPQlNINFhBY2dTTXhIc1U0Q2lYd3dZOEFTbEdHSU1vUlFnV094akU0RnNmaEtmYkdFMmpGQmJpTkV0MVFzQVYvNG05RTJZZDk2YUVYS2d2WkQwL2lhZmJITXh6QUlnN0VGL2lOZ3ppWSszQmZEc0d6M0EvUDRYbjhnUmM0bE1PNFB3L2dnVHlJQjNNNFIvQVFmTVNSSE1YUmFNT0xISU9YRU1OV3ZNeXhISWNMY1RzUDVXRThuRWZnRXg3SjhTem1VU3loajM1OGcxY1l3S3VJNHpXV3NveEJsalBFQ2g3TlkzZ3N2dUp4Mk1uak9RR2ZjU0pxRUVZdEptRXk2akFGVTFHUGFXaEFJMDdBZERTaEdUTVF3VXkwWUJabVl3NU94RnljQkkyVmFFY0NHekdmVmF5R2pnNzhSY0JnRGNPc0pmRTZKNkdUazFrSEUwbE93UUpPWlQybjRVdjh6Z1kyOGdTczVIUTJ3V0l6dXRETkdVZ3h3cGxzNFN6TzVoeWV5TGs4aWZONE1qN21LWlRaaW9Yb29ZSlRjUnEyWVJHalZMRUpwN09OTWNhcDRWUE9aenNUN0tCT2c1MzRGbWR3QVpiZ1RDeW15U1F0cHRqRmJpNWtEeGZoYTU2S0hUeU5wK056bm9IMTJNREZYTUl6ZVJhWGNobVg4Mnlld3hWY3lYTzVpcXQ1SHMvSGczZ0lmVkdOOC9BRzNzUmJlQnZ2NEh5OGkvZnhJZGZ3QXJ5SER6QVFBM0FRRHNZdGNHRXpSdUlhM0kxN2NDZnV3cU40akJmeUl1ekNidHlFbXpFSUUzQXl6dUZhWHN4THVJNlg0aEVVWVR2dTRHVzhuRmZ3U2w3RjlmQ2lFTWRqSXViaEZQVERXWGdZWjJNRktpR2pDaDcweGlodXdDcWNpOVc4R200c3czS3NnNFRCMkFmN1lnajJ3MUFNdy80NEFBZHlJMzdBai9pSm0zZ05OL05hWHNmcmVRTnY1RTI4bWJmd1Z0N0dMYnlkVzNFL2ZzWXYrQlY5OERqNjR6dXN4ZmU0RnlPd0JzTnhDSlp5RzdmekR0N0p1M2czNytHOXZJODd1SlAzOHdIdTRtNVhRNlMrdnFDNnlhMjNKanRsUlpVcVcwMjFTM1ZYZHNpS2FlanVTaU5tNkdxN3QxclJUQ1hWMFpaUUYzcXFvNFlsSzRxcVcxS05JcWR2cGNFMFpFc0syN2xTMk43MGhMUFgzR0dIclZkWWo3bkRnbkZTanRHZDByVVNuOS92bVpSTmNVMXVsVTN2NU53ZHFjNG1MNmliNHE0VHZkVTVURktkcFNXaXFuZktmd2tEUWFsZVZsS1dLdFhiSFluZEtsZDl1b3pVNEJ3MTVCMlZsa21OZHBWK2pmR1VIcFBOVkVkQ1RsbnVScWVnMU9Ta05PV2xsQVdsWm50WGhHRnY4My9hOFB0Q3JobnBZYVFaZVdsQnZ6aXJsQ0pPeGNnZUZTTml4SWd6WXUrSXFla3hLV0lQS3JYWUJmdTJSRFhWVkpOYVVtcUptWEtYNm0zSlZmYk96bnU1MmZheE5NZE84OHpKcVNjN1dzdWltQ3lVVWZLMFZuSzNvN24rL1lGeVNYWEVWaDJ4MVp6WXFoQmJUWXV0Q3NyWVhtSUhQTEdjMlBHTTJQRzhsaldiM0tObHJ4Um84OTJhNkZNVHVtdU83dlAzMHIyOHNEMW1xcXFla1BXb3BrZ0pSN1pFdmdtcVhZbU1DWFRuU004M1FWQXlIRW1NUFNReGhBbE1KOFhNTjBHNWxNdzNRYTAzdVpjSktseFd4Z1JXdmdrQzRxeEtTamtWVTN0VVRJbDVVOElFS2RzRUtjY0UzWTRKdXJNbTZIWk0wSjFuZ3A2OEYrMXhUTERJTWNHaTdNUDJVUXd6cXVseW9vOWNuRlRpaHBIb0o5dDNzcEhkbW9nR3lUbEtzVlVrLzl0Q05zTXVKYUwrd2wzWjBCbEdoSVZ5WnFac29qMmFpSHJIaXVXRTVZazU1ZFBMQVhrbXlzUkZNY1hvNkpDZE1USWIvWE9PeW9SZSs2bWJFMGFYM083TlBIU0p2NlFrNEE4V1pRak5wTG9nWlZocVFtMnpCdWR2UkZzVG1iMk1NdW5yZm9FQmdSVUNLd1ZXT2Vnckc5U3BtcG9SemRST1AwYTBXSkU3UGZHZXpyaXEyMHRWajhySnVMUHMrSGZwRmJtWnRTUmJHWENGVTZiaGNKYVhDQ3dWV0NZd0tMQmNZRWlnNkMwazhrSStnV0tHa0pnaEpQaENnaThrK0VLQ0x5VDRRalpmZXRSU2dVR0IxUUpySEt3cWMxeGNWU1d3MnNrUGlMb0JwNjZ2d2lmUWlmMCtPNjgyWEZ0clkyMXRUV0d4WmJXbGpXL0VOZDM2QisrMjljRUFBQUFBQVFBQi8vOEFEM2phWTJBZ0FBcUFNSkVoa1drUEF3UFRQY2F2REF6L2RaaC8vVHZQZFB6L042Wm5qSC8vZi91dkR1SXp1QUNoSFlNZFl4d0RBNGpQbVBML043STQweDdHT0xDK1E0eVJJQm9BRzJnazNnQUFlTnF0VjJ0Ykc4Y1ZudFVOakFFRGtyQ2JkZDFSeHFJdU81Sko2empFVmh5eXk2STRTbEtCY2J2ck5PMHVFdTc5a3ZSR3IrbjlvdnlaczZKOTZuekxUOHQ3WmxZS09PQStmWjd5UWVlZG1YZm1YT2ZNUWtKTEVnK2pNSmF5OTBRczd2YW84dUJSUkxkY3VoRW5qK1hvWVVTRlp2clJySmdWZzRFNmNCc05FakdKUUcyUGhTT0N4RytSbzBrbWoxdFUwS3FoR2kwcWFqazhMdGJxd2crb0dzZ2s4Yk5DTGZDelpqR2dRckIvSkdsZUFRVHBrRXI5bzNHaFVNQXgxRGk4MnVEWjhXTGQ4YTlLUU9XUHEwNFZhNHBFUHpxTXg2dE93U2dzYVNwNlZBOGkxa2VyUVpBVFhEbVU5SEdmU211UHhqZWNoU0FjaEZRSm93WVZtL0hlT3hISTdpaVMxTzlqYWd0czJtUzBHY2N5czJ4WWRBTlQrVWpTQnE5dk1QUGpmaVFSalZFcWFhNGZKWmlSdkRiSDZEYWoyNG1ieEhIc0lsbzBId3hJN0VVa2VreHVZT3oyNkJxamE3MzB5WklZTU9OSldSekU4VENOeWZIaU9QY2dsa1A0by95NFJXVXRZVUdwbWNLbm1hQWYwWXp5YVZiNXlBQzJKQzJxbUhBakVuS1l6Uno0a2hmWlhkZWF6NzlVVE1JQmxkY2JXQXprU0k2Z0s5c29OeEdoM1NqcHUrbGVIS200RVV2YWVoQmh6ZVc0NUthMGFFYlRoY0FiaTRKTjh5eUd5bGNvRitXblZEaDRUTTRBaHRETWVvc3VhTW5XTHNLdGtqaVFmQUp0SlRGVGttMWo3WndlWDFnVVFlaXZONmFGYzFHZkxxUjVlNHJqd1lRQXJpY3lIS21VazJxQ0xWeE9DRWtYUms2c1JHcFZ1bTFWTEp5em5hNWpsM0EvZGUza3BrVnRIRHBlbUJmRkVGcGMxWWpYVWNTWGRGWW9oRFJNdDF1MHBFR1ZraTRGYi9BQkFNZ1FMZkZvRDZNbGs2OWxITFJrZ2lJUmd3RTAwM0tReUZFaWFSbGhhOUdLN3UxSFdXbTRIVituaFVOMTFLS3E3dTFHdlFkMjBtMWd2bXJtYXpvVEs4SERLRnRaQ2NoSmZWcjIrTXFodFB6c0V2OHM0WWVjVmVTaTJPeEhHWWNQL3ZvalpCaHFsOVliQ3RzbTJMWHJ2QVUzbVdkaWVOS0YvVjNNbms3V09Tbk1oS2dxeENzZ2NXL3NPSTdKVmwyTFRCVEMvWWhXbEM5RFdrVDVMU2lVSEVxeGhwa0VOdnpueWhWSExJdXE4SDJmSTFHRElWakxhck1lZmVpNXp5TnVxM0MyN3JYb3NzNGNsbGNRZUphZjAxbVI1WE02SzdGMGRWWm1lVlZuRlphZjE5a015MnM2bTJYNUJaMWRZT2xwTlVrRVZSS0VYTWsyT2UveXRXbVJQckc0T2wxOHp5NjJUaXl1VFJmZnQ0dFNDN3JrbmVjdysvcHY2eXM3ZXRLL0J2eVRzT3Q1K01kU3dUK1cxK0VmeXliOFk3a0cvMWgrRWY2eHZBSC9XSDRKL3JGY2gzOHMyMXAyVE9YZTFGQjdKWkhvZms0U21OemlOcmE1ZURjMDNmVG9KaTdtQzdnVFhYbE9XbFc2cWJqRFA1UGhzdmRmbnVRNlc2eUVYSHIwd25wV2R1cGhoTzdJWG43bFJIak80OXpTOGtWaitZczR6WExDeityRS9UM1RGcDRYcS84Uy9MZDlUMjFtdDV3Niszb2I4WUFEWjl1UFc1TnV0dWdsM2I3Y2FkSG1mNk9pd2dlZ3Y0d1VpZFdtYk1zdTl3YUU5djVvMUZWZE5KTUlMeURhTDU2bVRjZXAxeERoTzJoaXEzUVp0Qkw2YXRQUXNubmgwOFhBT3h5MWxaU2RFYzY4ZTVvbTIvWThxdUEyNUd4SkNUZVhyZDNvdUNUTDBqMHVyWldmaTMxdXVYUG8zc3JzVURzSlZZS243MjNDYmM4K1Q2VWdHU29xNDNYRmNpbElYZUNFVzk3VGUxS1lob2RBN1NESENocDIrT21hQzR3V25IZUdFbVdiYXdXWEdNa29vK0RLbnprVko3SVJUVGFpaU4rOHBYNnFDNFhRbWNSQ1lyYThsc2RDZFJDbVY2WkxOR2ZXZDFTWGxYSVc3MDFEeU03WVNKUFlqOXF5ZzVlZHJjOG5KZHVWcDRJcVRZenVuL3lJc1VrOHE5cnpiQ2t1K1ZkUFdCSk0wcFh3bDg3VExrOVN2SVgrMGVZbzd0RGxJT3E3ZUZ4bEoyNW5HMDROOS9hMVU2dDdidi9VcW4vbTNtZnRDRFRkOFo2bGNGdlRYVzhFMjdqRzROUzVWQ1MwVFJ2WUVScVh1VDdYYk9SVGZLbjUxblV1VUlYcjA4Yk5zK2Z2Nkd3T2o4NWt5LzlZMHQzL1Z4V3pUOXpIT2dxdDZrUzlOT0xjemk0YThCMXZFcFhYTWJyck5WUWVsOXliYVFqdUl3UjFlKzN4V1lJYlhtM1RiZHp5Tjg2WjcrRTRwMWFsbDREZjFQUXl4RnNjeFJEaGxqdDRnU2ZSZWx0elFkTmJnRi9WWXlGMkFQb0FEb05kUFhiTXpCNkFtWG5BbkM3QVBuTVlQR1FPZzY4eGg4SFg5VEY2WVFBVUFUa0d4ZnJZc1hPUGdPemNPOHh6R0gyRGVRYTl5enlEdnNrOGc3N0ZPa09BaEhVeVNGa25nd1BXeVdEQW5OY0Joc3hoY01nY0JvK1p3K0RieHE1dG9POFl1eGg5MTlqRjZIdkdMa2JmTjNZeCtvR3hpOUVQalYyTWZtVHNZdlJqeExnelRlQlB6SWkyQU4rejhEWEE5em5vWnVSajlGTzh0VG5uWnhZeTUrZUc0K1NjWDJEeks5TlRmMmxHWnNlUmhiempWeFl5L2RjNEp5Zjh4a0ltL05aQ0p2d08zSHZUODM1dlJvYitnWVZNLzRPRlRQOGpkdWFFUDFuSWhEOWJ5SVMvZ1B2cTlMeS9tcEdoLzgxQ3B2L2RRcWIvQXp0endqOHRaTUxJUWlaOHFNY1h6U2N1VmR4eHFWQU04ZDhUMm1Ec2V6UjdTTVhyL2FQSlk5MzZCUFdnQS9vQUFIamFZL0Rld1hBaUtHSWpJMk5mNUFiR25Sd01IQXpKQlJzWjJKMjJNRERJTXpOb2daamJqVmpVV0lRNG1Ma2dQQXNtSFNZWk5qQ1B5MmtQendIT0F5d0hHSmdadUlGOFhxYzlEQTVnQ09MdkJKSU1MaHRWR0RzQ0l6WTRkRVNBK0NrdUd6VkEvQjBjREJBQkJwZEk2WTNxSUtGZEhBME1qQ3dPSGNraE1Ba1EyRzdDb3NFaXdzSE1wN1dEOFgvckJwYmVqVXdNTHB0WlU5Z1lYRndBNTZVdStRQUFBQUFBQVFBQUFBQjQydFdVVFUvY01CQ0c3L3lLa1U5VUtqSExxVVVKQ0lHaW9pNWFQcmE5bTNnMmNYSHNkRHpac1ArK0RzNldwV29yYm9oYmJJMGZQKy9ZVG43NjJGcFlJd1hqWFNGbTJhRUFkSlhYeHRXRitMWXNEejZKMDVPOXZFVldXckU2MlFQSWUyZCs5bWcwR0YySXlyZFpXejFZM25TWTNhTCtvbmlKajN5RjJ2U3RrRThMMXVpMEozQ3F4VUpjbzJOVmsycEJ3dFg1MTdtQW5td2hHdWJ1V01waEdKNXhrVDBSS29vOER1UDM3OUUvZWVSdG5DOTk3elJ0WG9OL0xmSUNnNmtkMGt0bXQ2MGVnWElTbGp2R3VjWlFrZWs0OW5qYWptT0x3S3F4eWVoRW1nUllOaVpBNlIzRG5WL3hvQWdoVGxoVG9RdW9JZVpCQW00UTdpN25zSWo3cHVKNUt2Z0kzOU01d2l5YlpRazJyUjB4YXEyTVZmY1dZVERjZ0lMeTdBWVVIOE1VSXltR0xCaWJlYXJsb3B6bmN2Uk1lZjdJa0cvSnU1MzRDMEs4MjhBVEtWMC8zMjNJMUEzL044MzV0Z3FPRG1lZm93OUNmQkFRWHdSY2svK0JGY05aejQybkFQdWpRNGdTZFZUcjc1OXVUbm84aTlYS1ZFYlphVGptL2JDcjlVSWxaMUlhVzBVUGJ5KzJvNUxMNS8vRkwzcEpiVGs9KSBmb3JtYXQoIndvZmYiKTtmb250LXdlaWdodDo3MDA7Zm9udC1zdHlsZTpub3JtYWx9LnBmLWMtZm9ybS1jb250cm9sey0tcGYtZ2xvYmFsLS1Db2xvci0tMTAwOiB2YXIoLS1wZi1nbG9iYWwtLUNvbG9yLS1kYXJrLTEwMCk7LS1wZi1nbG9iYWwtLUNvbG9yLS0yMDA6IHZhcigtLXBmLWdsb2JhbC0tQ29sb3ItLWRhcmstMjAwKTstLXBmLWdsb2JhbC0tQm9yZGVyQ29sb3ItLTEwMDogdmFyKC0tcGYtZ2xvYmFsLS1Cb3JkZXJDb2xvci0tZGFyay0xMDApOy0tcGYtZ2xvYmFsLS1wcmltYXJ5LWNvbG9yLS0xMDA6IHZhcigtLXBmLWdsb2JhbC0tcHJpbWFyeS1jb2xvci0tZGFyay0xMDApOy0tcGYtZ2xvYmFsLS1saW5rLS1Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1saW5rLS1Db2xvci0tZGFyayk7LS1wZi1nbG9iYWwtLWxpbmstLUNvbG9yLS1ob3ZlcjogdmFyKC0tcGYtZ2xvYmFsLS1saW5rLS1Db2xvci0tZGFyay0taG92ZXIpOy0tcGYtZ2xvYmFsLS1CYWNrZ3JvdW5kQ29sb3ItLTEwMDogdmFyKC0tcGYtZ2xvYmFsLS1CYWNrZ3JvdW5kQ29sb3ItLWxpZ2h0LTEwMCl9LnBmLWMtbG9naW5fX2hlYWRlciwucGYtYy1sb2dpbl9fZm9vdGVyey0tcGYtZ2xvYmFsLS1Db2xvci0tMTAwOiB2YXIoLS1wZi1nbG9iYWwtLUNvbG9yLS1saWdodC0xMDApOy0tcGYtZ2xvYmFsLS1Db2xvci0tMjAwOiB2YXIoLS1wZi1nbG9iYWwtLUNvbG9yLS1saWdodC0yMDApOy0tcGYtZ2xvYmFsLS1Cb3JkZXJDb2xvci0tMTAwOiB2YXIoLS1wZi1nbG9iYWwtLUJvcmRlckNvbG9yLS1saWdodC0xMDApOy0tcGYtZ2xvYmFsLS1wcmltYXJ5LWNvbG9yLS0xMDA6IHZhcigtLXBmLWdsb2JhbC0tcHJpbWFyeS1jb2xvci0tbGlnaHQtMTAwKTstLXBmLWdsb2JhbC0tbGluay0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tbGluay0tQ29sb3ItLWxpZ2h0KTstLXBmLWdsb2JhbC0tbGluay0tQ29sb3ItLWhvdmVyOiB2YXIoLS1wZi1nbG9iYWwtLWxpbmstLUNvbG9yLS1saWdodCk7LS1wZi1nbG9iYWwtLUJhY2tncm91bmRDb2xvci0tMTAwOiB2YXIoLS1wZi1nbG9iYWwtLUJhY2tncm91bmRDb2xvci0tZGFyay0xMDApfS5wZi1jLWxvZ2luX19oZWFkZXIgLnBmLWMtY2FyZCwucGYtYy1sb2dpbl9fZm9vdGVyIC5wZi1jLWNhcmR7LS1wZi1jLWNhcmQtLUJhY2tncm91bmRDb2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1CYWNrZ3JvdW5kQ29sb3ItLWRhcmstdHJhbnNwYXJlbnQtMjAwKX0ucGYtYy1sb2dpbl9faGVhZGVyIC5wZi1jLWJ1dHRvbiwucGYtYy1sb2dpbl9fZm9vdGVyIC5wZi1jLWJ1dHRvbnstLXBmLWMtYnV0dG9uLS1tLXByaW1hcnktLUNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLXByaW1hcnktY29sb3ItLWRhcmstMTAwKTstLXBmLWMtYnV0dG9uLS1tLXByaW1hcnktLWhvdmVyLS1Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1wcmltYXJ5LWNvbG9yLS1kYXJrLTEwMCk7LS1wZi1jLWJ1dHRvbi0tbS1wcmltYXJ5LS1mb2N1cy0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tcHJpbWFyeS1jb2xvci0tZGFyay0xMDApOy0tcGYtYy1idXR0b24tLW0tcHJpbWFyeS0tYWN0aXZlLS1Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1wcmltYXJ5LWNvbG9yLS1kYXJrLTEwMCk7LS1wZi1jLWJ1dHRvbi0tbS1wcmltYXJ5LS1CYWNrZ3JvdW5kQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tQmFja2dyb3VuZENvbG9yLS1saWdodC0xMDApOy0tcGYtYy1idXR0b24tLW0tcHJpbWFyeS0taG92ZXItLUJhY2tncm91bmRDb2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1CYWNrZ3JvdW5kQ29sb3ItLWxpZ2h0LTMwMCk7LS1wZi1jLWJ1dHRvbi0tbS1wcmltYXJ5LS1mb2N1cy0tQmFja2dyb3VuZENvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLUJhY2tncm91bmRDb2xvci0tbGlnaHQtMzAwKTstLXBmLWMtYnV0dG9uLS1tLXByaW1hcnktLWFjdGl2ZS0tQmFja2dyb3VuZENvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLUJhY2tncm91bmRDb2xvci0tbGlnaHQtMzAwKTstLXBmLWMtYnV0dG9uLS1tLXNlY29uZGFyeS0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tQ29sb3ItLWxpZ2h0LTEwMCk7LS1wZi1jLWJ1dHRvbi0tbS1zZWNvbmRhcnktLWhvdmVyLS1Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1Db2xvci0tbGlnaHQtMTAwKTstLXBmLWMtYnV0dG9uLS1tLXNlY29uZGFyeS0tZm9jdXMtLUNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLUNvbG9yLS1saWdodC0xMDApOy0tcGYtYy1idXR0b24tLW0tc2Vjb25kYXJ5LS1hY3RpdmUtLUNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLUNvbG9yLS1saWdodC0xMDApOy0tcGYtYy1idXR0b24tLW0tc2Vjb25kYXJ5LS1Cb3JkZXJDb2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1Db2xvci0tbGlnaHQtMTAwKTstLXBmLWMtYnV0dG9uLS1tLXNlY29uZGFyeS0taG92ZXItLUJvcmRlckNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLUNvbG9yLS1saWdodC0xMDApOy0tcGYtYy1idXR0b24tLW0tc2Vjb25kYXJ5LS1mb2N1cy0tQm9yZGVyQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tQ29sb3ItLWxpZ2h0LTEwMCk7LS1wZi1jLWJ1dHRvbi0tbS1zZWNvbmRhcnktLWFjdGl2ZS0tQm9yZGVyQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tQ29sb3ItLWxpZ2h0LTEwMCl9OnJvb3R7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWJsYWNrLTEwMDogI2ZhZmFmYTstLXBmLWdsb2JhbC0tcGFsZXR0ZS0tYmxhY2stMTUwOiAjZjVmNWY1Oy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1ibGFjay0yMDA6ICNlZGVkZWQ7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWJsYWNrLTMwMDogI2QyZDJkMjstLXBmLWdsb2JhbC0tcGFsZXR0ZS0tYmxhY2stNDAwOiAjYjhiYmJlOy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1ibGFjay01MDA6ICM4YThkOTA7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWJsYWNrLTYwMDogIzczNzY3OTstLXBmLWdsb2JhbC0tcGFsZXR0ZS0tYmxhY2stNzAwOiAjNGY1MjU1Oy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1ibGFjay04MDA6ICMzYzNmNDI7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWJsYWNrLTg1MDogIzIxMjQyNzstLXBmLWdsb2JhbC0tcGFsZXR0ZS0tYmxhY2stOTAwOiAjMTUxNTE1Oy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1ibGFjay0xMDAwOiAjMDMwMzAzOy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1ibHVlLTUwOiAjZGVmM2ZmOy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1ibHVlLTEwMDogI2JlZTFmNDstLXBmLWdsb2JhbC0tcGFsZXR0ZS0tYmx1ZS0yMDA6ICM3M2JjZjc7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWJsdWUtMzAwOiAjMmI5YWYzOy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1ibHVlLTQwMDogIzA2YzstLXBmLWdsb2JhbC0tcGFsZXR0ZS0tYmx1ZS01MDA6ICMwMDQwODA7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWJsdWUtNjAwOiAjMDA0MzY4Oy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1ibHVlLTcwMDogIzAwMjIzNTstLXBmLWdsb2JhbC0tcGFsZXR0ZS0tY3lhbi0xMDA6ICNhMmQ5ZDk7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWN5YW4tMjAwOiAjNzNjNWM1Oy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1jeWFuLTMwMDogIzAwOTU5NjstLXBmLWdsb2JhbC0tcGFsZXR0ZS0tY3lhbi00MDA6ICMwMDVmNjA7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWN5YW4tNTAwOiAjMDAzNzM3Oy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1jeWFuLTYwMDogIzAwM2Q0NDstLXBmLWdsb2JhbC0tcGFsZXR0ZS0tY3lhbi03MDA6ICMwMDFmMjI7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWdvbGQtMTAwOiAjZjllMGEyOy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1nb2xkLTIwMDogI2Y2ZDE3MzstLXBmLWdsb2JhbC0tcGFsZXR0ZS0tZ29sZC0zMDA6ICNmNGMxNDU7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWdvbGQtNDAwOiAjZjBhYjAwOy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1nb2xkLTUwMDogI2M1OGMwMDstLXBmLWdsb2JhbC0tcGFsZXR0ZS0tZ29sZC02MDA6ICM3OTU2MDA7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWdvbGQtNzAwOiAjM2QyYzAwOy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1ncmVlbi0xMDA6ICNiZGU1Yjg7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWdyZWVuLTIwMDogIzk1ZDU4ZTstLXBmLWdsb2JhbC0tcGFsZXR0ZS0tZ3JlZW4tMzAwOiAjNmVjNjY0Oy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1ncmVlbi00MDA6ICM1YmEzNTI7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWdyZWVuLTUwMDogIzQ2N2Y0MDstLXBmLWdsb2JhbC0tcGFsZXR0ZS0tZ3JlZW4tNjAwOiAjMWU0ZjE4Oy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1ncmVlbi03MDA6ICMwZjI4MGQ7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWxpZ2h0LWJsdWUtMTAwOiAjYmVlZGY5Oy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1saWdodC1ibHVlLTIwMDogIzdjZGJmMzstLXBmLWdsb2JhbC0tcGFsZXR0ZS0tbGlnaHQtYmx1ZS0zMDA6ICMzNWNhZWQ7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWxpZ2h0LWJsdWUtNDAwOiAjMDBiOWU0Oy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1saWdodC1ibHVlLTUwMDogIzAwOGJhZDstLXBmLWdsb2JhbC0tcGFsZXR0ZS0tbGlnaHQtYmx1ZS02MDA6ICMwMDVjNzM7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWxpZ2h0LWJsdWUtNzAwOiAjMDAyZDM5Oy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1saWdodC1ncmVlbi0xMDA6ICNlNGY1YmM7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWxpZ2h0LWdyZWVuLTIwMDogI2M4ZWI3OTstLXBmLWdsb2JhbC0tcGFsZXR0ZS0tbGlnaHQtZ3JlZW4tMzAwOiAjYWNlMTJlOy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1saWdodC1ncmVlbi00MDA6ICM5MmQ0MDA7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLWxpZ2h0LWdyZWVuLTUwMDogIzZjYTEwMDstLXBmLWdsb2JhbC0tcGFsZXR0ZS0tbGlnaHQtZ3JlZW4tNjAwOiAjNDg2YjAwOy0tcGYtZ2xvYmFsLS1wYWxldHRlLS1saWdodC1ncmVlbi03MDA6ICMyNTM2MDA7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLW9yYW5nZS0xMDA6ICNmNGI2Nzg7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLW9yYW5nZS0yMDA6ICNlZjkyMzQ7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLW9yYW5nZS0zMDA6ICNlYzdhMDg7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLW9yYW5nZS00MDA6ICNjNDYxMDA7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLW9yYW5nZS01MDA6ICM4ZjQ3MDA7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLW9yYW5nZS02MDA6ICM3NzNkMDA7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLW9yYW5nZS03MDA6ICMzYjFmMDA7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLXB1cnBsZS0xMDA6ICNjYmMxZmY7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLXB1cnBsZS0yMDA6ICNiMmEzZmY7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLXB1cnBsZS0zMDA6ICNhMThmZmY7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLXB1cnBsZS00MDA6ICM4NDc2ZDE7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLXB1cnBsZS01MDA6ICM2NzUzYWM7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLXB1cnBsZS02MDA6ICM0MDE5OWE7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLXB1cnBsZS03MDA6ICMxZjAwNjY7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLXJlZC0xMDA6ICNjOTE5MGI7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLXJlZC0yMDA6ICNhMzAwMDA7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLXJlZC0zMDA6ICM3ZDEwMDc7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLXJlZC00MDA6ICM0NzAwMDA7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLXJlZC01MDA6ICMyYzAwMDA7LS1wZi1nbG9iYWwtLXBhbGV0dGUtLXdoaXRlOiAjZmZmOy0tcGYtZ2xvYmFsLS1CYWNrZ3JvdW5kQ29sb3ItLTEwMDogI2ZmZjstLXBmLWdsb2JhbC0tQmFja2dyb3VuZENvbG9yLS0xNTA6ICNmNWY1ZjU7LS1wZi1nbG9iYWwtLUJhY2tncm91bmRDb2xvci0tMjAwOiAjZmFmYWZhOy0tcGYtZ2xvYmFsLS1CYWNrZ3JvdW5kQ29sb3ItLTMwMDogI2VkZWRlZDstLXBmLWdsb2JhbC0tQmFja2dyb3VuZENvbG9yLS1saWdodC0xMDA6ICNmZmY7LS1wZi1nbG9iYWwtLUJhY2tncm91bmRDb2xvci0tbGlnaHQtMjAwOiAjZmFmYWZhOy0tcGYtZ2xvYmFsLS1CYWNrZ3JvdW5kQ29sb3ItLWxpZ2h0LTMwMDogI2VkZWRlZDstLXBmLWdsb2JhbC0tQmFja2dyb3VuZENvbG9yLS1kYXJrLTEwMDogIzE1MTUxNTstLXBmLWdsb2JhbC0tQmFja2dyb3VuZENvbG9yLS1kYXJrLTIwMDogIzNjM2Y0MjstLXBmLWdsb2JhbC0tQmFja2dyb3VuZENvbG9yLS1kYXJrLTMwMDogIzIxMjQyNzstLXBmLWdsb2JhbC0tQmFja2dyb3VuZENvbG9yLS1kYXJrLTQwMDogIzRmNTI1NTstLXBmLWdsb2JhbC0tQmFja2dyb3VuZENvbG9yLS1kYXJrLXRyYW5zcGFyZW50LTEwMDogcmdiYSgzLDMsMywwLjYyKTstLXBmLWdsb2JhbC0tQmFja2dyb3VuZENvbG9yLS1kYXJrLXRyYW5zcGFyZW50LTIwMDogcmdiYSgzLDMsMywwLjMyKTstLXBmLWdsb2JhbC0tQ29sb3ItLTEwMDogIzE1MTUxNTstLXBmLWdsb2JhbC0tQ29sb3ItLTIwMDogIzczNzY3OTstLXBmLWdsb2JhbC0tQ29sb3ItLTMwMDogIzNjM2Y0MjstLXBmLWdsb2JhbC0tQ29sb3ItLTQwMDogIzhhOGQ5MDstLXBmLWdsb2JhbC0tQ29sb3ItLWxpZ2h0LTEwMDogI2ZmZjstLXBmLWdsb2JhbC0tQ29sb3ItLWxpZ2h0LTIwMDogI2VkZWRlZDstLXBmLWdsb2JhbC0tQ29sb3ItLWxpZ2h0LTMwMDogI2QyZDJkMjstLXBmLWdsb2JhbC0tQ29sb3ItLWRhcmstMTAwOiAjMTUxNTE1Oy0tcGYtZ2xvYmFsLS1Db2xvci0tZGFyay0yMDA6ICM3Mzc2Nzk7LS1wZi1nbG9iYWwtLWFjdGl2ZS1jb2xvci0tMTAwOiAjMDZjOy0tcGYtZ2xvYmFsLS1hY3RpdmUtY29sb3ItLTIwMDogI2JlZTFmNDstLXBmLWdsb2JhbC0tYWN0aXZlLWNvbG9yLS0zMDA6ICM3M2JjZjc7LS1wZi1nbG9iYWwtLWFjdGl2ZS1jb2xvci0tNDAwOiAjMmI5YWYzOy0tcGYtZ2xvYmFsLS1kaXNhYmxlZC1jb2xvci0tMTAwOiAjNzM3Njc5Oy0tcGYtZ2xvYmFsLS1kaXNhYmxlZC1jb2xvci0tMjAwOiAjZDJkMmQyOy0tcGYtZ2xvYmFsLS1kaXNhYmxlZC1jb2xvci0tMzAwOiAjZWRlZGVkOy0tcGYtZ2xvYmFsLS1wcmltYXJ5LWNvbG9yLS0xMDA6ICMwNmM7LS1wZi1nbG9iYWwtLXByaW1hcnktY29sb3ItLTIwMDogIzAwNDA4MDstLXBmLWdsb2JhbC0tcHJpbWFyeS1jb2xvci0tbGlnaHQtMTAwOiAjNzNiY2Y3Oy0tcGYtZ2xvYmFsLS1wcmltYXJ5LWNvbG9yLS1kYXJrLTEwMDogIzA2YzstLXBmLWdsb2JhbC0tc2Vjb25kYXJ5LWNvbG9yLS0xMDA6ICM3Mzc2Nzk7LS1wZi1nbG9iYWwtLWRlZmF1bHQtY29sb3ItLTEwMDogIzczYzVjNTstLXBmLWdsb2JhbC0tZGVmYXVsdC1jb2xvci0tMjAwOiAjMDA5NTk2Oy0tcGYtZ2xvYmFsLS1kZWZhdWx0LWNvbG9yLS0zMDA6ICMwMDM3Mzc7LS1wZi1nbG9iYWwtLXN1Y2Nlc3MtY29sb3ItLTEwMDogIzkyZDQwMDstLXBmLWdsb2JhbC0tc3VjY2Vzcy1jb2xvci0tMjAwOiAjNDg2YjAwOy0tcGYtZ2xvYmFsLS1pbmZvLWNvbG9yLS0xMDA6ICM3M2JjZjc7LS1wZi1nbG9iYWwtLWluZm8tY29sb3ItLTIwMDogIzAwNDM2ODstLXBmLWdsb2JhbC0td2FybmluZy1jb2xvci0tMTAwOiAjZjBhYjAwOy0tcGYtZ2xvYmFsLS13YXJuaW5nLWNvbG9yLS0yMDA6ICM3OTU2MDA7LS1wZi1nbG9iYWwtLWRhbmdlci1jb2xvci0tMTAwOiAjYzkxOTBiOy0tcGYtZ2xvYmFsLS1kYW5nZXItY29sb3ItLTIwMDogI2EzMDAwMDstLXBmLWdsb2JhbC0tZGFuZ2VyLWNvbG9yLS0zMDA6ICM0NzAwMDA7LS1wZi1nbG9iYWwtLUJveFNoYWRvdy0tc206IDAgLjA2MjVyZW0gLjEyNXJlbSAwIHJnYmEoMywzLDMsMC4yKTstLXBmLWdsb2JhbC0tQm94U2hhZG93LS1zbS1yaWdodDogLjI1cmVtIDAgLjYyNXJlbSAtLjI1cmVtIHJnYmEoMywzLDMsMC4xMik7LS1wZi1nbG9iYWwtLUJveFNoYWRvdy0tc20tbGVmdDogLS4yNXJlbSAwIC42MjVyZW0gLS4yNXJlbSByZ2JhKDMsMywzLDAuMTIpOy0tcGYtZ2xvYmFsLS1Cb3hTaGFkb3ctLXNtLWJvdHRvbTogMCAuMjVyZW0gLjYyNXJlbSAtLjI1cmVtIHJnYmEoMywzLDMsMC4xMik7LS1wZi1nbG9iYWwtLUJveFNoYWRvdy0tc20tdG9wOiAwIC0uMjVyZW0gLjYyNXJlbSAtLjI1cmVtIHJnYmEoMywzLDMsMC4xMik7LS1wZi1nbG9iYWwtLUJveFNoYWRvdy0tbWQ6IDAgLjA2MjVyZW0gLjA2MjVyZW0gMHJlbSByZ2JhKDMsMywzLDAuMDUpLDAgLjI1cmVtIC41cmVtIC4yNXJlbSByZ2JhKDMsMywzLDAuMDYpOy0tcGYtZ2xvYmFsLS1Cb3hTaGFkb3ctLW1kLXJpZ2h0OiAuMzEyNXJlbSAwIC42MjVyZW0gLS4yNXJlbSByZ2JhKDMsMywzLDAuMjUpOy0tcGYtZ2xvYmFsLS1Cb3hTaGFkb3ctLW1kLWxlZnQ6IC0uMzEyNXJlbSAwIC42MjVyZW0gLS4yNXJlbSByZ2JhKDMsMywzLDAuMjUpOy0tcGYtZ2xvYmFsLS1Cb3hTaGFkb3ctLW1kLWJvdHRvbTogMCAuMzEyNXJlbSAuNjI1cmVtIC0uMjVyZW0gcmdiYSgzLDMsMywwLjI1KTstLXBmLWdsb2JhbC0tQm94U2hhZG93LS1tZC10b3A6IDAgLS4zMTI1cmVtIC42MjVyZW0gLS4yNXJlbSByZ2JhKDMsMywzLDAuMjUpOy0tcGYtZ2xvYmFsLS1Cb3hTaGFkb3ctLWxnOiAwIC4xODc1cmVtIC40Mzc1cmVtIC4xODc1cmVtIHJnYmEoMywzLDMsMC4xMyksMCAuNjg3NXJlbSAxLjVyZW0gMXJlbSByZ2JhKDMsMywzLDAuMTIpOy0tcGYtZ2xvYmFsLS1Cb3hTaGFkb3ctLWxnLXJpZ2h0OiAuNzVyZW0gMCAuNjI1cmVtIC0uMjVyZW0gcmdiYSgzLDMsMywwLjA3KTstLXBmLWdsb2JhbC0tQm94U2hhZG93LS1sZy1sZWZ0OiAtLjc1cmVtIDAgLjYyNXJlbSAtLjI1cmVtIHJnYmEoMywzLDMsMC4wNyk7LS1wZi1nbG9iYWwtLUJveFNoYWRvdy0tbGctYm90dG9tOiAwIC43NXJlbSAuNjI1cmVtIC0uMjVyZW0gcmdiYSgzLDMsMywwLjA3KTstLXBmLWdsb2JhbC0tQm94U2hhZG93LS1sZy10b3A6IDAgLS43NXJlbSAuNjI1cmVtIC0uMjVyZW0gcmdiYSgzLDMsMywwLjA3KTstLXBmLWdsb2JhbC0tQm94U2hhZG93LS1pbnNldDogaW5zZXQgMCAwIC42MjVyZW0gMCByZ2JhKDMsMywzLDAuMjUpOy0tcGYtZ2xvYmFsLS1mb250LXBhdGg6IC4vYXNzZXRzL2ZvbnRzOy0tcGYtZ2xvYmFsLS1mb250aWNvbi1wYXRoOiAuL2Fzc2V0cy9wZmljb247LS1wZi1nbG9iYWwtLXNwYWNlci0teHM6IC4yNXJlbTstLXBmLWdsb2JhbC0tc3BhY2VyLS1zbTogLjVyZW07LS1wZi1nbG9iYWwtLXNwYWNlci0tbWQ6IDFyZW07LS1wZi1nbG9iYWwtLXNwYWNlci0tbGc6IDEuNXJlbTstLXBmLWdsb2JhbC0tc3BhY2VyLS14bDogMnJlbTstLXBmLWdsb2JhbC0tc3BhY2VyLS0yeGw6IDNyZW07LS1wZi1nbG9iYWwtLXNwYWNlci0tM3hsOiA0cmVtOy0tcGYtZ2xvYmFsLS1zcGFjZXItLWZvcm0tZWxlbWVudDogLjM3NXJlbTstLXBmLWdsb2JhbC0tZ3V0dGVyOiAxLjVyZW07LS1wZi1nbG9iYWwtLWd1dHRlci0tbWQ6IDFyZW07LS1wZi1nbG9iYWwtLWdvbGRlbi1yYXRpbzogMS42ODE7LS1wZi1nbG9iYWwtLVpJbmRleC0teHM6IDEwMDstLXBmLWdsb2JhbC0tWkluZGV4LS1zbTogMjAwOy0tcGYtZ2xvYmFsLS1aSW5kZXgtLW1kOiAzMDA7LS1wZi1nbG9iYWwtLVpJbmRleC0tbGc6IDQwMDstLXBmLWdsb2JhbC0tWkluZGV4LS14bDogNTAwOy0tcGYtZ2xvYmFsLS1aSW5kZXgtLTJ4bDogNjAwOy0tcGYtZ2xvYmFsLS1icmVha3BvaW50LS14czogMDstLXBmLWdsb2JhbC0tYnJlYWtwb2ludC0tc206IDU3NnB4Oy0tcGYtZ2xvYmFsLS1icmVha3BvaW50LS1tZDogNzY4cHg7LS1wZi1nbG9iYWwtLWJyZWFrcG9pbnQtLWxnOiA5OTJweDstLXBmLWdsb2JhbC0tYnJlYWtwb2ludC0teGw6IDEyMDBweDstLXBmLWdsb2JhbC0tYnJlYWtwb2ludC0tMnhsOiAxNDUwcHg7LS1wZi1nbG9iYWwtLWxpbmstLUNvbG9yOiAjMDZjOy0tcGYtZ2xvYmFsLS1saW5rLS1Db2xvci0taG92ZXI6ICMwMDQwODA7LS1wZi1nbG9iYWwtLWxpbmstLUNvbG9yLS1saWdodDogIzczYmNmNzstLXBmLWdsb2JhbC0tbGluay0tQ29sb3ItLWxpZ2h0LS1ob3ZlcjogIzJiOWFmMzstLXBmLWdsb2JhbC0tbGluay0tQ29sb3ItLWRhcms6ICMwNmM7LS1wZi1nbG9iYWwtLWxpbmstLUNvbG9yLS1kYXJrLS1ob3ZlcjogIzAwNDA4MDstLXBmLWdsb2JhbC0tbGluay0tRm9udFdlaWdodDogNTAwOy0tcGYtZ2xvYmFsLS1saW5rLS1UZXh0RGVjb3JhdGlvbjogbm9uZTstLXBmLWdsb2JhbC0tbGluay0tVGV4dERlY29yYXRpb24tLWhvdmVyOiB1bmRlcmxpbmU7LS1wZi1nbG9iYWwtLUJvcmRlcldpZHRoLS1zbTogMXB4Oy0tcGYtZ2xvYmFsLS1Cb3JkZXJXaWR0aC0tbWQ6IDJweDstLXBmLWdsb2JhbC0tQm9yZGVyV2lkdGgtLWxnOiAzcHg7LS1wZi1nbG9iYWwtLUJvcmRlckNvbG9yLS0xMDA6ICNkMmQyZDI7LS1wZi1nbG9iYWwtLUJvcmRlckNvbG9yLS0yMDA6ICM4YThkOTA7LS1wZi1nbG9iYWwtLUJvcmRlckNvbG9yLS0zMDA6ICNlZGVkZWQ7LS1wZi1nbG9iYWwtLUJvcmRlckNvbG9yLS1kYXJrLTEwMDogI2QyZDJkMjstLXBmLWdsb2JhbC0tQm9yZGVyQ29sb3ItLWxpZ2h0LTEwMDogI2I4YmJiZTstLXBmLWdsb2JhbC0tQm9yZGVyUmFkaXVzLS1zbTogM3B4Oy0tcGYtZ2xvYmFsLS1Cb3JkZXJSYWRpdXMtLWxnOiAzMGVtOy0tcGYtZ2xvYmFsLS1pY29uLS1Db2xvci0tbGlnaHQ6ICM3Mzc2Nzk7LS1wZi1nbG9iYWwtLWljb24tLUNvbG9yLS1kYXJrOiAjMTUxNTE1Oy0tcGYtZ2xvYmFsLS1pY29uLS1Gb250U2l6ZS0tc206IC42MjVyZW07LS1wZi1nbG9iYWwtLWljb24tLUZvbnRTaXplLS1tZDogMS4xMjVyZW07LS1wZi1nbG9iYWwtLWljb24tLUZvbnRTaXplLS1sZzogMS41cmVtOy0tcGYtZ2xvYmFsLS1pY29uLS1Gb250U2l6ZS0teGw6IDMuMzc1cmVtOy0tcGYtZ2xvYmFsLS1Gb250RmFtaWx5LS1zYW5zLXNlcmlmOiBvdmVycGFzcyxvdmVycGFzcyxvcGVuIHNhbnMsLWFwcGxlLXN5c3RlbSxibGlua21hY3N5c3RlbWZvbnQsU2Vnb2UgVUkscm9ib3RvLEhlbHZldGljYSBOZXVlLGFyaWFsLHNhbnMtc2VyaWYsQXBwbGUgQ29sb3IgRW1vamksU2Vnb2UgVUkgRW1vamksU2Vnb2UgVUkgU3ltYm9sOy0tcGYtZ2xvYmFsLS1Gb250RmFtaWx5LS1oZWFkaW5nLS1zYW5zLXNlcmlmOiBvdmVycGFzcyxvdmVycGFzcyxvcGVuIHNhbnMsLWFwcGxlLXN5c3RlbSxibGlua21hY3N5c3RlbWZvbnQsU2Vnb2UgVUkscm9ib3RvLEhlbHZldGljYSBOZXVlLGFyaWFsLHNhbnMtc2VyaWYsQXBwbGUgQ29sb3IgRW1vamksU2Vnb2UgVUkgRW1vamksU2Vnb2UgVUkgU3ltYm9sOy0tcGYtZ2xvYmFsLS1Gb250RmFtaWx5LS1tb25vc3BhY2U6IG92ZXJwYXNzLW1vbm8sb3ZlcnBhc3MtbW9ubyxTRk1vbm8tUmVndWxhcixtZW5sbyxtb25hY28sY29uc29sYXMsTGliZXJhdGlvbiBNb25vLENvdXJpZXIgTmV3LG1vbm9zcGFjZTstLXBmLWdsb2JhbC0tRm9udEZhbWlseS0tcmVkaGF0Zm9udC0tc2Fucy1zZXJpZjogUmVkSGF0VGV4dCxPdmVycGFzcyxvdmVycGFzcyxoZWx2ZXRpY2EsYXJpYWwsc2Fucy1zZXJpZjstLXBmLWdsb2JhbC0tRm9udEZhbWlseS0tcmVkaGF0Zm9udC0taGVhZGluZy0tc2Fucy1zZXJpZjogUmVkSGF0RGlzcGxheSxPdmVycGFzcyxvdmVycGFzcyxoZWx2ZXRpY2EsYXJpYWwsc2Fucy1zZXJpZjstLXBmLWdsb2JhbC0tRm9udEZhbWlseS0tcmVkaGF0Zm9udC0tbW9ub3NwYWNlOiBMaWJlcmF0aW9uIE1vbm8sY29uc29sYXMsU0ZNb25vLVJlZ3VsYXIsbWVubG8sbW9uYWNvLENvdXJpZXIgTmV3LG1vbm9zcGFjZTstLXBmLWdsb2JhbC0tRm9udFNpemUtLTR4bDogMi4yNXJlbTstLXBmLWdsb2JhbC0tRm9udFNpemUtLTN4bDogMS43NXJlbTstLXBmLWdsb2JhbC0tRm9udFNpemUtLTJ4bDogMS41cmVtOy0tcGYtZ2xvYmFsLS1Gb250U2l6ZS0teGw6IDEuMjVyZW07LS1wZi1nbG9iYWwtLUZvbnRTaXplLS1sZzogMS4xMjVyZW07LS1wZi1nbG9iYWwtLUZvbnRTaXplLS1tZDogMXJlbTstLXBmLWdsb2JhbC0tRm9udFNpemUtLXNtOiAuODc1cmVtOy0tcGYtZ2xvYmFsLS1Gb250U2l6ZS0teHM6IC43NXJlbTstLXBmLWdsb2JhbC0tRm9udFdlaWdodC0tbGlnaHQ6IDMwMDstLXBmLWdsb2JhbC0tRm9udFdlaWdodC0tbm9ybWFsOiA0MDA7LS1wZi1nbG9iYWwtLUZvbnRXZWlnaHQtLXNlbWktYm9sZDogNTAwOy0tcGYtZ2xvYmFsLS1Gb250V2VpZ2h0LS1ib2xkOiA2MDA7LS1wZi1nbG9iYWwtLUZvbnRXZWlnaHQtLXJlZGhhdGZvbnQtLWJvbGQ6IDcwMDstLXBmLWdsb2JhbC0tTGluZUhlaWdodC0tc206IDEuMzstLXBmLWdsb2JhbC0tTGluZUhlaWdodC0tbWQ6IDEuNTstLXBmLWdsb2JhbC0tTGlzdFN0eWxlOiBkaXNjIG91dHNpZGU7LS1wZi1nbG9iYWwtLVRyYW5zaXRpb246IGFsbCAyNTBtcyBjdWJpYy1iZXppZXIoMC40MiwgMCwgMC41OCwgMSk7LS1wZi1nbG9iYWwtLVRpbWluZ0Z1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC42NDUsIDAuMDQ1LCAwLjM1NSwgMSk7LS1wZi1nbG9iYWwtLVRyYW5zaXRpb25EdXJhdGlvbjogMjUwbXM7LS1wZi1nbG9iYWwtLWFycm93LS13aWR0aDogLjkzNzVyZW07LS1wZi1nbG9iYWwtLWFycm93LS13aWR0aC1sZzogMS41NjI1cmVtOy0tcGYtZ2xvYmFsLS10YXJnZXQtc2l6ZS0tTWluV2lkdGg6IDQ0cHg7LS1wZi1nbG9iYWwtLXRhcmdldC1zaXplLS1NaW5IZWlnaHQ6IDQ0cHh9LnBmLW0tcmVkaGF0LWZvbnR7LS1wZi1nbG9iYWwtLUZvbnRGYW1pbHktLXNhbnMtc2VyaWY6IHZhcigtLXBmLWdsb2JhbC0tRm9udEZhbWlseS0tcmVkaGF0Zm9udC0tc2Fucy1zZXJpZik7LS1wZi1nbG9iYWwtLUZvbnRGYW1pbHktLWhlYWRpbmctLXNhbnMtc2VyaWY6IHZhcigtLXBmLWdsb2JhbC0tRm9udEZhbWlseS0tcmVkaGF0Zm9udC0taGVhZGluZy0tc2Fucy1zZXJpZik7LS1wZi1nbG9iYWwtLUZvbnRGYW1pbHktLW1vbm9zcGFjZTogdmFyKC0tcGYtZ2xvYmFsLS1Gb250RmFtaWx5LS1yZWRoYXRmb250LS1tb25vc3BhY2UpOy0tcGYtZ2xvYmFsLS1Gb250V2VpZ2h0LS1zZW1pLWJvbGQ6IHZhcigtLXBmLWdsb2JhbC0tRm9udFdlaWdodC0tcmVkaGF0Zm9udC0tYm9sZCk7LS1wZi1nbG9iYWwtLUZvbnRXZWlnaHQtLWJvbGQ6IHZhcigtLXBmLWdsb2JhbC0tRm9udFdlaWdodC0tcmVkaGF0Zm9udC0tYm9sZCk7LS1wZi1nbG9iYWwtLWxpbmstLUZvbnRXZWlnaHQ6IHZhcigtLXBmLWdsb2JhbC0tRm9udFdlaWdodC0tbm9ybWFsKX1odG1sLGJvZHkscCxvbCx1bCxsaSxkbCxkdCxkZCxibG9ja3F1b3RlLGZpZ3VyZSxmaWVsZHNldCxsZWdlbmQsdGV4dGFyZWEscHJlLGlmcmFtZSxocixoMSxoMixoMyxoNCxoNSxoNntwYWRkaW5nOjA7bWFyZ2luOjB9aHRtbCxib2R5e2hlaWdodDoxMDAlfWgxLGgyLGgzLGg0LGg1LGg2e2ZvbnQtc2l6ZToxMDAlO2ZvbnQtd2VpZ2h0OnZhcigtLXBmLWdsb2JhbC0tRm9udFdlaWdodC0tbm9ybWFsKX11bHtsaXN0LXN0eWxlOm5vbmV9YnV0dG9uLGlucHV0LG9wdGdyb3VwLHNlbGVjdCx0ZXh0YXJlYXttYXJnaW46MDtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc2l6ZToxMDAlO2xpbmUtaGVpZ2h0OnZhcigtLXBmLWdsb2JhbC0tTGluZUhlaWdodC0tbWQpO2NvbG9yOnZhcigtLXBmLWdsb2JhbC0tQ29sb3ItLTEwMCl9aW1nLGVtYmVkLGlmcmFtZSxvYmplY3QsYXVkaW8sdmlkZW97bWF4LXdpZHRoOjEwMCU7aGVpZ2h0OmF1dG99aWZyYW1le2JvcmRlcjowfXRhYmxle2JvcmRlci1zcGFjaW5nOjA7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlfXRkLHRoe3BhZGRpbmc6MDt0ZXh0LWFsaWduOmxlZnR9KiwqOjpiZWZvcmUsKjo6YWZ0ZXJ7Ym94LXNpemluZzpib3JkZXItYm94fWh0bWx7Zm9udC1mYW1pbHk6c2Fucy1zZXJpZjtsaW5lLWhlaWdodDoxLjE1fWJvZHl7Zm9udC1mYW1pbHk6dmFyKC0tcGYtZ2xvYmFsLS1Gb250RmFtaWx5LS1zYW5zLXNlcmlmKTtmb250LXNpemU6dmFyKC0tcGYtZ2xvYmFsLS1Gb250U2l6ZS0tbWQpO2ZvbnQtd2VpZ2h0OnZhcigtLXBmLWdsb2JhbC0tRm9udFdlaWdodC0tbm9ybWFsKTtsaW5lLWhlaWdodDp2YXIoLS1wZi1nbG9iYWwtLUxpbmVIZWlnaHQtLW1kKTt0ZXh0LWFsaWduOmxlZnQ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1wZi1nbG9iYWwtLUJhY2tncm91bmRDb2xvci0tMTAwKX1he2ZvbnQtd2VpZ2h0OnZhcigtLXBmLWdsb2JhbC0tbGluay0tRm9udFdlaWdodCk7Y29sb3I6dmFyKC0tcGYtZ2xvYmFsLS1saW5rLS1Db2xvcik7dGV4dC1kZWNvcmF0aW9uOnZhcigtLXBmLWdsb2JhbC0tbGluay0tVGV4dERlY29yYXRpb24pfWE6aG92ZXJ7LS1wZi1nbG9iYWwtLWxpbmstLUNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLWxpbmstLUNvbG9yLS1ob3Zlcik7LS1wZi1nbG9iYWwtLWxpbmstLVRleHREZWNvcmF0aW9uOiB2YXIoLS1wZi1nbG9iYWwtLWxpbmstLVRleHREZWNvcmF0aW9uLS1ob3Zlcil9YnV0dG9uLGF7Y3Vyc29yOnBvaW50ZXJ9YnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFt0eXBlPSJidXR0b24iXTo6LW1vei1mb2N1cy1pbm5lcixbdHlwZT0icmVzZXQiXTo6LW1vei1mb2N1cy1pbm5lcixbdHlwZT0ic3VibWl0Il06Oi1tb3otZm9jdXMtaW5uZXJ7cGFkZGluZzowO2JvcmRlci1zdHlsZTpub25lfWJ1dHRvbjotbW96LWZvY3VzcmluZyxbdHlwZT0iYnV0dG9uIl06LW1vei1mb2N1c3JpbmcsW3R5cGU9InJlc2V0Il06LW1vei1mb2N1c3JpbmcsW3R5cGU9InN1Ym1pdCJdOi1tb3otZm9jdXNyaW5ne291dGxpbmU6MXB4IGRvdHRlZCBCdXR0b25UZXh0fS5wZi1jLWxvZ2luey0tcGYtYy1sb2dpbi0tUGFkZGluZ1RvcDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLWxnKTstLXBmLWMtbG9naW4tLVBhZGRpbmdCb3R0b206IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS1sZyk7LS1wZi1jLWxvZ2luLS14bC0tQmFja2dyb3VuZEltYWdlOiBub25lOy0tcGYtYy1sb2dpbl9fY29udGFpbmVyLS14bC0tR3JpZENvbHVtbkdhcDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLTN4bCk7LS1wZi1jLWxvZ2luX19jb250YWluZXItLU1heFdpZHRoOiAzMS4yNXJlbTstLXBmLWMtbG9naW5fX2NvbnRhaW5lci0teGwtLU1heFdpZHRoOiBub25lOy0tcGYtYy1sb2dpbl9fY29udGFpbmVyLS1QYWRkaW5nTGVmdDogNi4xMjVyZW07LS1wZi1jLWxvZ2luX19jb250YWluZXItLVBhZGRpbmdSaWdodDogNi4xMjVyZW07LS1wZi1jLWxvZ2luX19jb250YWluZXItLXhsLS1HcmlkVGVtcGxhdGVDb2x1bW5zOiAzNHJlbSBtaW5tYXgoYXV0bywgMzRyZW0pOy0tcGYtYy1sb2dpbl9faGVhZGVyLS1NYXJnaW5Cb3R0b206IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS1tZCk7LS1wZi1jLWxvZ2luX19oZWFkZXItLXNtLS1QYWRkaW5nTGVmdDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLW1kKTstLXBmLWMtbG9naW5fX2hlYWRlci0tc20tLVBhZGRpbmdSaWdodDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLW1kKTstLXBmLWMtbG9naW5fX2hlYWRlci0teGwtLU1hcmdpbkJvdHRvbTogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLTJ4bCk7LS1wZi1jLWxvZ2luX19oZWFkZXItLXhsLS1NYXJnaW5Ub3A6IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS0zeGwpOy0tcGYtYy1sb2dpbl9faGVhZGVyLS1jLWJyYW5kLS1NYXJnaW5Cb3R0b206IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS1sZyk7LS1wZi1jLWxvZ2luX19oZWFkZXItLWMtYnJhbmQtLXhsLS1NYXJnaW5Cb3R0b206IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS0yeGwpOy0tcGYtYy1sb2dpbl9fbWFpbi0tQmFja2dyb3VuZENvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLUJhY2tncm91bmRDb2xvci0tbGlnaHQtMTAwKTstLXBmLWMtbG9naW5fX21haW4tLXhsLS1NYXJnaW5Cb3R0b206IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS1sZyk7LS1wZi1jLWxvZ2luX19tYWluLWhlYWRlci0tUGFkZGluZ1RvcDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLTJ4bCk7LS1wZi1jLWxvZ2luX19tYWluLWhlYWRlci0tUGFkZGluZ1JpZ2h0OiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0teGwpOy0tcGYtYy1sb2dpbl9fbWFpbi1oZWFkZXItLVBhZGRpbmdCb3R0b206IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS1tZCk7LS1wZi1jLWxvZ2luX19tYWluLWhlYWRlci0tUGFkZGluZ0xlZnQ6IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS14bCk7LS1wZi1jLWxvZ2luX19tYWluLWhlYWRlci0tbWQtLVBhZGRpbmdSaWdodDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLTJ4bCk7LS1wZi1jLWxvZ2luX19tYWluLWhlYWRlci0tbWQtLVBhZGRpbmdMZWZ0OiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tMnhsKTstLXBmLWMtbG9naW5fX21haW4taGVhZGVyLS1Db2x1bW5HYXA6IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS1tZCk7LS1wZi1jLWxvZ2luX19tYWluLWhlYWRlci0tUm93R2FwOiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tbWQpOy0tcGYtYy1sb2dpbl9fbWFpbi1oZWFkZXItZGVzYy0tTWFyZ2luQm90dG9tOiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tc20pOy0tcGYtYy1sb2dpbl9fbWFpbi1oZWFkZXItZGVzYy0tbWQtLU1hcmdpbkJvdHRvbTogMDstLXBmLWMtbG9naW5fX21haW4taGVhZGVyLWRlc2MtLUZvbnRTaXplOiB2YXIoLS1wZi1nbG9iYWwtLUZvbnRTaXplLS1zbSk7LS1wZi1jLWxvZ2luX19tYWluLWJvZHktLVBhZGRpbmdSaWdodDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLXhsKTstLXBmLWMtbG9naW5fX21haW4tYm9keS0tUGFkZGluZ0JvdHRvbTogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLXhsKTstLXBmLWMtbG9naW5fX21haW4tYm9keS0tUGFkZGluZ0xlZnQ6IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS14bCk7LS1wZi1jLWxvZ2luX19tYWluLWJvZHktLW1kLS1QYWRkaW5nUmlnaHQ6IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS0yeGwpOy0tcGYtYy1sb2dpbl9fbWFpbi1ib2R5LS1tZC0tUGFkZGluZ0xlZnQ6IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS0yeGwpOy0tcGYtYy1sb2dpbl9fbWFpbi1ib2R5LS1jLWZvcm1fX2hlbHBlci10ZXh0LWljb24tLUZvbnRTaXplOiB2YXIoLS1wZi1nbG9iYWwtLWljb24tLUZvbnRTaXplLS1tZCk7LS1wZi1jLWxvZ2luX19tYWluLWJvZHktLWMtZm9ybV9faGVscGVyLXRleHQtaWNvbi0tTWFyZ2luUmlnaHQ6IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS1zbSk7LS1wZi1jLWxvZ2luX19tYWluLWZvb3Rlci0tUGFkZGluZ0JvdHRvbTogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLTN4bCk7LS1wZi1jLWxvZ2luX19tYWluLWZvb3Rlci0tYy10aXRsZS0tTWFyZ2luQm90dG9tOiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tbWQpOy0tcGYtYy1sb2dpbl9fbWFpbi1mb290ZXItbGlua3MtLVBhZGRpbmdUb3A6IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS1zbSk7LS1wZi1jLWxvZ2luX19tYWluLWZvb3Rlci1saW5rcy0tUGFkZGluZ1JpZ2h0OiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tM3hsKTstLXBmLWMtbG9naW5fX21haW4tZm9vdGVyLWxpbmtzLS1QYWRkaW5nQm90dG9tOiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0teGwpOy0tcGYtYy1sb2dpbl9fbWFpbi1mb290ZXItbGlua3MtLVBhZGRpbmdMZWZ0OiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tM3hsKTstLXBmLWMtbG9naW5fX21haW4tZm9vdGVyLWxpbmtzLWl0ZW0tLVBhZGRpbmdSaWdodDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLW1kKTstLXBmLWMtbG9naW5fX21haW4tZm9vdGVyLWxpbmtzLWl0ZW0tLVBhZGRpbmdMZWZ0OiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tbWQpOy0tcGYtYy1sb2dpbl9fbWFpbi1mb290ZXItbGlua3MtaXRlbS0tTWFyZ2luQm90dG9tOiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tc20pOy0tcGYtYy1sb2dpbl9fbWFpbi1mb290ZXItbGlua3MtaXRlbS1saW5rLXN2Zy0tRmlsbDogdmFyKC0tcGYtZ2xvYmFsLS1pY29uLS1Db2xvci0tbGlnaHQpOy0tcGYtYy1sb2dpbl9fbWFpbi1mb290ZXItbGlua3MtaXRlbS1saW5rLXN2Zy0tV2lkdGg6IHZhcigtLXBmLWdsb2JhbC0taWNvbi0tRm9udFNpemUtLWxnKTstLXBmLWMtbG9naW5fX21haW4tZm9vdGVyLWxpbmtzLWl0ZW0tbGluay1zdmctLUhlaWdodDogdmFyKC0tcGYtZ2xvYmFsLS1pY29uLS1Gb250U2l6ZS0tbGcpOy0tcGYtYy1sb2dpbl9fbWFpbi1mb290ZXItbGlua3MtaXRlbS1saW5rLXN2Zy0taG92ZXItLUZpbGw6IHZhcigtLXBmLWdsb2JhbC0taWNvbi0tQ29sb3ItLWRhcmspOy0tcGYtYy1sb2dpbl9fbWFpbi1mb290ZXItYmFuZC0tUGFkZGluZ1RvcDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLWxnKTstLXBmLWMtbG9naW5fX21haW4tZm9vdGVyLWJhbmQtLVBhZGRpbmdSaWdodDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLW1kKTstLXBmLWMtbG9naW5fX21haW4tZm9vdGVyLWJhbmQtLVBhZGRpbmdCb3R0b206IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS1sZyk7LS1wZi1jLWxvZ2luX19tYWluLWZvb3Rlci1iYW5kLS1QYWRkaW5nTGVmdDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLW1kKTstLXBmLWMtbG9naW5fX21haW4tZm9vdGVyLWJhbmQtLUJhY2tncm91bmRDb2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1CYWNrZ3JvdW5kQ29sb3ItLTMwMCk7LS1wZi1jLWxvZ2luX19tYWluLWZvb3Rlci1iYW5kLWl0ZW0tLVBhZGRpbmdUb3A6IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS1tZCk7LS1wZi1jLWxvZ2luX19mb290ZXItLXNtLS1QYWRkaW5nTGVmdDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLW1kKTstLXBmLWMtbG9naW5fX2Zvb3Rlci0tc20tLVBhZGRpbmdSaWdodDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLW1kKTstLXBmLWMtbG9naW5fX2Zvb3Rlci0tYy1saXN0LS1QYWRkaW5nVG9wOiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tbWQpOy0tcGYtYy1sb2dpbl9fZm9vdGVyLS1jLWxpc3QtLXhsLS1QYWRkaW5nVG9wOiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tMnhsKTtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjttaW4taGVpZ2h0OjEwMHZoO3BhZGRpbmctdG9wOnZhcigtLXBmLWMtbG9naW4tLVBhZGRpbmdUb3ApO3BhZGRpbmctYm90dG9tOnZhcigtLXBmLWMtbG9naW4tLVBhZGRpbmdCb3R0b20pfUBtZWRpYSAobWluLXdpZHRoOiAxMjAwcHgpey5wZi1jLWxvZ2luey0tcGYtYy1sb2dpbl9fY29udGFpbmVyLS1NYXhXaWR0aDogdmFyKC0tcGYtYy1sb2dpbl9fY29udGFpbmVyLS14bC0tTWF4V2lkdGgpfX1AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KXsucGYtYy1sb2dpbnstLXBmLWMtbG9naW5fX2hlYWRlci0tTWFyZ2luQm90dG9tOiB2YXIoLS1wZi1jLWxvZ2luX19oZWFkZXItLXhsLS1NYXJnaW5Cb3R0b20pOy0tcGYtYy1sb2dpbl9faGVhZGVyLS1jLWJyYW5kLS1NYXJnaW5Cb3R0b206IHZhcigtLXBmLWMtbG9naW5fX2hlYWRlci0tYy1icmFuZC0teGwtLU1hcmdpbkJvdHRvbSl9fUBtZWRpYSAobWluLXdpZHRoOiA3NjhweCl7LnBmLWMtbG9naW57LS1wZi1jLWxvZ2luX19tYWluLWhlYWRlci0tUGFkZGluZ1JpZ2h0OiB2YXIoLS1wZi1jLWxvZ2luX19tYWluLWhlYWRlci0tbWQtLVBhZGRpbmdSaWdodCk7LS1wZi1jLWxvZ2luX19tYWluLWhlYWRlci0tUGFkZGluZ0xlZnQ6IHZhcigtLXBmLWMtbG9naW5fX21haW4taGVhZGVyLS1tZC0tUGFkZGluZ0xlZnQpOy0tcGYtYy1sb2dpbl9fbWFpbi1oZWFkZXItZGVzYy0tTWFyZ2luQm90dG9tOiB2YXIoLS1wZi1jLWxvZ2luX19tYWluLWhlYWRlci1kZXNjLS1tZC0tTWFyZ2luQm90dG9tKX19QG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KXsucGYtYy1sb2dpbnstLXBmLWMtbG9naW5fX21haW4tYm9keS0tUGFkZGluZ1JpZ2h0OiB2YXIoLS1wZi1jLWxvZ2luX19tYWluLWJvZHktLW1kLS1QYWRkaW5nUmlnaHQpOy0tcGYtYy1sb2dpbl9fbWFpbi1ib2R5LS1QYWRkaW5nTGVmdDogdmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1ib2R5LS1tZC0tUGFkZGluZ0xlZnQpfX1AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KXsucGYtYy1sb2dpbnstLXBmLWMtbG9naW5fX2Zvb3Rlci0tYy1saXN0LS1QYWRkaW5nVG9wOiB2YXIoLS1wZi1jLWxvZ2luX19mb290ZXItLWMtbGlzdC0teGwtLVBhZGRpbmdUb3ApfX1AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KXsucGYtYy1sb2dpbntiYWNrZ3JvdW5kLWltYWdlOnZhcigtLXBmLWMtbG9naW4tLXhsLS1CYWNrZ3JvdW5kSW1hZ2UpfX1AbWVkaWEgKG1pbi13aWR0aDogNTc2cHgpey5wZi1jLWxvZ2lue2FsaWduLWl0ZW1zOmNlbnRlcn19LnBmLWMtbG9naW5fX2NvbnRhaW5lcnttYXgtd2lkdGg6dmFyKC0tcGYtYy1sb2dpbl9fY29udGFpbmVyLS1NYXhXaWR0aCl9QG1lZGlhIChtaW4td2lkdGg6IDEyMDBweCl7LnBmLWMtbG9naW5fX2NvbnRhaW5lcntkaXNwbGF5OmdyaWQ7Z3JpZC1jb2x1bW4tZ2FwOnZhcigtLXBmLWMtbG9naW5fX2NvbnRhaW5lci0teGwtLUdyaWRDb2x1bW5HYXApO2dyaWQtdGVtcGxhdGUtY29sdW1uczp2YXIoLS1wZi1jLWxvZ2luX19jb250YWluZXItLXhsLS1HcmlkVGVtcGxhdGVDb2x1bW5zKTtncmlkLXRlbXBsYXRlLWFyZWFzOiJtYWluIGhlYWRlciIgIm1haW4gZm9vdGVyIiAibWFpbiAuIjtwYWRkaW5nLXJpZ2h0OnZhcigtLXBmLWMtbG9naW5fX2NvbnRhaW5lci0tUGFkZGluZ1JpZ2h0KTtwYWRkaW5nLWxlZnQ6dmFyKC0tcGYtYy1sb2dpbl9fY29udGFpbmVyLS1QYWRkaW5nTGVmdCl9fS5wZi1jLWxvZ2luX19oZWFkZXJ7Y29sb3I6dmFyKC0tcGYtZ2xvYmFsLS1Db2xvci0tMTAwKTtncmlkLWFyZWE6aGVhZGVyfUBtZWRpYSAobWF4LXdpZHRoOiA1NzZweCl7LnBmLWMtbG9naW5fX2hlYWRlcntwYWRkaW5nLXJpZ2h0OnZhcigtLXBmLWMtbG9naW5fX2hlYWRlci0tc20tLVBhZGRpbmdSaWdodCk7cGFkZGluZy1sZWZ0OnZhcigtLXBmLWMtbG9naW5fX2hlYWRlci0tc20tLVBhZGRpbmdMZWZ0KX19QG1lZGlhIChtaW4td2lkdGg6IDEyMDBweCl7LnBmLWMtbG9naW5fX2hlYWRlcnttYXJnaW4tdG9wOnZhcigtLXBmLWMtbG9naW5fX2hlYWRlci0teGwtLU1hcmdpblRvcCl9fS5wZi1jLWxvZ2luX19oZWFkZXIgLnBmLWMtYnJhbmR7bWFyZ2luLWJvdHRvbTp2YXIoLS1wZi1jLWxvZ2luX19oZWFkZXItLWMtYnJhbmQtLU1hcmdpbkJvdHRvbSl9LnBmLWMtbG9naW5fX21haW57Z3JpZC1hcmVhOm1haW47YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1wZi1jLWxvZ2luX19tYWluLS1CYWNrZ3JvdW5kQ29sb3IpfS5wZi1jLWxvZ2luX19tYWluPjpmaXJzdC1jaGlsZDpub3QoLnBmLWMtbG9naW5fX21haW4taGVhZGVyKXtwYWRkaW5nLXRvcDp2YXIoLS1wZi1jLWxvZ2luX19tYWluLWhlYWRlci0tUGFkZGluZ1RvcCl9LnBmLWMtbG9naW5fX21haW4+Omxhc3QtY2hpbGQ6bm90KC5wZi1jLWxvZ2luX19tYWluLWZvb3Rlcil7cGFkZGluZy1ib3R0b206dmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1mb290ZXItLVBhZGRpbmdCb3R0b20pfUBtZWRpYSAobWF4LXdpZHRoOiAxMjAwcHgpey5wZi1jLWxvZ2luX19tYWlue21hcmdpbi1ib3R0b206dmFyKC0tcGYtYy1sb2dpbl9fbWFpbi0teGwtLU1hcmdpbkJvdHRvbSl9fS5wZi1jLWxvZ2luX19tYWluLWhlYWRlcntkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOjFmciBhdXRvO2NvbHVtbi1nYXA6dmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1oZWFkZXItLUNvbHVtbkdhcCk7cm93LWdhcDp2YXIoLS1wZi1jLWxvZ2luX19tYWluLWhlYWRlci0tUm93R2FwKTthbGlnbi1pdGVtczpjZW50ZXI7cGFkZGluZzp2YXIoLS1wZi1jLWxvZ2luX19tYWluLWhlYWRlci0tUGFkZGluZ1RvcCkgdmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1oZWFkZXItLVBhZGRpbmdSaWdodCkgdmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1oZWFkZXItLVBhZGRpbmdCb3R0b20pIHZhcigtLXBmLWMtbG9naW5fX21haW4taGVhZGVyLS1QYWRkaW5nTGVmdCl9QG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KXsucGYtYy1sb2dpbl9fbWFpbi1oZWFkZXJ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOjEwMCV9fS5wZi1jLWxvZ2luX19tYWluLWhlYWRlciAucGYtYy1kcm9wZG93bntncmlkLWNvbHVtbjoyIC8gMztncmlkLXJvdzoxfUBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCl7LnBmLWMtbG9naW5fX21haW4taGVhZGVyIC5wZi1jLWRyb3Bkb3due2dyaWQtY29sdW1uOmF1dG87Z3JpZC1yb3c6YXV0b319LnBmLWMtbG9naW5fX21haW4taGVhZGVyLWRlc2N7bWFyZ2luLWJvdHRvbTp2YXIoLS1wZi1jLWxvZ2luX19tYWluLWhlYWRlci1kZXNjLS1NYXJnaW5Cb3R0b20pO2ZvbnQtc2l6ZTp2YXIoLS1wZi1jLWxvZ2luX19tYWluLWhlYWRlci1kZXNjLS1Gb250U2l6ZSk7Z3JpZC1jb2x1bW46MSAvIC0xfS5wZi1jLWxvZ2luX19tYWluLWJvZHl7cGFkZGluZy1yaWdodDp2YXIoLS1wZi1jLWxvZ2luX19tYWluLWJvZHktLVBhZGRpbmdSaWdodCk7cGFkZGluZy1ib3R0b206dmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1ib2R5LS1QYWRkaW5nQm90dG9tKTtwYWRkaW5nLWxlZnQ6dmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1ib2R5LS1QYWRkaW5nTGVmdCl9LnBmLWMtbG9naW5fX21haW4tYm9keSAucGYtYy1mb3JtX19oZWxwZXItdGV4dHtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyfS5wZi1jLWxvZ2luX19tYWluLWJvZHkgLnBmLWMtZm9ybV9faGVscGVyLXRleHQgLnBmLWMtZm9ybV9faGVscGVyLXRleHQtaWNvbnttYXJnaW4tcmlnaHQ6dmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1ib2R5LS1jLWZvcm1fX2hlbHBlci10ZXh0LWljb24tLU1hcmdpblJpZ2h0KTtmb250LXNpemU6dmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1ib2R5LS1jLWZvcm1fX2hlbHBlci10ZXh0LWljb24tLUZvbnRTaXplKX0ucGYtYy1sb2dpbl9fbWFpbi1mb290ZXJ7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwfS5wZi1jLWxvZ2luX19tYWluLWZvb3RlciAucGYtYy10aXRsZXttYXJnaW4tYm90dG9tOnZhcigtLXBmLWMtbG9naW5fX21haW4tZm9vdGVyLS1jLXRpdGxlLS1NYXJnaW5Cb3R0b20pO3RleHQtYWxpZ246Y2VudGVyfS5wZi1jLWxvZ2luX19tYWluLWZvb3Rlcj4qe2ZsZXgtYmFzaXM6MTAwJX0ucGYtYy1sb2dpbl9fbWFpbi1mb290ZXItbGlua3N7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2p1c3RpZnktY29udGVudDpjZW50ZXI7cGFkZGluZzp2YXIoLS1wZi1jLWxvZ2luX19tYWluLWZvb3Rlci1saW5rcy0tUGFkZGluZ1RvcCkgdmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1mb290ZXItbGlua3MtLVBhZGRpbmdSaWdodCkgdmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1mb290ZXItbGlua3MtLVBhZGRpbmdCb3R0b20pIHZhcigtLXBmLWMtbG9naW5fX21haW4tZm9vdGVyLWxpbmtzLS1QYWRkaW5nTGVmdCl9LnBmLWMtbG9naW5fX21haW4tZm9vdGVyLWxpbmtzLWl0ZW17cGFkZGluZy1yaWdodDp2YXIoLS1wZi1jLWxvZ2luX19tYWluLWZvb3Rlci1saW5rcy1pdGVtLS1QYWRkaW5nUmlnaHQpO3BhZGRpbmctbGVmdDp2YXIoLS1wZi1jLWxvZ2luX19tYWluLWZvb3Rlci1saW5rcy1pdGVtLS1QYWRkaW5nTGVmdCk7bWFyZ2luLWJvdHRvbTp2YXIoLS1wZi1jLWxvZ2luX19tYWluLWZvb3Rlci1saW5rcy1pdGVtLS1NYXJnaW5Cb3R0b20pfS5wZi1jLWxvZ2luX19tYWluLWZvb3Rlci1saW5rcy1pdGVtLWxpbmsgc3Zne2ZpbGw6dmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1mb290ZXItbGlua3MtaXRlbS1saW5rLXN2Zy0tRmlsbCk7d2lkdGg6MTAwJTttYXgtd2lkdGg6dmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1mb290ZXItbGlua3MtaXRlbS1saW5rLXN2Zy0tV2lkdGgpO2hlaWdodDoxMDAlO21heC1oZWlnaHQ6dmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1mb290ZXItbGlua3MtaXRlbS1saW5rLXN2Zy0tSGVpZ2h0KX0ucGYtYy1sb2dpbl9fbWFpbi1mb290ZXItbGlua3MtaXRlbS1saW5rOmhvdmVyIHN2Z3tmaWxsOnZhcigtLXBmLWMtbG9naW5fX21haW4tZm9vdGVyLWxpbmtzLWl0ZW0tbGluay1zdmctLWhvdmVyLS1GaWxsKX0ucGYtYy1sb2dpbl9fbWFpbi1mb290ZXItYmFuZHtwYWRkaW5nOnZhcigtLXBmLWMtbG9naW5fX21haW4tZm9vdGVyLWJhbmQtLVBhZGRpbmdUb3ApIHZhcigtLXBmLWMtbG9naW5fX21haW4tZm9vdGVyLWJhbmQtLVBhZGRpbmdSaWdodCkgdmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1mb290ZXItYmFuZC0tUGFkZGluZ0JvdHRvbSkgdmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1mb290ZXItYmFuZC0tUGFkZGluZ0xlZnQpO3RleHQtYWxpZ246Y2VudGVyO2JhY2tncm91bmQtY29sb3I6dmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1mb290ZXItYmFuZC0tQmFja2dyb3VuZENvbG9yKX0ucGYtYy1sb2dpbl9fbWFpbi1mb290ZXItYmFuZD4qKyp7cGFkZGluZy10b3A6dmFyKC0tcGYtYy1sb2dpbl9fbWFpbi1mb290ZXItYmFuZC1pdGVtLS1QYWRkaW5nVG9wKX0ucGYtYy1sb2dpbl9fZm9vdGVye2NvbG9yOnZhcigtLXBmLWdsb2JhbC0tQ29sb3ItLTEwMCk7Z3JpZC1hcmVhOmZvb3Rlcn1AbWVkaWEgKG1heC13aWR0aDogNTc2cHgpey5wZi1jLWxvZ2luX19mb290ZXJ7cGFkZGluZy1yaWdodDp2YXIoLS1wZi1jLWxvZ2luX19mb290ZXItLXNtLS1QYWRkaW5nUmlnaHQpO3BhZGRpbmctbGVmdDp2YXIoLS1wZi1jLWxvZ2luX19mb290ZXItLXNtLS1QYWRkaW5nTGVmdCl9fS5wZi1jLWxvZ2luX19mb290ZXIgLnBmLWMtbGlzdCBhe2NvbG9yOnVuc2V0fS5wZi1jLWxvZ2luX19mb290ZXIgLnBmLWMtbGlzdDpub3QoOm9ubHktY2hpbGQpe3BhZGRpbmctdG9wOnZhcigtLXBmLWMtbG9naW5fX2Zvb3Rlci0tYy1saXN0LS1QYWRkaW5nVG9wKX1ib2R5e2JhY2tncm91bmQtY29sb3I6dmFyKC0tcGYtZ2xvYmFsLS1CYWNrZ3JvdW5kQ29sb3ItLWRhcmstMTAwKTtiYWNrZ3JvdW5kLWltYWdlOnVybChkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBEOTRiV3dnZG1WeWMybHZiajBpTVM0d0lpQmxibU52WkdsdVp6MGlkWFJtTFRnaVB6NEtQQ0V0TFNCSFpXNWxjbUYwYjNJNklFRmtiMkpsSUVsc2JIVnpkSEpoZEc5eUlESTBMakF1TWl3Z1UxWkhJRVY0Y0c5eWRDQlFiSFZuTFVsdUlDNGdVMVpISUZabGNuTnBiMjQ2SURZdU1EQWdRblZwYkdRZ01Da2dJQzB0UGdvOGMzWm5JSFpsY25OcGIyNDlJakV1TVNJZ2FXUTlJa3hoZVdWeVh6RWlJSGh0Ykc1elBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHlNREF3TDNOMlp5SWdlRzFzYm5NNmVHeHBibXM5SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpFNU9Ua3ZlR3hwYm1zaUlIZzlJakJ3ZUNJZ2VUMGlNSEI0SWdvSklIZHBaSFJvUFNJeE9USndlQ0lnYUdWcFoyaDBQU0l4TkRWd2VDSWdkbWxsZDBKdmVEMGlNQ0F3SURFNU1pQXhORFVpSUhOMGVXeGxQU0psYm1GaWJHVXRZbUZqYTJkeWIzVnVaRHB1WlhjZ01DQXdJREU1TWlBeE5EVTdJaUI0Yld3NmMzQmhZMlU5SW5CeVpYTmxjblpsSWo0S1BITjBlV3hsSUhSNWNHVTlJblJsZUhRdlkzTnpJajRLQ1M1emREQjdabWxzYkRvak1ESXdNekF6TzMwS1BDOXpkSGxzWlQ0S1BHYytDZ2s4Y0dGMGFDQmpiR0Z6Y3owaWMzUXdJaUJrUFNKTk1USTNMalVzT0RNdU5XTXhNaTQxTERBc016QXVOaTB5TGpZc016QXVOaTB4Tnk0MVl6QXRNUzR5TERBdE1pNHpMVEF1TXkwekxqUnNMVGN1TkMwek1pNDBZeTB4TGpjdE55NHhMVE11TWkweE1DNHpMVEUxTGpjdE1UWXVOZ29KQ1dNdE9TNDNMVFV0TXpBdU9DMHhNeTR4TFRNM0xqRXRNVE11TVVNNU1TNDNMREF1TlN3NU1DdzRMRGd6TGpFc09HTXROaTQzTERBdE1URXVOaTAxTGpZdE1UY3VPUzAxTGpaakxUWXNNQzA1TGprc05DNHhMVEV5TGprc01USXVOV013TERBdE9DNDBMREl6TGpjdE9TNDFMREkzTGpJS0NRbGpMVEF1TWl3d0xqWXRNQzR5TERFdU5DMHdMaklzTVM0NVF6UXlMalVzTlRNdU15dzNPQzQ0TERnekxqVXNNVEkzTGpVc09ETXVOU0JOTVRZd0xEY3lMakZqTVM0M0xEZ3VNaXd4TGpjc09TNHhMREV1Tnl3eE1DNHhZekFzTVRRdE1UVXVOeXd5TVM0NExUTTJMalFzTWpFdU9Bb0pDV010TkRZdU9Dd3dMVGczTGpjdE1qY3VOQzA0Tnk0M0xUUTFMalZqTUMweUxqZ3NNQzQyTFRVdU5Dd3hMalV0Tnk0elF6SXlMak1zTlRJc01DNDFMRFUxTERBdU5TdzNOQzR5WXpBc016RXVOU3czTkM0MkxEY3dMak1zTVRNekxqY3NOekF1TXdvSkNXTTBOUzR6TERBc05UWXVOeTB5TUM0MUxEVTJMamN0TXpZdU5rTXhPVEF1T0N3NU5TNHhMREUzT1M0NUxEZ3dMamNzTVRZd0xEY3lMakVpTHo0S1BDOW5QZ284TDNOMlp6NEspO2JhY2tncm91bmQtcG9zaXRpb246MTEwJSAxMDUlO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtiYWNrZ3JvdW5kLXNpemU6OTAlfUBtZWRpYSAobWluLXdpZHRoOiA3NjhweCl7Ym9keXtiYWNrZ3JvdW5kLXNpemU6ODAlfX1AbWVkaWEgKG1pbi13aWR0aDogMTAwMHB4KXtib2R5e2JhY2tncm91bmQtcG9zaXRpb246MTEwJSAxMDAlO2JhY2tncm91bmQtc2l6ZTo3MCV9fUBtZWRpYSAobWluLXdpZHRoOiAxMjAwcHgpe2JvZHl7YmFja2dyb3VuZC1wb3NpdGlvbjoxMDAlIDcwJTtiYWNrZ3JvdW5kLXNpemU6NzAlfX1AbWVkaWEgKG1pbi13aWR0aDogMTQwMHB4KXtib2R5e2JhY2tncm91bmQtc2l6ZTo3NSV9fUBtZWRpYSAobWluLXdpZHRoOiAxODAwcHgpe2JvZHl7YmFja2dyb3VuZC1zaXplOjcwJX19QG1lZGlhIChtaW4td2lkdGg6IDE4MDBweCl7Ym9keXtiYWNrZ3JvdW5kLXBvc2l0aW9uOjc1JSA4MCU7YmFja2dyb3VuZC1zaXplOjYwJX19QG1lZGlhIChtaW4td2lkdGg6IDIyMDBweCl7Ym9keXtiYWNrZ3JvdW5kLXNpemU6NTAlfX1AbWVkaWEgKG1heC13aWR0aDogMTE5OXB4KXsucGYtYy1sb2dpbl9fY29udGFpbmVye3dpZHRoOjEwMCV9fS5wZi1jLWxvZ2luX19tYWluLWJvZHl7cGFkZGluZy1ib3R0b206dmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLTJ4bCkgIWltcG9ydGFudH1AbWVkaWEgKG1pbi13aWR0aDogMTIwMHB4KXsucGYtYy1icmFuZHtoZWlnaHQ6NjBweH19LnBmLWMtZm9ybXstLXBmLWMtZm9ybS0tR3JpZEdhcDogdmFyKC0tcGYtZ2xvYmFsLS1ndXR0ZXIpOy0tcGYtYy1mb3JtX19sYWJlbC0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tQ29sb3ItLTEwMCk7LS1wZi1jLWZvcm1fX2xhYmVsLS1Gb250V2VpZ2h0OiB2YXIoLS1wZi1nbG9iYWwtLUZvbnRXZWlnaHQtLW5vcm1hbCk7LS1wZi1jLWZvcm1fX2xhYmVsLS1Gb250U2l6ZTogdmFyKC0tcGYtZ2xvYmFsLS1Gb250U2l6ZS0tc20pOy0tcGYtYy1mb3JtX19sYWJlbC0tTGluZUhlaWdodDogdmFyKC0tcGYtZ2xvYmFsLS1MaW5lSGVpZ2h0LS1zbSk7LS1wZi1jLWZvcm1fX2xhYmVsLS1QYWRkaW5nVG9wOiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tc20pOy0tcGYtYy1mb3JtX19sYWJlbC0tUGFkZGluZ0JvdHRvbTogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLXNtKTstLXBmLWMtZm9ybV9fbGFiZWwtLW0tZGlzYWJsZWQtLUNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLWRpc2FibGVkLWNvbG9yLS0xMDApOy0tcGYtYy1mb3JtX19sYWJlbC10ZXh0LS1Gb250V2VpZ2h0OiB2YXIoLS1wZi1nbG9iYWwtLUZvbnRXZWlnaHQtLWJvbGQpOy0tcGYtYy1mb3JtX19sYWJlbC1yZXF1aXJlZC0tTWFyZ2luTGVmdDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLXhzKTstLXBmLWMtZm9ybV9fbGFiZWwtcmVxdWlyZWQtLUZvbnRTaXplOiB2YXIoLS1wZi1nbG9iYWwtLUZvbnRTaXplLS1zbSk7LS1wZi1jLWZvcm1fX2xhYmVsLXJlcXVpcmVkLS1Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1kYW5nZXItY29sb3ItLTEwMCk7LS1wZi1jLWZvcm1fX2dyb3VwLS1NYXJnaW5MZWZ0OiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tc20pOy0tcGYtYy1mb3JtLS1tLWhvcml6b250YWwtLW1kX19ncm91cC0tR3JpZFRlbXBsYXRlQ29sdW1uczogMTUwcHggMWZyOy0tcGYtYy1mb3JtX19ncm91cC0tbS1hY3Rpb24tLU1hcmdpblRvcDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLXhsKTstLXBmLWMtZm9ybV9fYWN0aW9ucy0tY2hpbGQtLU1hcmdpblRvcDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLXNtKTstLXBmLWMtZm9ybV9fYWN0aW9ucy0tY2hpbGQtLU1hcmdpblJpZ2h0OiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tc20pOy0tcGYtYy1mb3JtX19hY3Rpb25zLS1jaGlsZC0tTWFyZ2luQm90dG9tOiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tc20pOy0tcGYtYy1mb3JtX19hY3Rpb25zLS1jaGlsZC0tTWFyZ2luTGVmdDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLXNtKTstLXBmLWMtZm9ybV9fYWN0aW9ucy0tTWFyZ2luVG9wOiBjYWxjKHZhcigtLXBmLWMtZm9ybV9fYWN0aW9ucy0tY2hpbGQtLU1hcmdpblRvcCkgKiAtMSk7LS1wZi1jLWZvcm1fX2FjdGlvbnMtLU1hcmdpblJpZ2h0OiBjYWxjKHZhcigtLXBmLWMtZm9ybV9fYWN0aW9ucy0tY2hpbGQtLU1hcmdpblJpZ2h0KSAqIC0xKTstLXBmLWMtZm9ybV9fYWN0aW9ucy0tTWFyZ2luQm90dG9tOiBjYWxjKHZhcigtLXBmLWMtZm9ybV9fYWN0aW9ucy0tY2hpbGQtLU1hcmdpbkJvdHRvbSkgKiAtMSk7LS1wZi1jLWZvcm1fX2FjdGlvbnMtLU1hcmdpbkxlZnQ6IGNhbGModmFyKC0tcGYtYy1mb3JtX19hY3Rpb25zLS1jaGlsZC0tTWFyZ2luTGVmdCkgKiAtMSk7LS1wZi1jLWZvcm1fX2hlbHBlci10ZXh0LS1NYXJnaW5Ub3A6IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS14cyk7LS1wZi1jLWZvcm1fX2hlbHBlci10ZXh0LS1Gb250U2l6ZTogdmFyKC0tcGYtZ2xvYmFsLS1Gb250U2l6ZS0tc20pOy0tcGYtYy1mb3JtX19oZWxwZXItdGV4dC0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tQ29sb3ItLTEwMCk7LS1wZi1jLWZvcm0tLW0taW5saW5lLS1NYXJnaW5SaWdodDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLWxnKTstLXBmLWMtZm9ybS0tbS1lcnJvci0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tZGFuZ2VyLWNvbG9yLS0xMDApOy0tcGYtYy1mb3JtLS1tLXN1Y2Nlc3MtLUNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLXN1Y2Nlc3MtY29sb3ItLTIwMCk7ZGlzcGxheTpncmlkO2dyaWQtZ2FwOnZhcigtLXBmLWMtZm9ybS0tR3JpZEdhcCl9LnBmLWMtZm9ybS5wZi1tLWhvcml6b250YWwucGYtbS1hbGlnbi1yaWdodCAucGYtYy1mb3JtX19sYWJlbHt0ZXh0LWFsaWduOnJpZ2h0fS5wZi1jLWZvcm0ucGYtbS1ob3Jpem9udGFsIC5wZi1jLWZvcm1fX2dyb3Vwe2Rpc3BsYXk6Z3JpZDtncmlkLWNvbHVtbi1nYXA6dmFyKC0tcGYtYy1mb3JtLS1HcmlkR2FwKX0ucGYtYy1mb3JtLnBmLW0taG9yaXpvbnRhbCAucGYtYy1mb3JtX19ncm91cCAucGYtYy1mb3JtLWNvbnRyb2x7YWxpZ24tc2VsZjpzdGFydH1AbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpey5wZi1jLWZvcm0ucGYtbS1ob3Jpem9udGFsIC5wZi1jLWZvcm1fX2dyb3Vwe2dyaWQtdGVtcGxhdGUtY29sdW1uczp2YXIoLS1wZi1jLWZvcm0tLW0taG9yaXpvbnRhbC0tbWRfX2dyb3VwLS1HcmlkVGVtcGxhdGVDb2x1bW5zKX0ucGYtYy1mb3JtLnBmLW0taG9yaXpvbnRhbCAucGYtYy1mb3JtX19ncm91cCAucGYtYy1mb3JtX19sYWJlbHtwYWRkaW5nLXRvcDp2YXIoLS1wZi1jLWZvcm1fX2xhYmVsLS1QYWRkaW5nVG9wKTtwYWRkaW5nLWJvdHRvbTowfS5wZi1jLWZvcm0ucGYtbS1ob3Jpem9udGFsIC5wZi1jLWZvcm1fX2dyb3VwIC5wZi1jLWZvcm1fX2xhYmVsLnBmLW0tbm8tcGFkZGluZy10b3B7LS1wZi1jLWZvcm1fX2xhYmVsLS1QYWRkaW5nVG9wOiAwfS5wZi1jLWZvcm0ucGYtbS1ob3Jpem9udGFsIC5wZi1jLWZvcm0tY29udHJvbCwucGYtYy1mb3JtLnBmLW0taG9yaXpvbnRhbCAucGYtYy1mb3JtX19ob3Jpem9udGFsLWdyb3VwLC5wZi1jLWZvcm0ucGYtbS1ob3Jpem9udGFsIC5wZi1jLWZvcm1fX2hlbHBlci10ZXh0LC5wZi1jLWZvcm0ucGYtbS1ob3Jpem9udGFsIC5wZi1jLWNoZWNre2dyaWQtY29sdW1uLXN0YXJ0OjJ9fS5wZi1jLWZvcm1fX2dyb3VwLnBmLW0tYWN0aW9ue21hcmdpbi10b3A6dmFyKC0tcGYtYy1mb3JtX19ncm91cC0tbS1hY3Rpb24tLU1hcmdpblRvcCl9LnBmLWMtZm9ybV9fZ3JvdXAucGYtbS1pbmxpbmV7ZGlzcGxheTpmbGV4O2ZsZXgtZmxvdzpyb3cgd3JhcH0ucGYtYy1mb3JtX19ncm91cC5wZi1tLWlubGluZSAucGYtYy1mb3JtX19sYWJlbHtmbGV4LWJhc2lzOjEwMCV9LnBmLWMtZm9ybV9fZ3JvdXAucGYtbS1pbmxpbmU+Kjpub3QoLnBmLWMtZm9ybV9fbGFiZWwpe2ZsZXg6YXV0byAwO21hcmdpbi1yaWdodDp2YXIoLS1wZi1jLWZvcm0tLW0taW5saW5lLS1NYXJnaW5SaWdodCl9LnBmLWMtZm9ybV9fZ3JvdXAgLnBmLWMtZm9ybV9fbGFiZWx7cGFkZGluZy1ib3R0b206dmFyKC0tcGYtYy1mb3JtX19sYWJlbC0tUGFkZGluZ0JvdHRvbSl9LnBmLWMtZm9ybV9fZ3JvdXAgLnBmLWMtZm9ybV9faGVscGVyLXRleHR7bWFyZ2luLXRvcDp2YXIoLS1wZi1jLWZvcm1fX2hlbHBlci10ZXh0LS1NYXJnaW5Ub3ApfS5wZi1jLWZvcm1fX2xhYmVse2Rpc3BsYXk6aW5saW5lLWJsb2NrO2ZvbnQtc2l6ZTp2YXIoLS1wZi1jLWZvcm1fX2xhYmVsLS1Gb250U2l6ZSk7Zm9udC13ZWlnaHQ6dmFyKC0tcGYtYy1mb3JtX19sYWJlbC0tRm9udFdlaWdodCk7bGluZS1oZWlnaHQ6dmFyKC0tcGYtYy1mb3JtX19sYWJlbC0tTGluZUhlaWdodCk7Y29sb3I6dmFyKC0tcGYtYy1mb3JtX19sYWJlbC0tQ29sb3IpfS5wZi1jLWZvcm1fX2xhYmVsOjpzZWxlY3Rpb257YmFja2dyb3VuZC1jb2xvcjpub25lfS5wZi1jLWZvcm1fX2xhYmVsOm5vdCgucGYtbS1kaXNhYmxlZCk6aG92ZXJ7Y3Vyc29yOnBvaW50ZXJ9LnBmLWMtZm9ybV9fbGFiZWwucGYtbS1kaXNhYmxlZHstLXBmLWMtZm9ybV9fbGFiZWwtLUNvbG9yOiB2YXIoLS1wZi1jLWZvcm1fX2xhYmVsLS1tLWRpc2FibGVkLS1Db2xvcil9LnBmLWMtZm9ybV9fbGFiZWwucGYtbS1kaXNhYmxlZDpob3ZlcntjdXJzb3I6bm90LWFsbG93ZWR9LnBmLWMtZm9ybV9fbGFiZWwtdGV4dHtmb250LXdlaWdodDp2YXIoLS1wZi1jLWZvcm1fX2xhYmVsLXRleHQtLUZvbnRXZWlnaHQpfS5wZi1jLWZvcm1fX2xhYmVsLXJlcXVpcmVke21hcmdpbi1sZWZ0OnZhcigtLXBmLWMtZm9ybV9fbGFiZWwtcmVxdWlyZWQtLU1hcmdpbkxlZnQpO2ZvbnQtc2l6ZTp2YXIoLS1wZi1jLWZvcm1fX2xhYmVsLXJlcXVpcmVkLS1Gb250U2l6ZSk7Y29sb3I6dmFyKC0tcGYtYy1mb3JtX19sYWJlbC1yZXF1aXJlZC0tQ29sb3IpfS5wZi1jLWZvcm1fX2hlbHBlci10ZXh0e2ZvbnQtc2l6ZTp2YXIoLS1wZi1jLWZvcm1fX2hlbHBlci10ZXh0LS1Gb250U2l6ZSk7Y29sb3I6dmFyKC0tcGYtYy1mb3JtX19oZWxwZXItdGV4dC0tQ29sb3IpfS5wZi1jLWZvcm1fX2hlbHBlci10ZXh0LnBmLW0tZXJyb3J7LS1wZi1jLWZvcm1fX2hlbHBlci10ZXh0LS1Db2xvcjogdmFyKC0tcGYtYy1mb3JtLS1tLWVycm9yLS1Db2xvcil9LnBmLWMtZm9ybV9faGVscGVyLXRleHQucGYtbS1zdWNjZXNzey0tcGYtYy1mb3JtX19oZWxwZXItdGV4dC0tQ29sb3I6IHZhcigtLXBmLWMtZm9ybS0tbS1zdWNjZXNzLS1Db2xvcil9LnBmLWMtZm9ybV9faGVscGVyLXRleHQucGYtbS1pbmFjdGl2ZXtkaXNwbGF5Om5vbmU7dmlzaWJpbGl0eTpoaWRkZW59LnBmLWMtZm9ybV9faGVscGVyLXRleHQucGYtbS1oaWRkZW57dmlzaWJpbGl0eTpoaWRkZW47b3BhY2l0eTowfS5wZi1jLWZvcm1fX2ZpZWxkc2V0e2JvcmRlcjowfS5wZi1jLWZvcm1fX2FjdGlvbnN7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO21hcmdpbi10b3A6dmFyKC0tcGYtYy1mb3JtX19hY3Rpb25zLS1NYXJnaW5Ub3ApO21hcmdpbi1yaWdodDp2YXIoLS1wZi1jLWZvcm1fX2FjdGlvbnMtLU1hcmdpblJpZ2h0KTttYXJnaW4tYm90dG9tOnZhcigtLXBmLWMtZm9ybV9fYWN0aW9ucy0tTWFyZ2luQm90dG9tKTttYXJnaW4tbGVmdDp2YXIoLS1wZi1jLWZvcm1fX2FjdGlvbnMtLU1hcmdpbkxlZnQpO292ZXJmbG93OmhpZGRlbn0ucGYtYy1mb3JtX19hY3Rpb25zPip7bWFyZ2luLXRvcDp2YXIoLS1wZi1jLWZvcm1fX2FjdGlvbnMtLWNoaWxkLS1NYXJnaW5Ub3ApO21hcmdpbi1yaWdodDp2YXIoLS1wZi1jLWZvcm1fX2FjdGlvbnMtLWNoaWxkLS1NYXJnaW5SaWdodCk7bWFyZ2luLWJvdHRvbTp2YXIoLS1wZi1jLWZvcm1fX2FjdGlvbnMtLWNoaWxkLS1NYXJnaW5Cb3R0b20pO21hcmdpbi1sZWZ0OnZhcigtLXBmLWMtZm9ybV9fYWN0aW9ucy0tY2hpbGQtLU1hcmdpbkxlZnQpfS5wZi1jLWZvcm0tY29udHJvbHstLXBmLWMtZm9ybS1jb250cm9sLS1Gb250U2l6ZTogdmFyKC0tcGYtZ2xvYmFsLS1Gb250U2l6ZS0tbWQpOy0tcGYtYy1mb3JtLWNvbnRyb2wtLUxpbmVIZWlnaHQ6IHZhcigtLXBmLWdsb2JhbC0tTGluZUhlaWdodC0tbWQpOy0tcGYtYy1mb3JtLWNvbnRyb2wtLUJvcmRlcldpZHRoOiB2YXIoLS1wZi1nbG9iYWwtLUJvcmRlcldpZHRoLS1zbSk7LS1wZi1jLWZvcm0tY29udHJvbC0tQm9yZGVyVG9wQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tQm9yZGVyQ29sb3ItLTMwMCk7LS1wZi1jLWZvcm0tY29udHJvbC0tQm9yZGVyUmlnaHRDb2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1Cb3JkZXJDb2xvci0tMzAwKTstLXBmLWMtZm9ybS1jb250cm9sLS1Cb3JkZXJCb3R0b21Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1Cb3JkZXJDb2xvci0tMjAwKTstLXBmLWMtZm9ybS1jb250cm9sLS1Cb3JkZXJMZWZ0Q29sb3I6IHZhcigtLXBmLWdsb2JhbC0tQm9yZGVyQ29sb3ItLTMwMCk7LS1wZi1jLWZvcm0tY29udHJvbC0tQm9yZGVyUmFkaXVzOiAwOy0tcGYtYy1mb3JtLWNvbnRyb2wtLUJhY2tncm91bmRDb2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1CYWNrZ3JvdW5kQ29sb3ItLTEwMCk7LS1wZi1jLWZvcm0tY29udHJvbC0tSGVpZ2h0OiBjYWxjKHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1Gb250U2l6ZSkgKiB2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0tTGluZUhlaWdodCkgKyB2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0tQm9yZGVyV2lkdGgpICogMiArIHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1QYWRkaW5nVG9wKSArIHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1QYWRkaW5nQm90dG9tKSk7LS1wZi1jLWZvcm0tY29udHJvbC0tUGFkZGluZ1RvcDogY2FsYyh2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tZm9ybS1lbGVtZW50KSAtIHZhcigtLXBmLWdsb2JhbC0tQm9yZGVyV2lkdGgtLXNtKSk7LS1wZi1jLWZvcm0tY29udHJvbC0tUGFkZGluZ0JvdHRvbTogY2FsYyh2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tZm9ybS1lbGVtZW50KSAtIHZhcigtLXBmLWdsb2JhbC0tQm9yZGVyV2lkdGgtLXNtKSk7LS1wZi1jLWZvcm0tY29udHJvbC0tUGFkZGluZ1JpZ2h0OiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tc20pOy0tcGYtYy1mb3JtLWNvbnRyb2wtLVBhZGRpbmdMZWZ0OiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tc20pOy0tcGYtYy1mb3JtLWNvbnRyb2wtLWhvdmVyLS1Cb3JkZXJCb3R0b21Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1wcmltYXJ5LWNvbG9yLS0xMDApOy0tcGYtYy1mb3JtLWNvbnRyb2wtLWZvY3VzLS1Cb3JkZXJCb3R0b21XaWR0aDogdmFyKC0tcGYtZ2xvYmFsLS1Cb3JkZXJXaWR0aC0tbWQpOy0tcGYtYy1mb3JtLWNvbnRyb2wtLWZvY3VzLS1QYWRkaW5nQm90dG9tOiBjYWxjKHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS1mb3JtLWVsZW1lbnQpIC0gdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLWZvY3VzLS1Cb3JkZXJCb3R0b21XaWR0aCkpOy0tcGYtYy1mb3JtLWNvbnRyb2wtLWZvY3VzLS1Cb3JkZXJCb3R0b21Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1wcmltYXJ5LWNvbG9yLS0xMDApOy0tcGYtYy1mb3JtLWNvbnRyb2wtLXBsYWNlaG9sZGVyLS1Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1Db2xvci0tZGFyay0yMDApOy0tcGYtYy1mb3JtLWNvbnRyb2wtLWRpc2FibGVkLS1Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1kaXNhYmxlZC1jb2xvci0tMTAwKTstLXBmLWMtZm9ybS1jb250cm9sLS1kaXNhYmxlZC0tQmFja2dyb3VuZENvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLWRpc2FibGVkLWNvbG9yLS0zMDApOy0tcGYtYy1mb3JtLWNvbnRyb2wtLWRpc2FibGVkLS1Cb3JkZXJDb2xvcjogdHJhbnNwYXJlbnQ7LS1wZi1jLWZvcm0tY29udHJvbC0tcmVhZG9ubHktLWZvY3VzLS1CYWNrZ3JvdW5kQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tZGlzYWJsZWQtY29sb3ItLTMwMCk7LS1wZi1jLWZvcm0tY29udHJvbC0tcmVhZG9ubHktLWZvY3VzLS1QYWRkaW5nQm90dG9tOiB2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0tUGFkZGluZ0JvdHRvbSk7LS1wZi1jLWZvcm0tY29udHJvbC0tcmVhZG9ubHktLWZvY3VzLS1Cb3JkZXJCb3R0b21XaWR0aDogdmFyKC0tcGYtZ2xvYmFsLS1Cb3JkZXJXaWR0aC0tc20pOy0tcGYtYy1mb3JtLWNvbnRyb2wtLXJlYWRvbmx5LS1mb2N1cy0tQm9yZGVyQm90dG9tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tZGlzYWJsZWQtY29sb3ItLTEwMCk7LS1wZi1jLWZvcm0tY29udHJvbC0taW52YWxpZC0tQm9yZGVyQm90dG9tV2lkdGg6IHZhcigtLXBmLWdsb2JhbC0tQm9yZGVyV2lkdGgtLW1kKTstLXBmLWMtZm9ybS1jb250cm9sLS1pbnZhbGlkLS1QYWRkaW5nQm90dG9tOiBjYWxjKHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS1mb3JtLWVsZW1lbnQpIC0gdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLWludmFsaWQtLUJvcmRlckJvdHRvbVdpZHRoKSk7LS1wZi1jLWZvcm0tY29udHJvbC0taW52YWxpZC0tQm9yZGVyQm90dG9tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tZGFuZ2VyLWNvbG9yLS0xMDApOy0tcGYtYy1mb3JtLWNvbnRyb2wtLWludmFsaWQtLVBhZGRpbmdSaWdodDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLXhsKTstLXBmLWMtZm9ybS1jb250cm9sLS1pbnZhbGlkLS1CYWNrZ3JvdW5kUG9zaXRpb246IGNhbGMoMTAwJSAtIHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1QYWRkaW5nTGVmdCkpIHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1QYWRkaW5nTGVmdCk7LS1wZi1jLWZvcm0tY29udHJvbC0taW52YWxpZC0tQmFja2dyb3VuZFNpemU6IHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1Gb250U2l6ZSkgdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLUZvbnRTaXplKTstLXBmLWMtZm9ybS1jb250cm9sLS1pbnZhbGlkLS1CYWNrZ3JvdW5kVXJsOiB1cmwoImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0ZjgsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDUxMiA1MTInJTNFJTNDcGF0aCBmaWxsPSclMjNjOTE5MGInIGQ9J001MDQgMjU2YzAgMTM2Ljk5Ny0xMTEuMDQzIDI0OC0yNDggMjQ4UzggMzkyLjk5NyA4IDI1NkM4IDExOS4wODMgMTE5LjA0MyA4IDI1NiA4czI0OCAxMTEuMDgzIDI0OCAyNDh6bS0yNDggNTBjLTI1LjQwNSAwLTQ2IDIwLjU5NS00NiA0NnMyMC41OTUgNDYgNDYgNDYgNDYtMjAuNTk1IDQ2LTQ2LTIwLjU5NS00Ni00Ni00NnptLTQzLjY3My0xNjUuMzQ2bDcuNDE4IDEzNmMuMzQ3IDYuMzY0IDUuNjA5IDExLjM0NiAxMS45ODIgMTEuMzQ2aDQ4LjU0NmM2LjM3MyAwIDExLjYzNS00Ljk4MiAxMS45ODItMTEuMzQ2bDcuNDE4LTEzNmMuMzc1LTYuODc0LTUuMDk4LTEyLjY1NC0xMS45ODItMTIuNjU0aC02My4zODNjLTYuODg0IDAtMTIuMzU2IDUuNzgtMTEuOTgxIDEyLjY1NHonLyUzRSUzQy9zdmclM0UiKTstLXBmLWMtZm9ybS1jb250cm9sLS1pbnZhbGlkLS1leGNsYW1hdGlvbi0tQmFja2dyb3VuZDogdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLWludmFsaWQtLUJhY2tncm91bmRVcmwpIHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1pbnZhbGlkLS1CYWNrZ3JvdW5kUG9zaXRpb24pIC8gdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLWludmFsaWQtLUJhY2tncm91bmRTaXplKSBuby1yZXBlYXQ7LS1wZi1jLWZvcm0tY29udHJvbC0taW52YWxpZC0tQmFja2dyb3VuZDogdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLUJhY2tncm91bmRDb2xvcikgdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLWludmFsaWQtLWV4Y2xhbWF0aW9uLS1CYWNrZ3JvdW5kKTstLXBmLWMtZm9ybS1jb250cm9sLS1zdWNjZXNzLS1Cb3JkZXJCb3R0b21XaWR0aDogdmFyKC0tcGYtZ2xvYmFsLS1Cb3JkZXJXaWR0aC0tbWQpOy0tcGYtYy1mb3JtLWNvbnRyb2wtLXN1Y2Nlc3MtLVBhZGRpbmdCb3R0b206IGNhbGModmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLWZvcm0tZWxlbWVudCkgLSB2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0tc3VjY2Vzcy0tQm9yZGVyQm90dG9tV2lkdGgpKTstLXBmLWMtZm9ybS1jb250cm9sLS1zdWNjZXNzLS1Cb3JkZXJCb3R0b21Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1zdWNjZXNzLWNvbG9yLS0xMDApOy0tcGYtYy1mb3JtLWNvbnRyb2wtLXN1Y2Nlc3MtLVBhZGRpbmdSaWdodDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLXhsKTstLXBmLWMtZm9ybS1jb250cm9sLS1zdWNjZXNzLS1CYWNrZ3JvdW5kUG9zaXRpb246IGNhbGMoMTAwJSAtIHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1QYWRkaW5nTGVmdCkpIHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1QYWRkaW5nTGVmdCk7LS1wZi1jLWZvcm0tY29udHJvbC0tc3VjY2Vzcy0tQmFja2dyb3VuZFNpemU6IHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1Gb250U2l6ZSkgdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLUZvbnRTaXplKTstLXBmLWMtZm9ybS1jb250cm9sLS1zdWNjZXNzLS1CYWNrZ3JvdW5kVXJsOiB1cmwoImRhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0ZjgsJTNDc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDUxMiA1MTInJTNFJTNDcGF0aCBmaWxsPSclMjM5MmQ0MDAnIGQ9J001MDQgMjU2YzAgMTM2Ljk2Ny0xMTEuMDMzIDI0OC0yNDggMjQ4UzggMzkyLjk2NyA4IDI1NiAxMTkuMDMzIDggMjU2IDhzMjQ4IDExMS4wMzMgMjQ4IDI0OHpNMjI3LjMxNCAzODcuMzE0bDE4NC0xODRjNi4yNDgtNi4yNDggNi4yNDgtMTYuMzc5IDAtMjIuNjI3bC0yMi42MjctMjIuNjI3Yy02LjI0OC02LjI0OS0xNi4zNzktNi4yNDktMjIuNjI4IDBMMjE2IDMwOC4xMThsLTcwLjA1OS03MC4wNTljLTYuMjQ4LTYuMjQ4LTE2LjM3OS02LjI0OC0yMi42MjggMGwtMjIuNjI3IDIyLjYyN2MtNi4yNDggNi4yNDgtNi4yNDggMTYuMzc5IDAgMjIuNjI3bDEwNCAxMDRjNi4yNDkgNi4yNDkgMTYuMzc5IDYuMjQ5IDIyLjYyOC4wMDF6Jy8lM0UlM0Mvc3ZnJTNFIik7LS1wZi1jLWZvcm0tY29udHJvbC0tc3VjY2Vzcy0tY2hlY2stLUJhY2tncm91bmQ6IHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1zdWNjZXNzLS1CYWNrZ3JvdW5kVXJsKSB2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0tc3VjY2Vzcy0tQmFja2dyb3VuZFBvc2l0aW9uKSAvIHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1zdWNjZXNzLS1CYWNrZ3JvdW5kU2l6ZSkgbm8tcmVwZWF0Oy0tcGYtYy1mb3JtLWNvbnRyb2wtLXN1Y2Nlc3MtLUJhY2tncm91bmQ6IHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1CYWNrZ3JvdW5kQ29sb3IpIHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1zdWNjZXNzLS1jaGVjay0tQmFja2dyb3VuZCk7LS1wZi1jLWZvcm0tY29udHJvbC0tbS1zZWFyY2gtLVBhZGRpbmdMZWZ0OiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0teGwpOy0tcGYtYy1mb3JtLWNvbnRyb2wtLW0tc2VhcmNoLS1CYWNrZ3JvdW5kUG9zaXRpb246IHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1QYWRkaW5nTGVmdCk7LS1wZi1jLWZvcm0tY29udHJvbC0tbS1zZWFyY2gtLUJhY2tncm91bmRTaXplOiB2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0tRm9udFNpemUpIHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1Gb250U2l6ZSk7LS1wZi1jLWZvcm0tY29udHJvbC0tbS1zZWFyY2gtLUJhY2tncm91bmRVcmw6IHVybCgiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmOCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PScwIDAgNTEyIDUxMiclM0UlM0NwYXRoIGZpbGw9JyUyMzczNzY3OScgZD0nTTUwNSA0NDIuN0w0MDUuMyAzNDNjLTQuNS00LjUtMTAuNi03LTE3LTdIMzcyYzI3LjYtMzUuMyA0NC03OS43IDQ0LTEyOEM0MTYgOTMuMSAzMjIuOSAwIDIwOCAwUzAgOTMuMSAwIDIwOHM5My4xIDIwOCAyMDggMjA4YzQ4LjMgMCA5Mi43LTE2LjQgMTI4LTQ0djE2LjNjMCA2LjQgMi41IDEyLjUgNyAxN2w5OS43IDk5LjdjOS40IDkuNCAyNC42IDkuNCAzMy45IDBsMjguMy0yOC4zYzkuNC05LjQgOS40LTI0LjYuMS0zNHpNMjA4IDMzNmMtNzAuNyAwLTEyOC01Ny4yLTEyOC0xMjggMC03MC43IDU3LjItMTI4IDEyOC0xMjggNzAuNyAwIDEyOCA1Ny4yIDEyOCAxMjggMCA3MC43LTU3LjIgMTI4LTEyOCAxMjh6Jy8lM0UlM0Mvc3ZnJTNFIik7LS1wZi1jLWZvcm0tY29udHJvbC0tbS1zZWFyY2gtLUJhY2tncm91bmQ6IHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1tLXNlYXJjaC0tQmFja2dyb3VuZFVybCkgdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLW0tc2VhcmNoLS1CYWNrZ3JvdW5kUG9zaXRpb24pIC8gdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLW0tc2VhcmNoLS1CYWNrZ3JvdW5kU2l6ZSkgbm8tcmVwZWF0Oy0tcGYtYy1mb3JtLWNvbnRyb2xfX3NlbGVjdC0tUGFkZGluZ1JpZ2h0OiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tbGcpOy0tcGYtYy1mb3JtLWNvbnRyb2xfX3NlbGVjdC0tQmFja2dyb3VuZFVybDogdXJsKCJkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGY4LCUzQ3N2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZpZXdCb3g9JzAgMCAzMjAgNTEyJyUzRSUzQ3BhdGggZmlsbD0nJTIzdXJyZW50Q29sb3InIGQ9J00zMS4zIDE5MmgyNTcuM2MxNy44IDAgMjYuNyAyMS41IDE0LjEgMzQuMUwxNzQuMSAzNTQuOGMtNy44IDcuOC0yMC41IDcuOC0yOC4zIDBMMTcuMiAyMjYuMUM0LjYgMjEzLjUgMTMuNSAxOTIgMzEuMyAxOTJ6Jy8lM0UlM0Mvc3ZnJTNFIik7LS1wZi1jLWZvcm0tY29udHJvbF9fc2VsZWN0LS1CYWNrZ3JvdW5kU2l6ZTogLjg3NXJlbTstLXBmLWMtZm9ybS1jb250cm9sX19zZWxlY3QtLUJhY2tncm91bmRQb3NpdGlvbjogY2FsYygxMDAlIC0gdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLXNtKSkgY2VudGVyOy0tcGYtYy1mb3JtLWNvbnRyb2xfX3NlbGVjdC0tYXJyb3ctLUJhY2tncm91bmQ6IHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1CYWNrZ3JvdW5kQ29sb3IpIHZhcigtLXBmLWMtZm9ybS1jb250cm9sX19zZWxlY3QtLUJhY2tncm91bmRVcmwpIHZhcigtLXBmLWMtZm9ybS1jb250cm9sX19zZWxlY3QtLUJhY2tncm91bmRQb3NpdGlvbikgLyB2YXIoLS1wZi1jLWZvcm0tY29udHJvbF9fc2VsZWN0LS1CYWNrZ3JvdW5kU2l6ZSkgbm8tcmVwZWF0Oy0tcGYtYy1mb3JtLWNvbnRyb2xfX3NlbGVjdC0tQmFja2dyb3VuZDogdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2xfX3NlbGVjdC0tYXJyb3ctLUJhY2tncm91bmQpOy0tcGYtYy1mb3JtLWNvbnRyb2xfX3NlbGVjdC0taW52YWxpZC0tQmFja2dyb3VuZDogdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLWludmFsaWQtLWV4Y2xhbWF0aW9uLS1CYWNrZ3JvdW5kKSwgdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2xfX3NlbGVjdC0tYXJyb3ctLUJhY2tncm91bmQpOy0tcGYtYy1mb3JtLWNvbnRyb2xfX3NlbGVjdC0taW52YWxpZC0tUGFkZGluZ1JpZ2h0OiBjYWxjKHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS1zbSkgKyB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tMnhsKSk7LS1wZi1jLWZvcm0tY29udHJvbF9fc2VsZWN0LS1zdWNjZXNzLS1CYWNrZ3JvdW5kOiB2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0tc3VjY2Vzcy0tY2hlY2stLUJhY2tncm91bmQpLCB2YXIoLS1wZi1jLWZvcm0tY29udHJvbF9fc2VsZWN0LS1hcnJvdy0tQmFja2dyb3VuZCk7LS1wZi1jLWZvcm0tY29udHJvbF9fc2VsZWN0LS1zdWNjZXNzLS1QYWRkaW5nUmlnaHQ6IGNhbGModmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLXNtKSArIHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS0yeGwpKTtjb2xvcjp2YXIoLS1wZi1nbG9iYWwtLUNvbG9yLS0xMDApO3dpZHRoOjEwMCU7cGFkZGluZzp2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0tUGFkZGluZ1RvcCkgdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLVBhZGRpbmdSaWdodCkgdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLVBhZGRpbmdCb3R0b20pIHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1QYWRkaW5nTGVmdCk7Zm9udC1zaXplOnZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1Gb250U2l6ZSk7bGluZS1oZWlnaHQ6dmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLUxpbmVIZWlnaHQpO2JhY2tncm91bmQtY29sb3I6dmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLUJhY2tncm91bmRDb2xvcik7Ym9yZGVyOnZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1Cb3JkZXJXaWR0aCkgc29saWQ7Ym9yZGVyLWNvbG9yOnZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1Cb3JkZXJUb3BDb2xvcikgdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLUJvcmRlclJpZ2h0Q29sb3IpIHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1Cb3JkZXJCb3R0b21Db2xvcikgdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLUJvcmRlckxlZnRDb2xvcik7Ym9yZGVyLXJhZGl1czp2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0tQm9yZGVyUmFkaXVzKTstbW96LWFwcGVhcmFuY2U6bm9uZTstd2Via2l0LWFwcGVhcmFuY2U6bm9uZX0ucGYtYy1mb3JtLWNvbnRyb2w6OnBsYWNlaG9sZGVyey0tcGYtYy1mb3JtLWNvbnRyb2wtLUNvbG9yOiB2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0tcGxhY2Vob2xkZXItLUNvbG9yKX0ucGYtYy1mb3JtLWNvbnRyb2w6bm90KHRleHRhcmVhKXtoZWlnaHQ6dmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLUhlaWdodCk7dGV4dC1vdmVyZmxvdzplbGxpcHNpc30ucGYtYy1mb3JtLWNvbnRyb2xbcmVhZG9ubHldLC5wZi1jLWZvcm0tY29udHJvbFtyZWFkb25seV0ucGYtbS1ob3ZlciwucGYtYy1mb3JtLWNvbnRyb2xbcmVhZG9ubHldOmhvdmVyLC5wZi1jLWZvcm0tY29udHJvbFtyZWFkb25seV0ucGYtbS1mb2N1cywucGYtYy1mb3JtLWNvbnRyb2xbcmVhZG9ubHldOmZvY3Vzey0tcGYtYy1mb3JtLWNvbnRyb2wtLUJvcmRlckJvdHRvbUNvbG9yOiB2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0tcmVhZG9ubHktLWZvY3VzLS1Cb3JkZXJCb3R0b21Db2xvcik7cGFkZGluZy1ib3R0b206dmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLXJlYWRvbmx5LS1mb2N1cy0tUGFkZGluZ0JvdHRvbSk7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0tcmVhZG9ubHktLWZvY3VzLS1CYWNrZ3JvdW5kQ29sb3IpO2JvcmRlci1ib3R0b20td2lkdGg6dmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLXJlYWRvbmx5LS1mb2N1cy0tQm9yZGVyQm90dG9tV2lkdGgpfS5wZi1jLWZvcm0tY29udHJvbC5wZi1tLWhvdmVyLC5wZi1jLWZvcm0tY29udHJvbDpob3ZlcnstLXBmLWMtZm9ybS1jb250cm9sLS1Cb3JkZXJCb3R0b21Db2xvcjogdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLWhvdmVyLS1Cb3JkZXJCb3R0b21Db2xvcil9LnBmLWMtZm9ybS1jb250cm9sLnBmLW0tZm9jdXMsLnBmLWMtZm9ybS1jb250cm9sOmZvY3Vzey0tcGYtYy1mb3JtLWNvbnRyb2wtLUJvcmRlckJvdHRvbUNvbG9yOiB2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0tZm9jdXMtLUJvcmRlckJvdHRvbUNvbG9yKTtwYWRkaW5nLWJvdHRvbTp2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0tZm9jdXMtLVBhZGRpbmdCb3R0b20pO2JvcmRlci1ib3R0b20td2lkdGg6dmFyKC0tcGYtYy1mb3JtLWNvbnRyb2wtLWZvY3VzLS1Cb3JkZXJCb3R0b21XaWR0aCl9LnBmLWMtZm9ybS1jb250cm9sOmRpc2FibGVkey0tcGYtYy1mb3JtLWNvbnRyb2wtLUNvbG9yOiB2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0tZGlzYWJsZWQtLUNvbG9yKTstLXBmLWMtZm9ybS1jb250cm9sLS1CYWNrZ3JvdW5kQ29sb3I6IHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1kaXNhYmxlZC0tQmFja2dyb3VuZENvbG9yKTtjdXJzb3I6bm90LWFsbG93ZWQ7Ym9yZGVyLWNvbG9yOnZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1kaXNhYmxlZC0tQm9yZGVyQ29sb3IpfS5wZi1jLWZvcm0tY29udHJvbFthcmlhLWludmFsaWQ9InRydWUiXXstLXBmLWMtZm9ybS1jb250cm9sLS1QYWRkaW5nUmlnaHQ6IHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1pbnZhbGlkLS1QYWRkaW5nUmlnaHQpOy0tcGYtYy1mb3JtLWNvbnRyb2wtLUJvcmRlckJvdHRvbUNvbG9yOiB2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0taW52YWxpZC0tQm9yZGVyQm90dG9tQ29sb3IpO3BhZGRpbmctYm90dG9tOnZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1pbnZhbGlkLS1QYWRkaW5nQm90dG9tKTtiYWNrZ3JvdW5kOnZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1pbnZhbGlkLS1CYWNrZ3JvdW5kKTtib3JkZXItYm90dG9tLXdpZHRoOnZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1pbnZhbGlkLS1Cb3JkZXJCb3R0b21XaWR0aCl9LnBmLWMtZm9ybS1jb250cm9sLnBmLW0tc3VjY2Vzc3stLXBmLWMtZm9ybS1jb250cm9sLS1QYWRkaW5nUmlnaHQ6IHZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1zdWNjZXNzLS1QYWRkaW5nUmlnaHQpOy0tcGYtYy1mb3JtLWNvbnRyb2wtLUJvcmRlckJvdHRvbUNvbG9yOiB2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0tc3VjY2Vzcy0tQm9yZGVyQm90dG9tQ29sb3IpO3BhZGRpbmctYm90dG9tOnZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1zdWNjZXNzLS1QYWRkaW5nQm90dG9tKTtiYWNrZ3JvdW5kOnZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1zdWNjZXNzLS1CYWNrZ3JvdW5kKTtib3JkZXItYm90dG9tLXdpZHRoOnZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1zdWNjZXNzLS1Cb3JkZXJCb3R0b21XaWR0aCl9LnBmLWMtZm9ybS1jb250cm9sLnBmLW0tc2VhcmNoe3BhZGRpbmctbGVmdDp2YXIoLS1wZi1jLWZvcm0tY29udHJvbC0tbS1zZWFyY2gtLVBhZGRpbmdMZWZ0KTtiYWNrZ3JvdW5kOnZhcigtLXBmLWMtZm9ybS1jb250cm9sLS1tLXNlYXJjaC0tQmFja2dyb3VuZCl9c2VsZWN0LnBmLWMtZm9ybS1jb250cm9sey0tcGYtYy1mb3JtLWNvbnRyb2wtLVBhZGRpbmdSaWdodDogdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2xfX3NlbGVjdC0tUGFkZGluZ1JpZ2h0KTtiYWNrZ3JvdW5kOnZhcigtLXBmLWMtZm9ybS1jb250cm9sX19zZWxlY3QtLUJhY2tncm91bmQpfXNlbGVjdC5wZi1jLWZvcm0tY29udHJvbFthcmlhLWludmFsaWQ9InRydWUiXXstLXBmLWMtZm9ybS1jb250cm9sLS1QYWRkaW5nUmlnaHQ6IHZhcigtLXBmLWMtZm9ybS1jb250cm9sX19zZWxlY3QtLWludmFsaWQtLVBhZGRpbmdSaWdodCk7LS1wZi1jLWZvcm0tY29udHJvbC0taW52YWxpZC0tQmFja2dyb3VuZFBvc2l0aW9uOiBjYWxjKDEwMCUgLSB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tc20pIC0gdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLWxnKSk7LS1wZi1jLWZvcm0tY29udHJvbC0taW52YWxpZC0tQmFja2dyb3VuZDogdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2xfX3NlbGVjdC0taW52YWxpZC0tQmFja2dyb3VuZCl9c2VsZWN0LnBmLWMtZm9ybS1jb250cm9sLnBmLW0tc3VjY2Vzc3stLXBmLWMtZm9ybS1jb250cm9sLS1QYWRkaW5nUmlnaHQ6IHZhcigtLXBmLWMtZm9ybS1jb250cm9sX19zZWxlY3QtLXN1Y2Nlc3MtLVBhZGRpbmdSaWdodCk7LS1wZi1jLWZvcm0tY29udHJvbC0tc3VjY2Vzcy0tQmFja2dyb3VuZFBvc2l0aW9uOiBjYWxjKDEwMCUgLSB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tc20pIC0gdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLWxnKSk7LS1wZi1jLWZvcm0tY29udHJvbC0tc3VjY2Vzcy0tQmFja2dyb3VuZDogdmFyKC0tcGYtYy1mb3JtLWNvbnRyb2xfX3NlbGVjdC0tc3VjY2Vzcy0tQmFja2dyb3VuZCl9LnBmLWMtZm9ybS1jb250cm9sLnBmLW0tcmVzaXplLXZlcnRpY2Fse3Jlc2l6ZTp2ZXJ0aWNhbH0ucGYtYy1mb3JtLWNvbnRyb2wucGYtbS1yZXNpemUtaG9yaXpvbnRhbHtyZXNpemU6aG9yaXpvbnRhbH0uZXJyb3ItcGxhY2Vob2xkZXJ7bWluLWhlaWdodDoyMXB4fS5wZi1tLWVycm9yX19pY29ue21hcmdpbi1yaWdodDo1cHh9LnBmLWMtZm9ybV9faGVscGVyLXRleHQucGYtbS1lcnJvcntjb2xvcjp2YXIoLS1wZi1nbG9iYWwtLWRhbmdlci1jb2xvci0tMTAwKX0ucGYtYy1idXR0b257LS1wZi1jLWJ1dHRvbi0tUGFkZGluZ1RvcDogdmFyKC0tcGYtZ2xvYmFsLS1zcGFjZXItLWZvcm0tZWxlbWVudCk7LS1wZi1jLWJ1dHRvbi0tUGFkZGluZ1JpZ2h0OiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tbWQpOy0tcGYtYy1idXR0b24tLVBhZGRpbmdCb3R0b206IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS1mb3JtLWVsZW1lbnQpOy0tcGYtYy1idXR0b24tLVBhZGRpbmdMZWZ0OiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0tbWQpOy0tcGYtYy1idXR0b24tLUxpbmVIZWlnaHQ6IHZhcigtLXBmLWdsb2JhbC0tTGluZUhlaWdodC0tbWQpOy0tcGYtYy1idXR0b24tLUZvbnRXZWlnaHQ6IHZhcigtLXBmLWdsb2JhbC0tRm9udFdlaWdodC0tc2VtaS1ib2xkKTstLXBmLWMtYnV0dG9uLS1Gb250U2l6ZTogdmFyKC0tcGYtZ2xvYmFsLS1Gb250U2l6ZS0tbWQpOy0tcGYtYy1idXR0b24tLUJvcmRlclJhZGl1czogdmFyKC0tcGYtZ2xvYmFsLS1Cb3JkZXJSYWRpdXMtLXNtKTstLXBmLWMtYnV0dG9uLS1Cb3JkZXJDb2xvcjogdHJhbnNwYXJlbnQ7LS1wZi1jLWJ1dHRvbi0tQm9yZGVyV2lkdGg6IHZhcigtLXBmLWdsb2JhbC0tQm9yZGVyV2lkdGgtLXNtKTstLXBmLWMtYnV0dG9uLS1ob3Zlci0tQm9yZGVyV2lkdGg6IHZhcigtLXBmLWdsb2JhbC0tQm9yZGVyV2lkdGgtLW1kKTstLXBmLWMtYnV0dG9uLS1mb2N1cy0tQm9yZGVyV2lkdGg6IHZhcigtLXBmLWdsb2JhbC0tQm9yZGVyV2lkdGgtLW1kKTstLXBmLWMtYnV0dG9uLS1hY3RpdmUtLUJvcmRlcldpZHRoOiB2YXIoLS1wZi1nbG9iYWwtLUJvcmRlcldpZHRoLS1tZCk7LS1wZi1jLWJ1dHRvbi0tZGlzYWJsZWQtLUNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLWRpc2FibGVkLWNvbG9yLS0xMDApOy0tcGYtYy1idXR0b24tLWRpc2FibGVkLS1CYWNrZ3JvdW5kQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tZGlzYWJsZWQtY29sb3ItLTIwMCk7LS1wZi1jLWJ1dHRvbi0tZGlzYWJsZWQtLUJvcmRlckNvbG9yOiB0cmFuc3BhcmVudDstLXBmLWMtYnV0dG9uLS1tLXByaW1hcnktLUJhY2tncm91bmRDb2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1wcmltYXJ5LWNvbG9yLS0xMDApOy0tcGYtYy1idXR0b24tLW0tcHJpbWFyeS0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tQ29sb3ItLWxpZ2h0LTEwMCk7LS1wZi1jLWJ1dHRvbi0tbS1wcmltYXJ5LS1ob3Zlci0tQmFja2dyb3VuZENvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLXByaW1hcnktY29sb3ItLTIwMCk7LS1wZi1jLWJ1dHRvbi0tbS1wcmltYXJ5LS1ob3Zlci0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tQ29sb3ItLWxpZ2h0LTEwMCk7LS1wZi1jLWJ1dHRvbi0tbS1wcmltYXJ5LS1mb2N1cy0tQmFja2dyb3VuZENvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLXByaW1hcnktY29sb3ItLTIwMCk7LS1wZi1jLWJ1dHRvbi0tbS1wcmltYXJ5LS1mb2N1cy0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tQ29sb3ItLWxpZ2h0LTEwMCk7LS1wZi1jLWJ1dHRvbi0tbS1wcmltYXJ5LS1hY3RpdmUtLUJhY2tncm91bmRDb2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1wcmltYXJ5LWNvbG9yLS0yMDApOy0tcGYtYy1idXR0b24tLW0tcHJpbWFyeS0tYWN0aXZlLS1Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1Db2xvci0tbGlnaHQtMTAwKTstLXBmLWMtYnV0dG9uLS1tLXNlY29uZGFyeS0tQmFja2dyb3VuZENvbG9yOiB0cmFuc3BhcmVudDstLXBmLWMtYnV0dG9uLS1tLXNlY29uZGFyeS0tQm9yZGVyQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tcHJpbWFyeS1jb2xvci0tMTAwKTstLXBmLWMtYnV0dG9uLS1tLXNlY29uZGFyeS0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tcHJpbWFyeS1jb2xvci0tMTAwKTstLXBmLWMtYnV0dG9uLS1tLXNlY29uZGFyeS0taG92ZXItLUJhY2tncm91bmRDb2xvcjogdHJhbnNwYXJlbnQ7LS1wZi1jLWJ1dHRvbi0tbS1zZWNvbmRhcnktLWhvdmVyLS1Cb3JkZXJDb2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1wcmltYXJ5LWNvbG9yLS0xMDApOy0tcGYtYy1idXR0b24tLW0tc2Vjb25kYXJ5LS1ob3Zlci0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tcHJpbWFyeS1jb2xvci0tMTAwKTstLXBmLWMtYnV0dG9uLS1tLXNlY29uZGFyeS0tZm9jdXMtLUJhY2tncm91bmRDb2xvcjogdHJhbnNwYXJlbnQ7LS1wZi1jLWJ1dHRvbi0tbS1zZWNvbmRhcnktLWZvY3VzLS1Cb3JkZXJDb2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1wcmltYXJ5LWNvbG9yLS0xMDApOy0tcGYtYy1idXR0b24tLW0tc2Vjb25kYXJ5LS1mb2N1cy0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tcHJpbWFyeS1jb2xvci0tMTAwKTstLXBmLWMtYnV0dG9uLS1tLXNlY29uZGFyeS0tYWN0aXZlLS1CYWNrZ3JvdW5kQ29sb3I6IHRyYW5zcGFyZW50Oy0tcGYtYy1idXR0b24tLW0tc2Vjb25kYXJ5LS1hY3RpdmUtLUJvcmRlckNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLXByaW1hcnktY29sb3ItLTEwMCk7LS1wZi1jLWJ1dHRvbi0tbS1zZWNvbmRhcnktLWFjdGl2ZS0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tcHJpbWFyeS1jb2xvci0tMTAwKTstLXBmLWMtYnV0dG9uLS1tLXRlcnRpYXJ5LS1CYWNrZ3JvdW5kQ29sb3I6IHRyYW5zcGFyZW50Oy0tcGYtYy1idXR0b24tLW0tdGVydGlhcnktLUJvcmRlckNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLUNvbG9yLS0xMDApOy0tcGYtYy1idXR0b24tLW0tdGVydGlhcnktLUNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLUNvbG9yLS0xMDApOy0tcGYtYy1idXR0b24tLW0tdGVydGlhcnktLWhvdmVyLS1CYWNrZ3JvdW5kQ29sb3I6IHRyYW5zcGFyZW50Oy0tcGYtYy1idXR0b24tLW0tdGVydGlhcnktLWhvdmVyLS1Cb3JkZXJDb2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1Db2xvci0tMTAwKTstLXBmLWMtYnV0dG9uLS1tLXRlcnRpYXJ5LS1ob3Zlci0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tQ29sb3ItLTEwMCk7LS1wZi1jLWJ1dHRvbi0tbS10ZXJ0aWFyeS0tZm9jdXMtLUJhY2tncm91bmRDb2xvcjogdHJhbnNwYXJlbnQ7LS1wZi1jLWJ1dHRvbi0tbS10ZXJ0aWFyeS0tZm9jdXMtLUJvcmRlckNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLUNvbG9yLS0xMDApOy0tcGYtYy1idXR0b24tLW0tdGVydGlhcnktLWZvY3VzLS1Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1Db2xvci0tMTAwKTstLXBmLWMtYnV0dG9uLS1tLXRlcnRpYXJ5LS1hY3RpdmUtLUJhY2tncm91bmRDb2xvcjogdHJhbnNwYXJlbnQ7LS1wZi1jLWJ1dHRvbi0tbS10ZXJ0aWFyeS0tYWN0aXZlLS1Cb3JkZXJDb2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1Db2xvci0tMTAwKTstLXBmLWMtYnV0dG9uLS1tLXRlcnRpYXJ5LS1hY3RpdmUtLUNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLUNvbG9yLS0xMDApOy0tcGYtYy1idXR0b24tLW0tZGFuZ2VyLS1CYWNrZ3JvdW5kQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tZGFuZ2VyLWNvbG9yLS0xMDApOy0tcGYtYy1idXR0b24tLW0tZGFuZ2VyLS1Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1Db2xvci0tbGlnaHQtMTAwKTstLXBmLWMtYnV0dG9uLS1tLWRhbmdlci0taG92ZXItLUJhY2tncm91bmRDb2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1kYW5nZXItY29sb3ItLTIwMCk7LS1wZi1jLWJ1dHRvbi0tbS1kYW5nZXItLWhvdmVyLS1Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1Db2xvci0tbGlnaHQtMTAwKTstLXBmLWMtYnV0dG9uLS1tLWRhbmdlci0tZm9jdXMtLUJhY2tncm91bmRDb2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1kYW5nZXItY29sb3ItLTIwMCk7LS1wZi1jLWJ1dHRvbi0tbS1kYW5nZXItLWZvY3VzLS1Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1Db2xvci0tbGlnaHQtMTAwKTstLXBmLWMtYnV0dG9uLS1tLWRhbmdlci0tYWN0aXZlLS1CYWNrZ3JvdW5kQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tZGFuZ2VyLWNvbG9yLS0yMDApOy0tcGYtYy1idXR0b24tLW0tZGFuZ2VyLS1hY3RpdmUtLUNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLUNvbG9yLS1saWdodC0xMDApOy0tcGYtYy1idXR0b24tLW0tbGluay0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tbGluay0tQ29sb3IpOy0tcGYtYy1idXR0b24tLW0tbGluay0taG92ZXItLUNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLWxpbmstLUNvbG9yLS1ob3Zlcik7LS1wZi1jLWJ1dHRvbi0tbS1saW5rLS1mb2N1cy0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tbGluay0tQ29sb3ItLWhvdmVyKTstLXBmLWMtYnV0dG9uLS1tLWxpbmstLWFjdGl2ZS0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tbGluay0tQ29sb3ItLWhvdmVyKTstLXBmLWMtYnV0dG9uLS1tLWxpbmstLWRpc2FibGVkLS1CYWNrZ3JvdW5kQ29sb3I6IHRyYW5zcGFyZW50Oy0tcGYtYy1idXR0b24tLW0tbGluay0tbS1pbmxpbmUtLWhvdmVyLS1UZXh0RGVjb3JhdGlvbjogdmFyKC0tcGYtZ2xvYmFsLS1saW5rLS1UZXh0RGVjb3JhdGlvbi0taG92ZXIpOy0tcGYtYy1idXR0b24tLW0tbGluay0tbS1pbmxpbmUtLWhvdmVyLS1Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1saW5rLS1Db2xvci0taG92ZXIpOy0tcGYtYy1idXR0b24tLW0tcGxhaW4tLUNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLUNvbG9yLS0yMDApOy0tcGYtYy1idXR0b24tLW0tcGxhaW4tLWhvdmVyLS1Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1Db2xvci0tMTAwKTstLXBmLWMtYnV0dG9uLS1tLXBsYWluLS1mb2N1cy0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tQ29sb3ItLTEwMCk7LS1wZi1jLWJ1dHRvbi0tbS1wbGFpbi0tYWN0aXZlLS1Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1Db2xvci0tMTAwKTstLXBmLWMtYnV0dG9uLS1tLXBsYWluLS1kaXNhYmxlZC0tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tZGlzYWJsZWQtY29sb3ItLTIwMCk7LS1wZi1jLWJ1dHRvbi0tbS1wbGFpbi0tZGlzYWJsZWQtLUJhY2tncm91bmRDb2xvcjogdHJhbnNwYXJlbnQ7LS1wZi1jLWJ1dHRvbi0tbS1jb250cm9sLS1hZnRlci0tQm9yZGVyV2lkdGg6IHZhcigtLXBmLWdsb2JhbC0tQm9yZGVyV2lkdGgtLXNtKTstLXBmLWMtYnV0dG9uLS1tLWNvbnRyb2wtLWFmdGVyLS1Cb3JkZXJUb3BDb2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1Cb3JkZXJDb2xvci0tMzAwKTstLXBmLWMtYnV0dG9uLS1tLWNvbnRyb2wtLWFmdGVyLS1Cb3JkZXJSaWdodENvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLUJvcmRlckNvbG9yLS0zMDApOy0tcGYtYy1idXR0b24tLW0tY29udHJvbC0tYWZ0ZXItLUJvcmRlckJvdHRvbUNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLUJvcmRlckNvbG9yLS0yMDApOy0tcGYtYy1idXR0b24tLW0tY29udHJvbC0tYWZ0ZXItLUJvcmRlckxlZnRDb2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1Cb3JkZXJDb2xvci0tMzAwKTstLXBmLWMtYnV0dG9uLS1tLWNvbnRyb2wtLWhvdmVyLS1hZnRlci0tQm9yZGVyQm90dG9tV2lkdGg6IHZhcigtLXBmLWdsb2JhbC0tQm9yZGVyV2lkdGgtLW1kKTstLXBmLWMtYnV0dG9uLS1tLWNvbnRyb2wtLWhvdmVyLS1hZnRlci0tQm9yZGVyQm90dG9tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tYWN0aXZlLWNvbG9yLS0xMDApOy0tcGYtYy1idXR0b24tLW0tY29udHJvbC0tYWN0aXZlLS1hZnRlci0tQm9yZGVyQm90dG9tV2lkdGg6IHZhcigtLXBmLWdsb2JhbC0tQm9yZGVyV2lkdGgtLW1kKTstLXBmLWMtYnV0dG9uLS1tLWNvbnRyb2wtLWFjdGl2ZS0tYWZ0ZXItLUJvcmRlckJvdHRvbUNvbG9yOiB2YXIoLS1wZi1nbG9iYWwtLWFjdGl2ZS1jb2xvci0tMTAwKTstLXBmLWMtYnV0dG9uLS1tLWNvbnRyb2wtLWZvY3VzLS1hZnRlci0tQm9yZGVyQm90dG9tV2lkdGg6IHZhcigtLXBmLWdsb2JhbC0tQm9yZGVyV2lkdGgtLW1kKTstLXBmLWMtYnV0dG9uLS1tLWNvbnRyb2wtLWZvY3VzLS1hZnRlci0tQm9yZGVyQm90dG9tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tYWN0aXZlLWNvbG9yLS0xMDApOy0tcGYtYy1idXR0b24tLW0tY29udHJvbC0tbS1leHBhbmRlZC0tYWZ0ZXItLUJvcmRlckJvdHRvbVdpZHRoOiB2YXIoLS1wZi1nbG9iYWwtLUJvcmRlcldpZHRoLS1tZCk7LS1wZi1jLWJ1dHRvbi0tbS1jb250cm9sLS1tLWV4cGFuZGVkLS1hZnRlci0tQm9yZGVyQm90dG9tQ29sb3I6IHZhcigtLXBmLWdsb2JhbC0tYWN0aXZlLWNvbG9yLS0xMDApOy0tcGYtYy1idXR0b24tLW0tY29udHJvbC0tZGlzYWJsZWQtLWFmdGVyLS1Cb3JkZXJCb3R0b21Db2xvcjogdmFyKC0tcGYtZ2xvYmFsLS1Cb3JkZXJDb2xvci0tMzAwKTstLXBmLWMtYnV0dG9uLS1tLWNvbnRyb2wtLWRpc2FibGVkLS1CYWNrZ3JvdW5kQ29sb3I6IHRyYW5zcGFyZW50Oy0tcGYtYy1idXR0b25fX2ljb24tLU1hcmdpblJpZ2h0OiB2YXIoLS1wZi1nbG9iYWwtLXNwYWNlci0teHMpOy0tcGYtYy1idXR0b25fX3RleHQtLWljb24tLU1hcmdpbkxlZnQ6IHZhcigtLXBmLWdsb2JhbC0tc3BhY2VyLS14cyk7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTppbmxpbmUtYmxvY2s7cGFkZGluZzp2YXIoLS1wZi1jLWJ1dHRvbi0tUGFkZGluZ1RvcCkgdmFyKC0tcGYtYy1idXR0b24tLVBhZGRpbmdSaWdodCkgdmFyKC0tcGYtYy1idXR0b24tLVBhZGRpbmdCb3R0b20pIHZhcigtLXBmLWMtYnV0dG9uLS1QYWRkaW5nTGVmdCk7Zm9udC1zaXplOnZhcigtLXBmLWMtYnV0dG9uLS1Gb250U2l6ZSk7Zm9udC13ZWlnaHQ6dmFyKC0tcGYtYy1idXR0b24tLUZvbnRXZWlnaHQpO2xpbmUtaGVpZ2h0OnZhcigtLXBmLWMtYnV0dG9uLS1MaW5lSGVpZ2h0KTt0ZXh0LWFsaWduOmNlbnRlcjt3aGl0ZS1zcGFjZTpub3dyYXA7dXNlci1zZWxlY3Q6bm9uZTtib3JkZXI6MDtib3JkZXItcmFkaXVzOnZhcigtLXBmLWMtYnV0dG9uLS1Cb3JkZXJSYWRpdXMpfS5wZi1jLWJ1dHRvbiAucGYtYy1idXR0b25fX2ljb257bWFyZ2luLXJpZ2h0OnZhcigtLXBmLWMtYnV0dG9uX19pY29uLS1NYXJnaW5SaWdodCl9LnBmLWMtYnV0dG9uIC5wZi1jLWJ1dHRvbl9fdGV4dCsucGYtYy1idXR0b25fX2ljb257bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLWxlZnQ6dmFyKC0tcGYtYy1idXR0b25fX3RleHQtLWljb24tLU1hcmdpbkxlZnQpfS5wZi1jLWJ1dHRvbjo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7cmlnaHQ6MDtib3R0b206MDtsZWZ0OjA7Y29udGVudDoiIjtib3JkZXI6dmFyKC0tcGYtYy1idXR0b24tLUJvcmRlcldpZHRoKSBzb2xpZDtib3JkZXItY29sb3I6dmFyKC0tcGYtYy1idXR0b24tLUJvcmRlckNvbG9yKTtib3JkZXItcmFkaXVzOnZhcigtLXBmLWMtYnV0dG9uLS1Cb3JkZXJSYWRpdXMpfS5wZi1jLWJ1dHRvbjpob3ZlciwucGYtYy1idXR0b24ucGYtbS1ob3Zlcnt0ZXh0LWRlY29yYXRpb246bm9uZX0ucGYtYy1idXR0b246aG92ZXI6OmFmdGVyLC5wZi1jLWJ1dHRvbi5wZi1tLWhvdmVyOjphZnRlcnstLXBmLWMtYnV0dG9uLS1Cb3JkZXJXaWR0aDogdmFyKC0tcGYtYy1idXR0b24tLWhvdmVyLS1Cb3JkZXJXaWR0aCl9LnBmLWMtYnV0dG9uOmFjdGl2ZTo6YWZ0ZXIsLnBmLWMtYnV0dG9uLnBmLW0tYWN0aXZlOjphZnRlcnstLXBmLWMtYnV0dG9uLS1Cb3JkZXJXaWR0aDogdmFyKC0tcGYtYy1idXR0b24tLWFjdGl2ZS0tQm9yZGVyV2lkdGgpfS5wZi1jLWJ1dHRvbjpmb2N1czo6YWZ0ZXIsLnBmLWMtYnV0dG9uLnBmLW0tZm9jdXM6OmFmdGVyey0tcGYtYy1idXR0b24tLUJvcmRlcldpZHRoOiB2YXIoLS1wZi1jLWJ1dHRvbi0tZm9jdXMtLUJvcmRlcldpZHRoKX0ucGYtYy1idXR0b24ucGYtbS1ibG9ja3tkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMCV9LnBmLWMtYnV0dG9uLnBmLW0tcHJpbWFyeXtjb2xvcjp2YXIoLS1wZi1jLWJ1dHRvbi0tbS1wcmltYXJ5LS1Db2xvcik7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1wZi1jLWJ1dHRvbi0tbS1wcmltYXJ5LS1CYWNrZ3JvdW5kQ29sb3IpfS5wZi1jLWJ1dHRvbi5wZi1tLXByaW1hcnk6aG92ZXIsLnBmLWMtYnV0dG9uLnBmLW0tcHJpbWFyeS5wZi1tLWhvdmVyey0tcGYtYy1idXR0b24tLW0tcHJpbWFyeS0tQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLXByaW1hcnktLWhvdmVyLS1Db2xvcik7LS1wZi1jLWJ1dHRvbi0tbS1wcmltYXJ5LS1CYWNrZ3JvdW5kQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLXByaW1hcnktLWhvdmVyLS1CYWNrZ3JvdW5kQ29sb3IpfS5wZi1jLWJ1dHRvbi5wZi1tLXByaW1hcnk6YWN0aXZlLC5wZi1jLWJ1dHRvbi5wZi1tLXByaW1hcnkucGYtbS1hY3RpdmV7LS1wZi1jLWJ1dHRvbi0tbS1wcmltYXJ5LS1Db2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tcHJpbWFyeS0tYWN0aXZlLS1Db2xvcik7LS1wZi1jLWJ1dHRvbi0tbS1wcmltYXJ5LS1CYWNrZ3JvdW5kQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLXByaW1hcnktLWFjdGl2ZS0tQmFja2dyb3VuZENvbG9yKX0ucGYtYy1idXR0b24ucGYtbS1wcmltYXJ5OmZvY3VzLC5wZi1jLWJ1dHRvbi5wZi1tLXByaW1hcnkucGYtbS1mb2N1c3stLXBmLWMtYnV0dG9uLS1tLXByaW1hcnktLUNvbG9yOiB2YXIoLS1wZi1jLWJ1dHRvbi0tbS1wcmltYXJ5LS1mb2N1cy0tQ29sb3IpOy0tcGYtYy1idXR0b24tLW0tcHJpbWFyeS0tQmFja2dyb3VuZENvbG9yOiB2YXIoLS1wZi1jLWJ1dHRvbi0tbS1wcmltYXJ5LS1mb2N1cy0tQmFja2dyb3VuZENvbG9yKX0ucGYtYy1idXR0b24ucGYtbS1zZWNvbmRhcnl7Y29sb3I6dmFyKC0tcGYtYy1idXR0b24tLW0tc2Vjb25kYXJ5LS1Db2xvcik7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1wZi1jLWJ1dHRvbi0tbS1zZWNvbmRhcnktLUJhY2tncm91bmRDb2xvcil9LnBmLWMtYnV0dG9uLnBmLW0tc2Vjb25kYXJ5OjphZnRlcnstLXBmLWMtYnV0dG9uLS1Cb3JkZXJDb2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tc2Vjb25kYXJ5LS1Cb3JkZXJDb2xvcil9LnBmLWMtYnV0dG9uLnBmLW0tc2Vjb25kYXJ5OmhvdmVyLC5wZi1jLWJ1dHRvbi5wZi1tLXNlY29uZGFyeS5wZi1tLWhvdmVyey0tcGYtYy1idXR0b24tLW0tc2Vjb25kYXJ5LS1Db2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tc2Vjb25kYXJ5LS1ob3Zlci0tQ29sb3IpOy0tcGYtYy1idXR0b24tLW0tc2Vjb25kYXJ5LS1CYWNrZ3JvdW5kQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLXNlY29uZGFyeS0taG92ZXItLUJhY2tncm91bmRDb2xvcil9LnBmLWMtYnV0dG9uLnBmLW0tc2Vjb25kYXJ5OmhvdmVyOjphZnRlciwucGYtYy1idXR0b24ucGYtbS1zZWNvbmRhcnkucGYtbS1ob3Zlcjo6YWZ0ZXJ7LS1wZi1jLWJ1dHRvbi0tQm9yZGVyQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLXNlY29uZGFyeS0taG92ZXItLUJvcmRlckNvbG9yKX0ucGYtYy1idXR0b24ucGYtbS1zZWNvbmRhcnk6YWN0aXZlLC5wZi1jLWJ1dHRvbi5wZi1tLXNlY29uZGFyeS5wZi1tLWFjdGl2ZXstLXBmLWMtYnV0dG9uLS1tLXNlY29uZGFyeS0tQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLXNlY29uZGFyeS0tYWN0aXZlLS1Db2xvcik7LS1wZi1jLWJ1dHRvbi0tbS1zZWNvbmRhcnktLUJhY2tncm91bmRDb2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tc2Vjb25kYXJ5LS1hY3RpdmUtLUJhY2tncm91bmRDb2xvcil9LnBmLWMtYnV0dG9uLnBmLW0tc2Vjb25kYXJ5OmFjdGl2ZTo6YWZ0ZXIsLnBmLWMtYnV0dG9uLnBmLW0tc2Vjb25kYXJ5LnBmLW0tYWN0aXZlOjphZnRlcnstLXBmLWMtYnV0dG9uLS1Cb3JkZXJDb2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tc2Vjb25kYXJ5LS1hY3RpdmUtLUJvcmRlckNvbG9yKX0ucGYtYy1idXR0b24ucGYtbS1zZWNvbmRhcnk6Zm9jdXMsLnBmLWMtYnV0dG9uLnBmLW0tc2Vjb25kYXJ5LnBmLW0tZm9jdXN7LS1wZi1jLWJ1dHRvbi0tbS1zZWNvbmRhcnktLUNvbG9yOiB2YXIoLS1wZi1jLWJ1dHRvbi0tbS1zZWNvbmRhcnktLWZvY3VzLS1Db2xvcik7LS1wZi1jLWJ1dHRvbi0tbS1zZWNvbmRhcnktLUJhY2tncm91bmRDb2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tc2Vjb25kYXJ5LS1mb2N1cy0tQmFja2dyb3VuZENvbG9yKX0ucGYtYy1idXR0b24ucGYtbS1zZWNvbmRhcnk6Zm9jdXM6OmFmdGVyLC5wZi1jLWJ1dHRvbi5wZi1tLXNlY29uZGFyeS5wZi1tLWZvY3VzOjphZnRlcnstLXBmLWMtYnV0dG9uLS1Cb3JkZXJDb2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tc2Vjb25kYXJ5LS1mb2N1cy0tQm9yZGVyQ29sb3IpfS5wZi1jLWJ1dHRvbi5wZi1tLXRlcnRpYXJ5e2NvbG9yOnZhcigtLXBmLWMtYnV0dG9uLS1tLXRlcnRpYXJ5LS1Db2xvcik7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1wZi1jLWJ1dHRvbi0tbS10ZXJ0aWFyeS0tQmFja2dyb3VuZENvbG9yKX0ucGYtYy1idXR0b24ucGYtbS10ZXJ0aWFyeTo6YWZ0ZXJ7LS1wZi1jLWJ1dHRvbi0tQm9yZGVyQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLXRlcnRpYXJ5LS1Cb3JkZXJDb2xvcil9LnBmLWMtYnV0dG9uLnBmLW0tdGVydGlhcnk6aG92ZXIsLnBmLWMtYnV0dG9uLnBmLW0tdGVydGlhcnkucGYtbS1ob3ZlcnstLXBmLWMtYnV0dG9uLS1tLXRlcnRpYXJ5LS1Db2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tdGVydGlhcnktLWhvdmVyLS1Db2xvcik7LS1wZi1jLWJ1dHRvbi0tbS10ZXJ0aWFyeS0tQmFja2dyb3VuZENvbG9yOiB2YXIoLS1wZi1jLWJ1dHRvbi0tbS10ZXJ0aWFyeS0taG92ZXItLUJhY2tncm91bmRDb2xvcil9LnBmLWMtYnV0dG9uLnBmLW0tdGVydGlhcnk6aG92ZXI6OmFmdGVyLC5wZi1jLWJ1dHRvbi5wZi1tLXRlcnRpYXJ5LnBmLW0taG92ZXI6OmFmdGVyey0tcGYtYy1idXR0b24tLUJvcmRlckNvbG9yOiB2YXIoLS1wZi1jLWJ1dHRvbi0tbS10ZXJ0aWFyeS0taG92ZXItLUJvcmRlckNvbG9yKX0ucGYtYy1idXR0b24ucGYtbS10ZXJ0aWFyeTphY3RpdmUsLnBmLWMtYnV0dG9uLnBmLW0tdGVydGlhcnkucGYtbS1hY3RpdmV7LS1wZi1jLWJ1dHRvbi0tbS10ZXJ0aWFyeS0tQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLXRlcnRpYXJ5LS1hY3RpdmUtLUNvbG9yKTstLXBmLWMtYnV0dG9uLS1tLXRlcnRpYXJ5LS1CYWNrZ3JvdW5kQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLXRlcnRpYXJ5LS1hY3RpdmUtLUJhY2tncm91bmRDb2xvcil9LnBmLWMtYnV0dG9uLnBmLW0tdGVydGlhcnk6YWN0aXZlOjphZnRlciwucGYtYy1idXR0b24ucGYtbS10ZXJ0aWFyeS5wZi1tLWFjdGl2ZTo6YWZ0ZXJ7LS1wZi1jLWJ1dHRvbi0tQm9yZGVyQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLXRlcnRpYXJ5LS1hY3RpdmUtLUJvcmRlckNvbG9yKX0ucGYtYy1idXR0b24ucGYtbS10ZXJ0aWFyeTpmb2N1cywucGYtYy1idXR0b24ucGYtbS10ZXJ0aWFyeS5wZi1tLWZvY3Vzey0tcGYtYy1idXR0b24tLW0tdGVydGlhcnktLUNvbG9yOiB2YXIoLS1wZi1jLWJ1dHRvbi0tbS10ZXJ0aWFyeS0tZm9jdXMtLUNvbG9yKTstLXBmLWMtYnV0dG9uLS1tLXRlcnRpYXJ5LS1CYWNrZ3JvdW5kQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLXRlcnRpYXJ5LS1mb2N1cy0tQmFja2dyb3VuZENvbG9yKX0ucGYtYy1idXR0b24ucGYtbS10ZXJ0aWFyeTpmb2N1czo6YWZ0ZXIsLnBmLWMtYnV0dG9uLnBmLW0tdGVydGlhcnkucGYtbS1mb2N1czo6YWZ0ZXJ7LS1wZi1jLWJ1dHRvbi0tQm9yZGVyQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLXRlcnRpYXJ5LS1mb2N1cy0tQm9yZGVyQ29sb3IpfS5wZi1jLWJ1dHRvbi5wZi1tLWRhbmdlcntjb2xvcjp2YXIoLS1wZi1jLWJ1dHRvbi0tbS1kYW5nZXItLUNvbG9yKTtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXBmLWMtYnV0dG9uLS1tLWRhbmdlci0tQmFja2dyb3VuZENvbG9yKX0ucGYtYy1idXR0b24ucGYtbS1kYW5nZXI6aG92ZXIsLnBmLWMtYnV0dG9uLnBmLW0tZGFuZ2VyLnBmLW0taG92ZXJ7LS1wZi1jLWJ1dHRvbi0tbS1kYW5nZXItLUNvbG9yOiB2YXIoLS1wZi1jLWJ1dHRvbi0tbS1kYW5nZXItLWhvdmVyLS1Db2xvcik7LS1wZi1jLWJ1dHRvbi0tbS1kYW5nZXItLUJhY2tncm91bmRDb2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tZGFuZ2VyLS1ob3Zlci0tQmFja2dyb3VuZENvbG9yKX0ucGYtYy1idXR0b24ucGYtbS1kYW5nZXI6YWN0aXZlLC5wZi1jLWJ1dHRvbi5wZi1tLWRhbmdlci5wZi1tLWFjdGl2ZXstLXBmLWMtYnV0dG9uLS1tLWRhbmdlci0tQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLWRhbmdlci0tYWN0aXZlLS1Db2xvcik7LS1wZi1jLWJ1dHRvbi0tbS1kYW5nZXItLUJhY2tncm91bmRDb2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tZGFuZ2VyLS1hY3RpdmUtLUJhY2tncm91bmRDb2xvcil9LnBmLWMtYnV0dG9uLnBmLW0tZGFuZ2VyOmZvY3VzLC5wZi1jLWJ1dHRvbi5wZi1tLWRhbmdlci5wZi1tLWZvY3Vzey0tcGYtYy1idXR0b24tLW0tZGFuZ2VyLS1Db2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tZGFuZ2VyLS1mb2N1cy0tQ29sb3IpOy0tcGYtYy1idXR0b24tLW0tZGFuZ2VyLS1CYWNrZ3JvdW5kQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLWRhbmdlci0tZm9jdXMtLUJhY2tncm91bmRDb2xvcil9LnBmLWMtYnV0dG9uLnBmLW0tbGlua3tjb2xvcjp2YXIoLS1wZi1jLWJ1dHRvbi0tbS1saW5rLS1Db2xvcil9LnBmLWMtYnV0dG9uLnBmLW0tbGluazpub3QoLnBmLW0taW5saW5lKTpob3ZlciwucGYtYy1idXR0b24ucGYtbS1saW5rOm5vdCgucGYtbS1pbmxpbmUpLnBmLW0taG92ZXJ7LS1wZi1jLWJ1dHRvbi0tbS1saW5rLS1Db2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tbGluay0taG92ZXItLUNvbG9yKX0ucGYtYy1idXR0b24ucGYtbS1saW5rOm5vdCgucGYtbS1pbmxpbmUpOmFjdGl2ZSwucGYtYy1idXR0b24ucGYtbS1saW5rOm5vdCgucGYtbS1pbmxpbmUpLnBmLW0tYWN0aXZley0tcGYtYy1idXR0b24tLW0tbGluay0tQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLWxpbmstLWFjdGl2ZS0tQ29sb3IpfS5wZi1jLWJ1dHRvbi5wZi1tLWxpbms6bm90KC5wZi1tLWlubGluZSk6Zm9jdXMsLnBmLWMtYnV0dG9uLnBmLW0tbGluazpub3QoLnBmLW0taW5saW5lKS5wZi1tLWZvY3Vzey0tcGYtYy1idXR0b24tLW0tbGluay0tQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLWxpbmstLWZvY3VzLS1Db2xvcil9LnBmLWMtYnV0dG9uLnBmLW0tbGluazpkaXNhYmxlZCwucGYtYy1idXR0b24ucGYtbS1saW5rLnBmLW0tZGlzYWJsZWR7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1wZi1jLWJ1dHRvbi0tbS1saW5rLS1kaXNhYmxlZC0tQmFja2dyb3VuZENvbG9yKX0ucGYtYy1idXR0b24ucGYtbS1saW5rLnBmLW0taW5saW5le2Rpc3BsYXk6aW5saW5lO3BhZGRpbmc6MH0ucGYtYy1idXR0b24ucGYtbS1saW5rLnBmLW0taW5saW5lOmhvdmVyey0tcGYtYy1idXR0b24tLW0tbGluay0tQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLWxpbmstLW0taW5saW5lLS1ob3Zlci0tQ29sb3IpO3RleHQtZGVjb3JhdGlvbjp2YXIoLS1wZi1jLWJ1dHRvbi0tbS1saW5rLS1tLWlubGluZS0taG92ZXItLVRleHREZWNvcmF0aW9uKX0ucGYtYy1idXR0b24ucGYtbS1jb250cm9sOjphZnRlcnstLXBmLWMtYnV0dG9uLS1Cb3JkZXJXaWR0aDogdmFyKC0tcGYtYy1idXR0b24tLW0tY29udHJvbC0tYWZ0ZXItLUJvcmRlcldpZHRoKTstLXBmLWMtYnV0dG9uLS1Cb3JkZXJDb2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tY29udHJvbC0tYWZ0ZXItLUJvcmRlclRvcENvbG9yKSB2YXIoLS1wZi1jLWJ1dHRvbi0tbS1jb250cm9sLS1hZnRlci0tQm9yZGVyUmlnaHRDb2xvcikgdmFyKC0tcGYtYy1idXR0b24tLW0tY29udHJvbC0tYWZ0ZXItLUJvcmRlckJvdHRvbUNvbG9yKSB2YXIoLS1wZi1jLWJ1dHRvbi0tbS1jb250cm9sLS1hZnRlci0tQm9yZGVyTGVmdENvbG9yKTtib3JkZXItcmFkaXVzOmluaXRpYWx9LnBmLWMtYnV0dG9uLnBmLW0tY29udHJvbDpob3Zlcjo6YWZ0ZXIsLnBmLWMtYnV0dG9uLnBmLW0tY29udHJvbC5wZi1tLWhvdmVyOjphZnRlcnstLXBmLWMtYnV0dG9uLS1tLWNvbnRyb2wtLWFmdGVyLS1Cb3JkZXJCb3R0b21Db2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tY29udHJvbC0taG92ZXItLWFmdGVyLS1Cb3JkZXJCb3R0b21Db2xvcik7Ym9yZGVyLWJvdHRvbS13aWR0aDp2YXIoLS1wZi1jLWJ1dHRvbi0tbS1jb250cm9sLS1ob3Zlci0tYWZ0ZXItLUJvcmRlckJvdHRvbVdpZHRoKX0ucGYtYy1idXR0b24ucGYtbS1jb250cm9sOmFjdGl2ZTo6YWZ0ZXIsLnBmLWMtYnV0dG9uLnBmLW0tY29udHJvbC5wZi1tLWFjdGl2ZTo6YWZ0ZXJ7LS1wZi1jLWJ1dHRvbi0tbS1jb250cm9sLS1hZnRlci0tQm9yZGVyQm90dG9tQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLWNvbnRyb2wtLWFjdGl2ZS0tYWZ0ZXItLUJvcmRlckJvdHRvbUNvbG9yKTtib3JkZXItYm90dG9tLXdpZHRoOnZhcigtLXBmLWMtYnV0dG9uLS1tLWNvbnRyb2wtLWFjdGl2ZS0tYWZ0ZXItLUJvcmRlckJvdHRvbVdpZHRoKX0ucGYtYy1idXR0b24ucGYtbS1jb250cm9sOmZvY3VzOjphZnRlciwucGYtYy1idXR0b24ucGYtbS1jb250cm9sLnBmLW0tZm9jdXM6OmFmdGVyey0tcGYtYy1idXR0b24tLW0tY29udHJvbC0tYWZ0ZXItLUJvcmRlckJvdHRvbUNvbG9yOiB2YXIoLS1wZi1jLWJ1dHRvbi0tbS1jb250cm9sLS1mb2N1cy0tYWZ0ZXItLUJvcmRlckJvdHRvbUNvbG9yKTtib3JkZXItYm90dG9tLXdpZHRoOnZhcigtLXBmLWMtYnV0dG9uLS1tLWNvbnRyb2wtLWZvY3VzLS1hZnRlci0tQm9yZGVyQm90dG9tV2lkdGgpfS5wZi1jLWJ1dHRvbi5wZi1tLWNvbnRyb2wucGYtbS1leHBhbmRlZDo6YWZ0ZXJ7LS1wZi1jLWJ1dHRvbi0tbS1jb250cm9sLS1hZnRlci0tQm9yZGVyQm90dG9tQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1tLWNvbnRyb2wtLW0tZXhwYW5kZWQtLWFmdGVyLS1Cb3JkZXJCb3R0b21Db2xvcik7Ym9yZGVyLWJvdHRvbS13aWR0aDp2YXIoLS1wZi1jLWJ1dHRvbi0tbS1jb250cm9sLS1tLWV4cGFuZGVkLS1hZnRlci0tQm9yZGVyQm90dG9tV2lkdGgpfS5wZi1jLWJ1dHRvbi5wZi1tLWNvbnRyb2w6ZGlzYWJsZWQsLnBmLWMtYnV0dG9uLnBmLW0tY29udHJvbC5wZi1tLWRpc2FibGVke2JhY2tncm91bmQtY29sb3I6dmFyKC0tcGYtYy1idXR0b24tLW0tY29udHJvbC0tZGlzYWJsZWQtLUJhY2tncm91bmRDb2xvcil9LnBmLWMtYnV0dG9uLnBmLW0tY29udHJvbDpkaXNhYmxlZDo6YWZ0ZXIsLnBmLWMtYnV0dG9uLnBmLW0tY29udHJvbC5wZi1tLWRpc2FibGVkOjphZnRlcnstLXBmLWMtYnV0dG9uLS1tLWNvbnRyb2wtLWFmdGVyLS1Cb3JkZXJCb3R0b21Db2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tY29udHJvbC0tZGlzYWJsZWQtLWFmdGVyLS1Cb3JkZXJCb3R0b21Db2xvcil9LnBmLWMtYnV0dG9uOmRpc2FibGVkLC5wZi1jLWJ1dHRvbi5wZi1tLWRpc2FibGVke2NvbG9yOnZhcigtLXBmLWMtYnV0dG9uLS1kaXNhYmxlZC0tQ29sb3IpO3BvaW50ZXItZXZlbnRzOm5vbmU7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1wZi1jLWJ1dHRvbi0tZGlzYWJsZWQtLUJhY2tncm91bmRDb2xvcil9LnBmLWMtYnV0dG9uOmRpc2FibGVkOjphZnRlciwucGYtYy1idXR0b24ucGYtbS1kaXNhYmxlZDo6YWZ0ZXJ7LS1wZi1jLWJ1dHRvbi0tQm9yZGVyQ29sb3I6IHZhcigtLXBmLWMtYnV0dG9uLS1kaXNhYmxlZC0tQm9yZGVyQ29sb3IpfS5wZi1jLWJ1dHRvbi5wZi1tLXBsYWlue2NvbG9yOnZhcigtLXBmLWMtYnV0dG9uLS1tLXBsYWluLS1Db2xvcil9LnBmLWMtYnV0dG9uLnBmLW0tcGxhaW46aG92ZXIsLnBmLWMtYnV0dG9uLnBmLW0tcGxhaW4ucGYtbS1ob3ZlcnstLXBmLWMtYnV0dG9uLS1tLXBsYWluLS1Db2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tcGxhaW4tLWhvdmVyLS1Db2xvcil9LnBmLWMtYnV0dG9uLnBmLW0tcGxhaW46YWN0aXZlLC5wZi1jLWJ1dHRvbi5wZi1tLXBsYWluLnBmLW0tYWN0aXZley0tcGYtYy1idXR0b24tLW0tcGxhaW4tLUNvbG9yOiB2YXIoLS1wZi1jLWJ1dHRvbi0tbS1wbGFpbi0tYWN0aXZlLS1Db2xvcil9LnBmLWMtYnV0dG9uLnBmLW0tcGxhaW46Zm9jdXMsLnBmLWMtYnV0dG9uLnBmLW0tcGxhaW4ucGYtbS1mb2N1c3stLXBmLWMtYnV0dG9uLS1tLXBsYWluLS1Db2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tcGxhaW4tLWZvY3VzLS1Db2xvcil9LnBmLWMtYnV0dG9uLnBmLW0tcGxhaW46ZGlzYWJsZWQsLnBmLWMtYnV0dG9uLnBmLW0tcGxhaW4ucGYtbS1kaXNhYmxlZHstLXBmLWMtYnV0dG9uLS1tLXBsYWluLS1Db2xvcjogdmFyKC0tcGYtYy1idXR0b24tLW0tcGxhaW4tLWRpc2FibGVkLS1Db2xvcik7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1wZi1jLWJ1dHRvbi0tbS1wbGFpbi0tZGlzYWJsZWQtLUJhY2tncm91bmRDb2xvcil9LnBmLW0tcmVkaGF0LWZvbnQgLnBmLWMtYnV0dG9uey0tcGYtYy1idXR0b24tLUZvbnRXZWlnaHQ6IHZhcigtLXBmLWdsb2JhbC0tRm9udFdlaWdodC0tbm9ybWFsKX0ucGYtYy10aXRsZS5wZi1tLTN4bHtmb250LXNpemU6MjhweDtsaW5lLWhlaWdodDozNi40cHh9CgogICAgPC9zdHlsZT4KICA8L2hlYWQ+CgogIDxib2R5IGNsYXNzPSJwZi1tLXJlZGhhdC1mb250IiBkYXRhLW5ldy1nci1jLXMtY2hlY2stbG9hZGVkPSIxNC45OTguMCIgZGF0YS1nci1leHQtaW5zdGFsbGVkPSIiPgogICAgPGRpdiBjbGFzcz0icGYtYy1sb2dpbiI+CiAgICAgIDxkaXYgY2xhc3M9InBmLWMtbG9naW5fX2NvbnRhaW5lciI+CiAgICAgICAgPGhlYWRlciBjbGFzcz0icGYtYy1sb2dpbl9faGVhZGVyIj4KICAgICAgICAgIDxpbWcgc3JjPSJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBEOTRiV3dnZG1WeWMybHZiajBpTVM0d0lpQmxibU52WkdsdVp6MGlkWFJtTFRnaVB6NEtQQ0V0TFNCSFpXNWxjbUYwYjNJNklFRmtiMkpsSUVsc2JIVnpkSEpoZEc5eUlESTFMakl1TVN3Z1UxWkhJRVY0Y0c5eWRDQlFiSFZuTFVsdUlDNGdVMVpISUZabGNuTnBiMjQ2SURZdU1EQWdRblZwYkdRZ01Da2dJQzB0UGdvOGMzWm5JSFpsY25OcGIyNDlJakV1TVNJZ2FXUTlJa3h2WjI5eklpQjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIaHRiRzV6T25oc2FXNXJQU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh4T1RrNUwzaHNhVzVySWlCNFBTSXdjSGdpSUhrOUlqQndlQ0lLQ1NCM2FXUjBhRDBpTWprd0xqVndlQ0lnYUdWcFoyaDBQU0kwTnk0MmNIZ2lJSFpwWlhkQ2IzZzlJakFnTUNBeU9UQXVOU0EwTnk0MklpQnpkSGxzWlQwaVpXNWhZbXhsTFdKaFkydG5jbTkxYm1RNmJtVjNJREFnTUNBeU9UQXVOU0EwTnk0Mk95SWdlRzFzT25Od1lXTmxQU0p3Y21WelpYSjJaU0krQ2p4emRIbHNaU0IwZVhCbFBTSjBaWGgwTDJOemN5SStDZ2t1YzNRd2UyWnBiR3c2STBaR1JrWkdSanQ5Q2drdWMzUXhlMlpwYkd3NkkwVkZNREF3TUR0OUNqd3ZjM1I1YkdVK0NqeHdZWFJvSUdOc1lYTnpQU0p6ZERBaUlHUTlJazAxTWl3ME15NDFZeTAwTGpJc01DMDNMalV0TXk0ekxUY3VOUzAzTGpWek15NHpMVGN1TlN3M0xqVXROeTQxY3pjdU5pd3pMak1zTnk0MkxEY3VOVk0xTmk0ekxEUXpMalVzTlRJc05ETXVOWG9nVFRVeUxETXdMallLQ1dNdE15d3dMVFV1TXl3eUxqUXROUzR6TERVdU5YTXlMak1zTlM0MUxEVXVNeXcxTGpWak15d3dMRFV1TXkweUxqUXNOUzR6TFRVdU5WTTFOUzR4TERNd0xqWXNOVElzTXpBdU5ub2lMejRLUEhCaGRHZ2dZMnhoYzNNOUluTjBNQ0lnWkQwaVRUWXhMamNzTXpJdU9HZ3lkakZqTUM0NUxUQXVPQ3d5TFRFdU1pd3pMakl0TVM0eVl6TXNNQ3cxTGpNc01pNDBMRFV1TXl3MUxqUmpNQ3d6TFRJdU15dzFMalF0TlM0MExEVXVOR010TVM0eExEQXRNaTR6TFRBdU5DMHpMakl0TVhZMUxqSm9MVEl1TVFvSlREWXhMamNzTXpJdU9Ib2dUVFl6TGpjc016VXVOM1kwTGpoak1DNDNMREF1T0N3eExqZ3NNUzR5TERJdU9Td3hMakpqTWl3d0xETXVOaTB4TGpZc015NDJMVE11Tm1Nd0xUSXVNUzB4TGpZdE15NDJMVE11TmkwekxqWkROalV1TlN3ek5DNDBMRFkwTGpRc016UXVPU3cyTXk0M0xETTFMamQ2SWk4K0NqeHdZWFJvSUdOc1lYTnpQU0p6ZERBaUlHUTlJazAzT1M0ekxEUXpMalZqTFRNdU1Td3dMVFV1TlMweUxqUXROUzQxTFRVdU5XTXdMVE1zTWk0ekxUVXVOQ3cxTGpNdE5TNDBZekl1T1N3d0xEVXVNU3d5TGpRc05TNHhMRFV1TlhZd0xqWm9MVGd1TTJNd0xqTXNNUzQ0TERFdU9Dd3pMRE11Tml3ekNnbGpNU3d3TERFdU9TMHdMak1zTWk0M0xUQXVPV3d4TGpNc01TNHpRemd5TGpNc05ETXNPREF1T0N3ME15NDFMRGM1TGpNc05ETXVOWG9nVFRjMUxqa3NNemN1TW1nMkxqTmpMVEF1TXkweExqWXRNUzQyTFRJdU9DMHpMakV0TWk0NFF6YzNMalVzTXpRdU15dzNOaTR5TERNMUxqVXNOelV1T1N3ek55NHlDZ2w2SWk4K0NqeHdZWFJvSUdOc1lYTnpQU0p6ZERBaUlHUTlJazA0Tmk0eExETXlMamhvTWk0eGRqRXVNV013TGpndE1DNDRMREl0TVM0ekxETXVNaTB4TGpOak1pNDBMREFzTkM0eExERXVOeXcwTGpFc05DNHhkall1Tm1ndE1pNHhWak0zWXpBdE1TNDNMVEV0TWk0M0xUSXVOaTB5TGpjS0NXTXRNU3d3TFRJc01DNDFMVEl1Tml3eExqUjJOeTQyYUMweUxqRk1PRFl1TVN3ek1pNDRlaUl2UGdvOGNHRjBhQ0JqYkdGemN6MGljM1F3SWlCa1BTSk5PVGd1TWl3ek9TNDBZekV1Tml3eExqVXNNeTR5TERJdU15dzFMREl1TTJNeUxqRXNNQ3d6TGpVdE1Td3pMalV0TWk0MFl6QXRNUzR6TFRBdU9DMHhMamt0TWk0NUxUSXVNMnd0TWk0MExUQXVOR010TWk0M0xUQXVOQzAwTFRFdU55MDBMVE11T0FvSll6QXRNaTQxTERJdU1TMDBMaklzTlM0ekxUUXVNbU15TGpFc01DdzBMaklzTUM0M0xEVXVPQ3d5YkMweExqSXNNUzQzWXkweExqWXRNUzR5TFRNdU1TMHhMamd0TkM0M0xURXVPR010TVM0NUxEQXRNeTR4TERBdU9TMHpMakVzTWk0eVl6QXNNUzR5TERBdU55d3hMamNzTWk0MkxESXVNUW9KYkRJdU15d3dMalJqTXk0eExEQXVOU3cwTGpVc01TNDRMRFF1TlN3MFl6QXNNaTQzTFRJdU15dzBMalV0TlM0NExEUXVOV010TWk0ekxEQXROQzQyTFRBdU9TMDJMakl0TWk0MlREazRMaklzTXprdU5Ib2lMejRLUEhCaGRHZ2dZMnhoYzNNOUluTjBNQ0lnWkQwaVRURXhNQzQyTERJNExqaHNNaTR4TFRBdU5YWTFMalZqTUM0NExUQXVPQ3d5TFRFdU15d3pMakl0TVM0ell6SXVOQ3d3TERRdU1Td3hMamNzTkM0eExEUXVNWFkyTGpab0xUSXVNVll6TjJNd0xURXVOeTB4TFRJdU55MHlMall0TWk0M0NnbGpMVEVzTUMweUxEQXVOUzB5TGpZc01TNDBkamN1Tm1ndE1pNHhWakk0TGpoNklpOCtDanh3WVhSb0lHTnNZWE56UFNKemREQWlJR1E5SWsweE1qSXVNU3d5T1M0NFl6QXRNQzQzTERBdU5pMHhMak1zTVM0ekxURXVNMk13TERBc01Dd3dMREFzTUdNd0xqY3NNQ3d4TGpNc01DNDFMREV1TXl3eExqSmpNQ3d3TGpjdE1DNDFMREV1TXkweExqSXNNUzR6WXpBc01DMHdMakVzTUMwd0xqRXNNQW9KUXpFeU1pNDNMRE14TGpFc01USXlMakVzTXpBdU5Td3hNakl1TVN3eU9TNDRRekV5TWk0eExESTVMamdzTVRJeUxqRXNNamt1T0N3eE1qSXVNU3d5T1M0NGVpQk5NVEkwTGpRc05ETXVNMmd0TWk0eFZqTXlMamhvTWk0eFZqUXpMak42SWk4K0NqeHdZWFJvSUdOc1lYTnpQU0p6ZERBaUlHUTlJazB4TWpndU5Dd3pNaTQ0ZGkweExqWmpNQzB5TGpJc01TNHpMVE11TkN3ekxqWXRNeTQwWXpBdU5Td3dMREVzTUM0eExERXVOU3d3TGpKMk1TNDRZeTB3TGpRdE1DNHhMVEF1T1Mwd0xqSXRNUzR6TFRBdU1nb0pZeTB4TGpFc01DMHhMamNzTUM0MUxURXVOeXd4TGpaMk1TNDJhRE4yTVM0M2FDMHpkamd1T0dndE1pNHhkaTA0TGpoSU1USTJkaTB4TGpkSU1USTRMalI2SWk4K0NqeHdZWFJvSUdOc1lYTnpQU0p6ZERBaUlHUTlJazB4TXpZdU5pd3pOQzQxYUMweUxqSjJMVEV1TjJneUxqSjJMVEl1TjJ3eUxUQXVOWFl6TGpKb015NHhkakV1TjJndE15NHhkalV1TjJNd0xERXVNU3d3TGpRc01TNDFMREV1Tml3eExqVmpNQzQxTERBc01TMHdMakVzTVM0MUxUQXVNbll4TGpjS0NXTXRNQzQyTERBdU1pMHhMak1zTUM0ekxUSXNNQzR6WXkweUxqRXNNQzB6TGpFdE1TMHpMakV0TWk0NFRERXpOaTQyTERNMExqVjZJaTgrQ2p4d1lYUm9JR05zWVhOelBTSnpkREVpSUdROUlrMHlOUzR6TERFMkxqVmpNaTQxTERBc05pNHhMVEF1TlN3MkxqRXRNeTQxWXpBdE1DNHlMREF0TUM0MUxUQXVNUzB3TGpkc0xURXVOUzAyTGpSakxUQXVNeTB4TGpRdE1DNDJMVEl1TVMwekxqRXRNeTR6Q2dsakxURXVPUzB4TFRZdU1TMHlMall0Tnk0MExUSXVObU10TVM0eUxEQXRNUzQxTERFdU5TMHlMamtzTVM0MVl5MHhMak1zTUMweUxqTXRNUzR4TFRNdU5pMHhMakZqTFRFdU1pd3dMVElzTUM0NExUSXVOaXd5TGpWak1Dd3dMVEV1Tnl3MExqY3RNUzQ1TERVdU5Bb0pZekFzTUM0eExUQXVNU3d3TGpNc01Dd3dMalJET0M0MExERXdMalVzTVRVdU5pd3hOaTQxTERJMUxqTXNNVFl1TlNCTk16RXVPQ3d4TkM0ell6QXVNeXd4TGpZc01DNHpMREV1T0N3d0xqTXNNbU13TERJdU9DMHpMakVzTkM0ekxUY3VNeXcwTGpNS0NXTXRPUzR6TERBdE1UY3VOUzAxTGpVdE1UY3VOUzA1TGpGak1DMHdMalVzTUM0eExURXNNQzR6TFRFdU5VTTBMak1zTVRBdU15d3dMREV3TGprc01Dd3hOQzQzWXpBc05pNHpMREUwTGprc01UUXNNall1Tml3eE5HTTVMREFzTVRFdU15MDBMakVzTVRFdU15MDNMak1LQ1VNek55NDVMREU0TGpnc016VXVOeXd4Tml3ek1TNDRMREUwTGpNaUx6NEtQSEJoZEdnZ1pEMGlUVE14TGpnc01UUXVNbU13TGpNc01TNDJMREF1TXl3eExqZ3NNQzR6TERKak1Dd3lMamd0TXk0eExEUXVNeTAzTGpNc05DNHpZeTA1TGpNc01DMHhOeTQxTFRVdU5DMHhOeTQxTFRrdU1XTXdMVEF1TlN3d0xqRXRNU3d3TGpNdE1TNDFiREF1TnkweExqZ0tDV013TERBdU1TMHdMakVzTUM0ekxEQXNNQzQwWXpBc01TNDRMRGN1TWl3M0xqa3NNVFl1T1N3M0xqbGpNaTQxTERBc05pNHhMVEF1TlN3MkxqRXRNeTQxWXpBdE1DNHlMREF0TUM0MUxUQXVNUzB3TGpkTU16RXVPQ3d4TkM0eWVpSXZQZ284Y0dGMGFDQmpiR0Z6Y3owaWMzUXdJaUJrUFNKTk1URTFMak1zTVRndU5HTXdMREl1TkN3eExqUXNNeTQxTERRc015NDFZekF1T0N3d0xERXVOaTB3TGpFc01pNDBMVEF1TTNZdE1pNDNZeTB3TGpVc01DNHlMVEVzTUM0eUxURXVOU3d3TGpKakxURXVNU3d3TFRFdU5TMHdMak10TVM0MUxURXVNd29KZGkwMExqSm9NeTR4ZGkweUxqaG9MVE11TVZZM0xqRnNMVE11TkN3d0xqZDJNaTQ1YUMweUxqSjJNaTQ0YURJdU1rd3hNVFV1TXl3eE9DNDBlaUJOTVRBMExqZ3NNVGd1TkdNd0xUQXVOeXd3TGpjdE1TNHhMREV1T0MweExqRmpNQzQzTERBc01TNDBMREF1TVN3eUxEQXVNMVl4T1FvSll5MHdMallzTUM0MExURXVOQ3d3TGpVdE1pNHhMREF1TlVNeE1EVXVOQ3d4T1M0MkxERXdOQzQ0TERFNUxqRXNNVEEwTGpnc01UZ3VOQ0JOTVRBMUxqZ3NNakV1T1dNeExqSXNNQ3d5TGpJdE1DNHpMRE11TVMwd0xqbDJNQzQzYURNdU0zWXROeTR4WXpBdE1pNDNMVEV1T0MwMExqSXROQzQ1TFRRdU1nb0pZeTB4TGpjc01DMHpMalFzTUM0MExUVXVNaXd4TGpKc01TNHlMREl1TldNeExqTXRNQzQxTERJdU5DMHdMamtzTXk0MExUQXVPV014TGpRc01Dd3lMakVzTUM0MUxESXVNU3d4TGpkMk1DNDFZeTB3TGpndE1DNHlMVEV1Tnkwd0xqTXRNaTQxTFRBdU13b0pZeTB5TGpnc01DMDBMallzTVM0eUxUUXVOaXd6TGpORE1UQXhMamdzTWpBdU5Td3hNRE11TXl3eU1TNDVMREV3TlM0NExESXhMamtnVFRnM0xqUXNNakV1T0VnNU1WWXhObWcyZGpVdU4yZ3pMalpXTnk0eFNEazNkalV1Tm1ndE5sWTNMakZvTFRNdU5rdzROeTQwTERJeExqaDZDZ2tnVFRjekxqY3NNVFl1TW1Nd0xURXVOaXd4TGpNdE1pNDRMREl1T1MweUxqaGpNQzQ1TERBc01TNDNMREF1TXl3eUxqTXNNQzQ1ZGpNdU9XTXRNQzQyTERBdU5pMHhMalVzTUM0NUxUSXVNeXd3TGpsRE56VXNNVGtzTnpNdU55d3hOeTQ0TERjekxqY3NNVFl1TWlCTk56a3NNakV1TjJnekxqUldOaTQwQ2dsTU56a3NOeTR4ZGpRdU1tTXRNQzQ1TFRBdU5TMHhMamd0TUM0M0xUSXVPQzB3TGpkakxUTXVNaXd3TFRVdU9Dd3lMalV0TlM0NExEVXVOMk13TERNdU1Td3lMalFzTlM0M0xEVXVOU3cxTGpkak1Dd3dMREF1TVN3d0xEQXVNU3d3WXpFdU1Td3dMREl1TVMwd0xqTXNNeTB4VmpJeExqZDZDZ2tnVFRZekxqWXNNVE11TW1NeExqRXNNQ3d5TERBdU55d3lMak1zTVM0NGFDMDBMalpETmpFdU55d3hNeTQ1TERZeUxqVXNNVE11TWl3Mk15NDJMREV6TGpJZ1RUVTNMamtzTVRZdU1tTXdMRE11TWl3eUxqWXNOUzQzTERZc05TNDNZekV1T1N3d0xETXVNaTB3TGpVc05DNDJMVEV1TjJ3dE1pNHlMVElLQ1dNdE1DNDFMREF1TlMweExqTXNNQzQ0TFRJdU1pd3dMamhqTFRFdU1pd3dMVEl1TXkwd0xqY3RNaTQzTFRFdU9HZzNMamwyTFRBdU9HTXdMVE11TlMweUxqUXROaTR4TFRVdU5pMDJMakZqTFRNdU1Td3dMVFV1Tnl3eUxqVXROUzQ0TERVdU5nb0pRelUzTGprc01UWXVNU3cxTnk0NUxERTJMaklzTlRjdU9Td3hOaTR5SUUwMU1pNHhMREV3TGpKak1TNHlMREFzTVM0NUxEQXVPQ3d4TGprc01TNDNZekFzTUM0NUxUQXVOeXd4TGpjdE1TNDVMREV1TjJndE15NDJkaTB6TGpOSU5USXVNWG9nVFRRMExqa3NNakV1T0dnekxqWjJMVFV1TTJneUxqY0tDV3d5TGpnc05TNHphRFJzTFRNdU1pMDFMamxqTVM0M0xUQXVOeXd5TGpndE1pNHpMREl1T0MwMExqRmpNQzB5TGpZdE1pNHhMVFF1TnkwMUxqSXROQzQzYUMwM0xqVk1ORFF1T1N3eU1TNDRlaUl2UGdvOFp6NEtDVHh3WVhSb0lHTnNZWE56UFNKemREQWlJR1E5SWsweE5EWXVOaXcwTUM0NGJERXVNUzB4TGpGak1DNDNMREF1T0N3eExqVXNNUzQwTERJdU5Dd3hMamhqTUM0NExEQXVOQ3d4TGpjc01DNDJMREl1Tnl3d0xqWmpNUzR4TERBc01pNHhMVEF1TXl3eUxqZ3RNQzQ0Q2drSll6QXVOeTB3TGpVc01TNHhMVEV1TWl3eExqRXRNbU13TFRBdU55MHdMak10TVM0ekxUQXVPQzB4TGpkakxUQXVOUzB3TGpRdE1TNDBMVEF1TnkweUxqWXRNQzQ1YkMweUxqRXRNQzR6WXkweExqUXRNQzR5TFRJdU5DMHdMall0TXk0eExURXVNbU10TUM0M0xUQXVOaTB4TFRFdU5DMHhMVEl1TkFvSkNXTXdMVEV1TWl3d0xqVXRNaTR5TERFdU5DMHlMamxqTUM0NUxUQXVOeXd5TGpJdE1TNHhMRE11TnkweExqRmpNU3d3TERJc01DNHlMRE1zTUM0MVl6RXNNQzR6TERFdU9Td3dMamdzTWk0M0xERXVOR3d0TUM0NUxERXVNbU10TUM0NExUQXVOaTB4TGpZdE1TMHlMalF0TVM0ekNna0pZeTB3TGpndE1DNHpMVEV1Tmkwd0xqVXRNaTQxTFRBdU5XTXRNU3d3TFRFdU9Td3dMakl0TWk0MUxEQXVOMk10TUM0MkxEQXVOUzB4TERFdU1TMHhMREV1T0dNd0xEQXVOeXd3TGpJc01TNHlMREF1Tnl3eExqWmpNQzQxTERBdU5Dd3hMaklzTUM0MkxESXVNeXd3TGpoc01pNHhMREF1TXdvSkNXTXhMallzTUM0ekxESXVOeXd3TGpjc015NDBMREV1TTJNd0xqY3NNQzQyTERFdU1Td3hMalVzTVM0eExESXVObU13TERBdU5pMHdMakVzTVM0eUxUQXVOQ3d4TGpkakxUQXVNeXd3TGpVdE1DNDJMREV0TVM0eExERXVOR010TUM0MUxEQXVOQzB4TGpFc01DNDNMVEV1T0N3d0xqa0tDUWxqTFRBdU55d3dMakl0TVM0MExEQXVNeTB5TGpJc01DNHpZeTB4TGpFc01DMHlMakl0TUM0eUxUTXVNeTB3TGpkRE1UUTRMalFzTkRJdU5Dd3hORGN1TkN3ME1TNDNMREUwTmk0MkxEUXdMamg2SWk4K0NnazhjR0YwYUNCamJHRnpjejBpYzNRd0lpQmtQU0pOTVRZNUxqRXNOREl1TW1NdE1DNDJMREF1TkMweExqSXNNQzQzTFRFdU9Dd3hZeTB3TGpZc01DNHlMVEV1TXl3d0xqTXRNaTR4TERBdU0yTXRNQzQzTERBdE1TNDBMVEF1TVMweUxqRXRNQzQwQ2drSll5MHdMamN0TUM0ekxURXVNaTB3TGpjdE1TNDNMVEV1TVdNdE1DNDFMVEF1TlMwd0xqa3RNUzR4TFRFdU1TMHhMamRqTFRBdU15MHdMamN0TUM0MExURXVOQzB3TGpRdE1pNHhZekF0TUM0M0xEQXVNUzB4TGpRc01DNDBMVEl1TVdNd0xqTXRNQzQyTERBdU5pMHhMaklzTVM0eExURXVOd29KQ1dNd0xqVXRNQzQxTERFdE1DNDVMREV1TmkweExqRmpNQzQyTFRBdU15d3hMak10TUM0MExESXRNQzQwWXpBdU55d3dMREV1TXl3d0xqRXNNUzQ1TERBdU5HTXdMallzTUM0ekxERXVNU3d3TGpjc01TNDJMREV1TVdNd0xqUXNNQzQxTERBdU9Dd3hMREVzTVM0M0Nna0pZekF1TXl3d0xqWXNNQzQwTERFdU15d3dMalFzTWk0eGRqQXVOV2d0T0M0MVl6QXVNU3d4TERBdU5Td3hMamtzTVM0ekxESXVOV013TGpjc01DNDNMREV1Tml3eExESXVOaXd4WXpBdU5Td3dMREV1TVMwd0xqRXNNUzQyTFRBdU1tTXdMalV0TUM0eUxEQXVPUzB3TGpRc01TNHpMVEF1TndvSkNVd3hOamt1TVN3ME1pNHllaUJOTVRZMUxETTBMakZqTFRBdU9Td3dMVEV1Tnl3d0xqTXRNaTR6TERBdU9XTXRNQzQzTERBdU5pMHhMakVzTVM0MExURXVNaXd5TGpOb05pNDVZeTB3TGpFdE1DNDVMVEF1TlMweExqY3RNUzR5TFRJdU13b0pDVU14TmpZdU5pd3pOQzQwTERFMk5TNDRMRE0wTGpFc01UWTFMRE0wTGpGNklpOCtDZ2s4Y0dGMGFDQmpiR0Z6Y3owaWMzUXdJaUJrUFNKTk1UY3lMRFF6TGpOV016SXVPV2d4TGpWMk1TNDFZekF1TXkwd0xqVXNNQzQzTFRFc01TNHlMVEV1TTJNd0xqVXRNQzR6TERFdU1TMHdMalFzTVM0M0xUQXVOR013TGpJc01Dd3dMalFzTUN3d0xqVXNNQW9KQ1dNd0xqSXNNQ3d3TGpNc01DNHhMREF1TlN3d0xqRjJNUzQwWXkwd0xqSXRNQzR4TFRBdU5DMHdMakV0TUM0MUxUQXVNV010TUM0eUxEQXRNQzQwTFRBdU1TMHdMalV0TUM0eFl5MHdMallzTUMweExqSXNNQzR5TFRFdU55d3dMalZqTFRBdU5Td3dMalF0TUM0NUxEQXVPUzB4TGpFc01TNDJkamN1TVFvSkNVZ3hOeko2SWk4K0NnazhjR0YwYUNCamJHRnpjejBpYzNRd0lpQmtQU0pOTVRneUxqa3NORE11TTJ3dE5DNDFMVEV3TGpSb01TNDNiRE11TlN3NExqUnNNeTQxTFRndU5HZ3hMalpzTFRRdU5Td3hNQzQwU0RFNE1pNDVlaUl2UGdvSlBIQmhkR2dnWTJ4aGMzTTlJbk4wTUNJZ1pEMGlUVEU1TVN3ek1DNDVZeTB3TGpNc01DMHdMalV0TUM0eExUQXVOeTB3TGpOakxUQXVNaTB3TGpJdE1DNHpMVEF1TkMwd0xqTXRNQzQzWXpBdE1DNHpMREF1TVMwd0xqVXNNQzR6TFRBdU4yTXdMakl0TUM0eUxEQXVOQzB3TGpNc01DNDNMVEF1TXdvSkNXTXdMak1zTUN3d0xqVXNNQzR4TERBdU55d3dMak5qTUM0eUxEQXVNaXd3TGpNc01DNDBMREF1TXl3d0xqZGpNQ3d3TGpNdE1DNHhMREF1TlMwd0xqTXNNQzQzUXpFNU1TNDFMRE13TGpnc01Ua3hMak1zTXpBdU9Td3hPVEVzTXpBdU9Yb2dUVEU1TVM0NExETXlMamwyTVRBdU5HZ3RNUzQxQ2drSlZqTXlMamxJTVRreExqaDZJaTgrQ2drOGNHRjBhQ0JqYkdGemN6MGljM1F3SWlCa1BTSk5NVGs1TGpJc05ESXVNV013TGpZc01Dd3hMakV0TUM0eExERXVOaTB3TGpOak1DNDFMVEF1TWl3eExUQXVOU3d4TGpRdE1Xd3hMREZqTFRBdU5pd3dMalV0TVM0eUxEQXVPUzB4TGprc01TNHlDZ2tKWXkwd0xqY3NNQzR6TFRFdU5Dd3dMalF0TWk0eUxEQXVOR010TUM0M0xEQXRNUzQwTFRBdU1TMHlMakV0TUM0MFl5MHdMall0TUM0ekxURXVNaTB3TGpjdE1TNDNMVEV1TVdNdE1DNDFMVEF1TlMwd0xqZ3RNUzR4TFRFdU1TMHhMamRqTFRBdU15MHdMamN0TUM0MExURXVOQzB3TGpRdE1pNHhDZ2tKWXpBdE1DNDNMREF1TVMweExqUXNNQzQwTFRJdU1XTXdMak10TUM0M0xEQXVOaTB4TGpJc01TNHhMVEV1TjJNd0xqVXRNQzQxTERFdE1DNDVMREV1TnkweExqRmpNQzQyTFRBdU15d3hMak10TUM0MExESXVNUzB3TGpSak1DNDNMREFzTVM0MUxEQXVNU3d5TGpJc01DNDBDZ2tKWXpBdU55d3dMak1zTVM0ekxEQXVOeXd4TGprc01TNHliQzB4TERFdU1XTXRNQzQwTFRBdU5DMHdMamt0TUM0NExURXVOQzB4WXkwd0xqVXRNQzR5TFRFdU1TMHdMalF0TVM0MkxUQXVOR010TUM0MUxEQXRNU3d3TGpFdE1TNDFMREF1TTJNdE1DNDFMREF1TWkwd0xqa3NNQzQxTFRFdU1pd3dMamdLQ1FsakxUQXVNeXd3TGpRdE1DNDJMREF1T0Mwd0xqZ3NNUzR6WXkwd0xqSXNNQzQxTFRBdU15d3hMVEF1TXl3eExqWmpNQ3d3TGpZc01DNHhMREV1TVN3d0xqTXNNUzQyWXpBdU1pd3dMalVzTUM0MUxEQXVPU3d3TGpnc01TNHpZekF1TXl3d0xqUXNNQzQzTERBdU5pd3hMaklzTUM0NENna0pRekU1T0M0eUxEUXlMREU1T0M0M0xEUXlMakVzTVRrNUxqSXNOREl1TVhvaUx6NEtDVHh3WVhSb0lHTnNZWE56UFNKemREQWlJR1E5SWsweU1UTXVNeXcwTWk0eVl5MHdMallzTUM0MExURXVNaXd3TGpjdE1TNDRMREZqTFRBdU5pd3dMakl0TVM0ekxEQXVNeTB5TGpFc01DNHpZeTB3TGpjc01DMHhMalF0TUM0eExUSXVNUzB3TGpRS0NRbGpMVEF1Tnkwd0xqTXRNUzR5TFRBdU55MHhMamN0TVM0eFl5MHdMalV0TUM0MUxUQXVPUzB4TGpFdE1TNHhMVEV1TjJNdE1DNHpMVEF1Tnkwd0xqUXRNUzQwTFRBdU5DMHlMakZqTUMwd0xqY3NNQzR4TFRFdU5Dd3dMalF0TWk0eFl6QXVNeTB3TGpZc01DNDJMVEV1TWl3eExqRXRNUzQzQ2drSll6QXVOUzB3TGpVc01TMHdMamtzTVM0MkxURXVNV013TGpZdE1DNHpMREV1TXkwd0xqUXNNaTB3TGpSak1DNDNMREFzTVM0ekxEQXVNU3d4TGprc01DNDBZekF1Tml3d0xqTXNNUzR4TERBdU55d3hMallzTVM0eFl6QXVOQ3d3TGpVc01DNDRMREVzTVN3eExqY0tDUWxqTUM0ekxEQXVOaXd3TGpRc01TNHpMREF1TkN3eUxqRjJNQzQxYUMwNExqVmpNQzR4TERFc01DNDFMREV1T1N3eExqTXNNaTQxWXpBdU55d3dMamNzTVM0MkxERXNNaTQyTERGak1DNDFMREFzTVM0eExUQXVNU3d4TGpZdE1DNHlZekF1TlMwd0xqSXNNQzQ1TFRBdU5Dd3hMak10TUM0M0Nna0pUREl4TXk0ekxEUXlMako2SUUweU1Ea3VNaXd6TkM0eFl5MHdMamtzTUMweExqY3NNQzR6TFRJdU15d3dMamxqTFRBdU55d3dMall0TVM0eExERXVOQzB4TGpJc01pNHphRFl1T1dNdE1DNHhMVEF1T1Mwd0xqVXRNUzQzTFRFdU1pMHlMak1LQ1FsRE1qRXdMamdzTXpRdU5Dd3lNVEFzTXpRdU1Td3lNRGt1TWl3ek5DNHhlaUl2UGdvSlBIQmhkR2dnWTJ4aGMzTTlJbk4wTUNJZ1pEMGlUVEl5TUM0eUxETTRMakZqTUMwd0xqY3NNQzR4TFRFdU5Dd3dMalF0TWk0eFl6QXVNeTB3TGpjc01DNDNMVEV1TWl3eExqRXRNUzQzWXpBdU5TMHdMalVzTVMwd0xqa3NNUzQzTFRFdU1XTXdMall0TUM0ekxERXVNeTB3TGpRc01pNHhMVEF1TkFvSkNXTXdMamNzTUN3eExqUXNNQzR4TERJdU1Td3dMalJqTUM0MkxEQXVNeXd4TGpJc01DNDNMREV1Tnl3eExqRmpNQzQxTERBdU5Td3dMamtzTVM0eExERXVNU3d4TGpkak1DNHpMREF1Tnl3d0xqUXNNUzQwTERBdU5Dd3lMakZqTUN3d0xqZ3RNQzR4TERFdU5TMHdMalFzTWk0eENna0pZeTB3TGpNc01DNDNMVEF1Tnl3eExqSXRNUzR4TERFdU4yTXRNQzQxTERBdU5TMHhMREF1T1MweExqY3NNUzR4WXkwd0xqWXNNQzR6TFRFdU15d3dMalF0TWk0eExEQXVOR010TUM0M0xEQXRNUzQwTFRBdU1TMHlMakV0TUM0MFl5MHdMall0TUM0ekxURXVNaTB3TGpjdE1TNDNMVEV1TVFvSkNXTXRNQzQxTFRBdU5TMHdMamt0TVM0eExURXVNUzB4TGpkRE1qSXdMalFzTXprdU5pd3lNakF1TWl3ek9DNDVMREl5TUM0eUxETTRMakY2SUUweU1qVXVOU3cwTWk0eFl6QXVOU3d3TERFdE1DNHhMREV1TlMwd0xqTmpNQzQxTFRBdU1pd3dMamt0TUM0MUxERXVNaTB3TGprS0NRbGpNQzR6TFRBdU5Dd3dMall0TUM0NExEQXVPQzB4TGpOak1DNHlMVEF1TlN3d0xqTXRNU3d3TGpNdE1TNDJZekF0TUM0MkxUQXVNUzB4TGpFdE1DNHpMVEV1Tm1NdE1DNHlMVEF1TlMwd0xqVXRNQzQ1TFRBdU9DMHhMak5qTFRBdU15MHdMalF0TUM0M0xUQXVOaTB4TGpJdE1DNDRDZ2tKWXkwd0xqVXRNQzR5TFRFdE1DNHpMVEV1TlMwd0xqTmpMVEF1TlN3d0xURXNNQzR4TFRFdU5Td3dMak5qTFRBdU5Td3dMakl0TUM0NUxEQXVOUzB4TGpJc01DNDRZeTB3TGpNc01DNDBMVEF1Tml3d0xqZ3RNQzQ0TERFdU0yTXRNQzR5TERBdU5TMHdMak1zTVMwd0xqTXNNUzQyQ2drSll6QXNNQzQyTERBdU1Td3hMakVzTUM0ekxERXVObU13TGpJc01DNDFMREF1TlN3d0xqa3NNQzQ0TERFdU0yTXdMak1zTUM0MExEQXVOeXd3TGpjc01TNHlMREF1T1VNeU1qUXVOU3cwTWl3eU1qVXNOREl1TVN3eU1qVXVOU3cwTWk0eGVpSXZQZ29KUEhCaGRHZ2dZMnhoYzNNOUluTjBNQ0lnWkQwaVRUSXpNeXcwTXk0elZqTXlMamxvTVM0MWRqRXVNbU13TGpRdE1DNDFMREF1T1Mwd0xqZ3NNUzQwTFRFdU1XTXdMall0TUM0eUxERXVNaTB3TGpRc01TNDRMVEF1TkdNeExqSXNNQ3d5TGpFc01DNDBMREl1T1N3eExqRUtDUWxqTUM0M0xEQXVOeXd4TGpFc01TNDNMREV1TVN3eUxqbDJOaTQyYUMweExqVjJMVFl1TTJNd0xUQXVPUzB3TGpNdE1TNDJMVEF1T0MweUxqSmpMVEF1TlMwd0xqVXRNUzR5TFRBdU9DMHlMakV0TUM0NFl5MHdMallzTUMweExqSXNNQzR4TFRFdU55d3dMalFLQ1FsakxUQXVOU3d3TGpNdE1DNDVMREF1TnkweExqSXNNUzR5ZGpjdU5rZ3lNek42SWk4K0NnazhjR0YwYUNCamJHRnpjejBpYzNRd0lpQmtQU0pOTWpRM0xqVXNORE11TTJ3MkxURTBMalZvTVM0NWJEVXVPU3d4TkM0MWFDMHhMamRzTFRFdU9DMDBMalpJTWpVeGJDMHhMamdzTkM0MlNESTBOeTQxZWlCTk1qVXhMallzTXpjdU5HZzFMamRzTFRJdU9DMDNMakZNTWpVeExqWXNNemN1TkhvaUx6NEtDVHh3WVhSb0lHTnNZWE56UFNKemREQWlJR1E5SWsweU5qWXNORE11TTJndE1TNDJiQzB6TGpFdE1UUXVOV2d4TGpac01pNDFMREV5YkRNdU5pMHhNbWd4TGpac015NDJMREV4TGpsc01pNDFMVEV4TGpsb01TNDJUREkzTlN3ME15NHphQzB4TGpaTU1qWTVMamNzTXpGTU1qWTJMRFF6TGpONklpOCtDZ2s4Y0dGMGFDQmpiR0Z6Y3owaWMzUXdJaUJrUFNKTk1qYzRMamtzTkRBdU9Hd3hMakV0TVM0eFl6QXVOeXd3TGpnc01TNDFMREV1TkN3eUxqUXNNUzQ0WXpBdU9Dd3dMalFzTVM0M0xEQXVOaXd5TGpjc01DNDJZekV1TVN3d0xESXVNUzB3TGpNc01pNDRMVEF1T0FvSkNXTXdMamN0TUM0MUxERXVNUzB4TGpJc01TNHhMVEpqTUMwd0xqY3RNQzR6TFRFdU15MHdMamd0TVM0M1l5MHdMalV0TUM0MExURXVOQzB3TGpjdE1pNDJMVEF1T1d3dE1pNHhMVEF1TTJNdE1TNDBMVEF1TWkweUxqUXRNQzQyTFRNdU1TMHhMakpqTFRBdU55MHdMall0TVMweExqUXRNUzB5TGpRS0NRbGpNQzB4TGpJc01DNDFMVEl1TWl3eExqUXRNaTQ1WXpBdU9TMHdMamNzTWk0eUxURXVNU3d6TGpjdE1TNHhZekVzTUN3eUxEQXVNaXd6TERBdU5XTXhMREF1TXl3eExqa3NNQzQ0TERJdU55d3hMalJzTFRBdU9Td3hMakpqTFRBdU9DMHdMall0TVM0MkxURXRNaTQwTFRFdU13b0pDV010TUM0NExUQXVNeTB4TGpZdE1DNDFMVEl1TlMwd0xqVmpMVEVzTUMweExqa3NNQzR5TFRJdU5Td3dMamRqTFRBdU5pd3dMalV0TVN3eExqRXRNU3d4TGpoak1Dd3dMamNzTUM0eUxERXVNaXd3TGpjc01TNDJZekF1TlN3d0xqUXNNUzR5TERBdU5pd3lMak1zTUM0NGJESXVNU3d3TGpNS0NRbGpNUzQyTERBdU15d3lMamNzTUM0M0xETXVOQ3d4TGpOak1DNDNMREF1Tml3eExqRXNNUzQxTERFdU1Td3lMalpqTUN3d0xqWXRNQzR4TERFdU1pMHdMalFzTVM0M1l5MHdMak1zTUM0MUxUQXVOaXd4TFRFdU1Td3hMalJqTFRBdU5Td3dMalF0TVM0eExEQXVOeTB4TGpnc01DNDVDZ2tKWXkwd0xqY3NNQzR5TFRFdU5Dd3dMak10TWk0eUxEQXVNMk10TVM0eExEQXRNaTR5TFRBdU1pMHpMak10TUM0M1F6STRNQzQyTERReUxqUXNNamM1TGpZc05ERXVOeXd5TnpndU9TdzBNQzQ0ZWlJdlBnbzhMMmMrQ2p3dmMzWm5QZ289IiBhbHQ9IlJlZCBIYXQgT3BlblNoaWZ0IFNlcnZpY2Ugb24gQVdTIGxvZ28iIGNsYXNzPSJwZi1jLWJyYW5kIj4KCiAgICAgICAgPC9oZWFkZXI+CiAgICAgICAgPG1haW4gY2xhc3M9InBmLWMtbG9naW5fX21haW4iPgogICAgICAgICAgPGhlYWRlciBjbGFzcz0icGYtYy1sb2dpbl9fbWFpbi1oZWFkZXIiPgogICAgICAgICAgICA8aDEgY2xhc3M9InBmLWMtdGl0bGUgcGYtbS0zeGwiPkxvZyBpbiB0byB5b3VyIGFjY291bnQ8L2gxPgogICAgICAgICAgPC9oZWFkZXI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJwZi1jLWxvZ2luX19tYWluLWJvZHkiPgogICAgICAgICAgICA8Zm9ybSBjbGFzcz0icGYtYy1mb3JtIiByb2xlPSJmb3JtIiBhY3Rpb249Int7IC5BY3Rpb24gfX0iIG1ldGhvZD0iUE9TVCI+CiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ie3sgLk5hbWVzLlRoZW4gfX0iIHZhbHVlPSJ7eyAuVmFsdWVzLlRoZW4gfX0iPgogICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9Int7IC5OYW1lcy5DU1JGIH19IiB2YWx1ZT0ie3sgLlZhbHVlcy5DU1JGIH19Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlcnJvci1wbGFjZWhvbGRlciI+CiAgICAgICAgICAgICAgICB7eyBpZiAuRXJyb3IgfX0KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJwZi1jLWZvcm1fX2hlbHBlci10ZXh0IHBmLW0tZXJyb3IiPgogICAgICAgICAgICAgICAgICA8c3ZnIHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjotMC4xMjVlbSIgZmlsbD0iY3VycmVudENvbG9yIiBoZWlnaHQ9IjFlbSIgd2lkdGg9IjFlbSIgdmlld0JveD0iMCAwIDUxMiA1MTIiIGFyaWEtaGlkZGVuPSJ0cnVlIiByb2xlPSJpbWciIGNsYXNzPSJwZi1tLWVycm9yX19pY29uIj4KICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPSJNNTA0IDI1NmMwIDEzNi45OTctMTExLjA0MyAyNDgtMjQ4IDI0OFM4IDM5Mi45OTcgOCAyNTZDOCAxMTkuMDgzIDExOS4wNDMgOCAyNTYgOHMyNDggMTExLjA4MyAyNDggMjQ4em0tMjQ4IDUwYy0yNS40MDUgMC00NiAyMC41OTUtNDYgNDZzMjAuNTk1IDQ2IDQ2IDQ2IDQ2LTIwLjU5NSA0Ni00Ni0yMC41OTUtNDYtNDYtNDZ6bS00My42NzMtMTY1LjM0Nmw3LjQxOCAxMzZjLjM0NyA2LjM2NCA1LjYwOSAxMS4zNDYgMTEuOTgyIDExLjM0Nmg0OC41NDZjNi4zNzMgMCAxMS42MzUtNC45ODIgMTEuOTgyLTExLjM0Nmw3LjQxOC0xMzZjLjM3NS02Ljg3NC01LjA5OC0xMi42NTQtMTEuOTgyLTEyLjY1NGgtNjMuMzgzYy02Ljg4NCAwLTEyLjM1NiA1Ljc4LTExLjk4MSAxMi42NTR6IiB0cmFuc2Zvcm09IiI+PC9wYXRoPgogICAgICAgICAgICAgICAgICA8L3N2Zz4KICAgICAgICAgICAgICAgICAge3sgLkVycm9yIH19CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICB7eyBlbmQgfX0KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwZi1jLWZvcm1fX2dyb3VwIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icGYtYy1mb3JtX19sYWJlbCIgZm9yPSJpbnB1dFVzZXJuYW1lIj4KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBmLWMtZm9ybV9fbGFiZWwtdGV4dCI+VXNlcm5hbWU8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwZi1jLWZvcm1fX2xhYmVsLXJlcXVpcmVkIiBhcmlhLWhpZGRlbj0idHJ1ZSI+Kjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9InBmLWMtZm9ybS1jb250cm9sIiBpZD0iaW5wdXRVc2VybmFtZSIgcGxhY2Vob2xkZXI9IiIgdGFiaW5kZXg9IjEiIGF1dG9mb2N1cz0iYXV0b2ZvY3VzIiBuYW1lPSJ7eyAuTmFtZXMuVXNlcm5hbWUgfX0iIHZhbHVlPSJ7eyAuVmFsdWVzLlVzZXJuYW1lIH19Ij4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwZi1jLWZvcm1fX2dyb3VwIj4KICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0icGYtYy1mb3JtX19sYWJlbCIgZm9yPSJpbnB1dFBhc3N3b3JkIj4KICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBmLWMtZm9ybV9fbGFiZWwtdGV4dCI+UGFzc3dvcmQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwZi1jLWZvcm1fX2xhYmVsLXJlcXVpcmVkIiBhcmlhLWhpZGRlbj0idHJ1ZSI+Kjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvbGFiZWw+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGNsYXNzPSJwZi1jLWZvcm0tY29udHJvbCIgaWQ9ImlucHV0UGFzc3dvcmQiIHBsYWNlaG9sZGVyPSIiIHRhYmluZGV4PSIyIiBuYW1lPSJ7eyAuTmFtZXMuUGFzc3dvcmQgfX0iIHZhbHVlPSIiPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBmLWMtZm9ybV9fZ3JvdXAgcGYtbS1hY3Rpb24iPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0icGYtYy1idXR0b24gcGYtbS1wcmltYXJ5IHBmLW0tYmxvY2siIHR5cGU9InN1Ym1pdCIgdGFiaW5kZXg9IjMiPkxvZyBpbjwvYnV0dG9uPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L21haW4+CiAgICAgICAgPGZvb3RlciBjbGFzcz0icGYtYy1sb2dpbl9fZm9vdGVyIj4KICAgICAgICAgIDxwPldlbGNvbWUgdG8gUmVkIEhhdCBPcGVuU2hpZnQgU2VydmljZSBvbiBBV1MuPC9wPgogICAgICAgIDwvZm9vdGVyPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCjwvYm9keT48L2h0bWw+Cg==
      kind: Secret
      metadata:
        creationTimestamp: null
        name: rosa-oauth-templates-login
        namespace: openshift-config
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: rosa-oauth-templates-providers
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: api.openshift.com/product
        operator: In
        values:
        - rosa
    resourceApplyMode: Sync
    applyBehavior: CreateOrUpdate
    resources:
    - apiVersion: v1
      data:
        providers.html: 
      kind: Secret
      metadata:
        creationTimestamp: null
        name: rosa-oauth-templates-providers
        namespace: openshift-config
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: sre-authorization
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: user.openshift.io/v1
      kind: Group
      metadata:
        name: osd-sre-cluster-admins
      users: []
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: osd-sre-cluster-admins
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: cluster-admin
      subjects:
      - kind: Group
        name: osd-sre-cluster-admins
    - apiVersion: user.openshift.io/v1
      kind: Group
      metadata:
        name: osd-sre-admins
      users: ${{SREP_USERS}}
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: osd-sre-admin
      rules:
      - apiGroups:
        - '*'
        resources:
        - '*'
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ''
        resources:
        - nodes
        verbs:
        - patch
      - apiGroups:
        - ''
        resources:
        - pods/eviction
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - pods/exec
        verbs:
        - create
      - apiGroups:
        - batch
        resources:
        - jobs
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        verbs:
        - delete
        - deletecollection
      - apiGroups:
        - config.openshift.io
        resources:
        - projects
        verbs:
        - '*'
      - apiGroups:
        - project.openshift.io
        resources:
        - projects
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - namespaces
        - namespaces/finalize
        verbs:
        - '*'
      - apiGroups:
        - ''
        resources:
        - pods
        - pods/attach
        verbs:
        - create
      - apiGroups:
        - ''
        resources:
        - pods
        verbs:
        - delete
      - apiGroups:
        - security.openshift.io
        resources:
        - podsecuritypolicyreviews
        - podsecuritypolicyselfsubjectreviews
        - podsecuritypolicysubjectreviews
        verbs:
        - create
      - apiGroups:
        - user.openshift.io
        resources:
        - groups
        verbs:
        - patch
        - update
      - apiGroups:
        - config.openshift.io
        resources:
        - clusterversions
        verbs:
        - patch
        - update
      - apiGroups:
        - authorization.openshift.io
        resources:
        - localresourceaccessreviews
        - resourceaccessreviews
        verbs:
        - create
      - apiGroups:
        - authorization.k8s.io
        - authorization.openshift.io
        resources:
        - localsubjectaccessreviews
        - subjectaccessreviews
        verbs:
        - create
      - nonResourceURLs:
        - '*'
        verbs:
        - '*'
      - apiGroups:
        - logging.openshift.io
        resources:
        - '*'
        verbs:
        - '*'
      - apiGroups:
        - certificates.k8s.io
        resources:
        - certificatesigningrequests/approval
        verbs:
        - update
      - apiGroups:
        - velero.io
        resources:
        - backups
        verbs:
        - create
      - apiGroups:
        - velero.io
        resources:
        - deletebackuprequests
        - downloadrequests
        - serverstatusrequests
        verbs:
        - '*'
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: osd-sre-admin
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: osd-sre-admin
      subjects:
      - kind: Group
        name: osd-sre-admins
    - apiVersion: v1
      data:
        ca.crt: '-----BEGIN CERTIFICATE-----

          MIIENDCCAxygAwIBAgIJANunI0D662cnMA0GCSqGSIb3DQEBCwUAMIGlMQswCQYD

          VQQGEwJVUzEXMBUGA1UECAwOTm9ydGggQ2Fyb2xpbmExEDAOBgNVBAcMB1JhbGVp

          Z2gxFjAUBgNVBAoMDVJlZCBIYXQsIEluYy4xEzARBgNVBAsMClJlZCBIYXQgSVQx

          GzAZBgNVBAMMElJlZCBIYXQgSVQgUm9vdCBDQTEhMB8GCSqGSIb3DQEJARYSaW5m

          b3NlY0ByZWRoYXQuY29tMCAXDTE1MDcwNjE3MzgxMVoYDzIwNTUwNjI2MTczODEx

          WjCBpTELMAkGA1UEBhMCVVMxFzAVBgNVBAgMDk5vcnRoIENhcm9saW5hMRAwDgYD

          VQQHDAdSYWxlaWdoMRYwFAYDVQQKDA1SZWQgSGF0LCBJbmMuMRMwEQYDVQQLDApS

          ZWQgSGF0IElUMRswGQYDVQQDDBJSZWQgSGF0IElUIFJvb3QgQ0ExITAfBgkqhkiG

          9w0BCQEWEmluZm9zZWNAcmVkaGF0LmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEP

          ADCCAQoCggEBALQt9OJQh6GC5LT1g80qNh0u50BQ4sZ/yZ8aETxt+5lnPVX6MHKz

          bfwI6nO1aMG6j9bSw+6UUyPBHP796+FT/pTS+K0wsDV7c9XvHoxJBJJU38cdLkI2

          c/i7lDqTfTcfLL2nyUBd2fQDk1B0fxrskhGIIZ3ifP1Ps4ltTkv8hRSob3VtNqSo

          GxkKfvD2PKjTPxDPWYyruy9irLZioMffi3i/gCut0ZWtAyO3MVH5qWF/enKwgPES

          X9po+TdCvRB/RUObBaM761EcrLSM1GqHNueSfqnho3AjLQ6dBnPWlo638Zm1VebK

          BELyhkLWMSFkKwDmne0jQ02Y4g075vCKvCsCAwEAAaNjMGEwHQYDVR0OBBYEFH7R

          4yC+UehIIPeuL8Zqw3PzbgcZMB8GA1UdIwQYMBaAFH7R4yC+UehIIPeuL8Zqw3Pz

          bgcZMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMA0GCSqGSIb3DQEB

          CwUAA4IBAQBDNvD2Vm9sA5A9AlOJR8+en5Xz9hXcxJB5phxcZQ8jFoG04Vshvd0e

          LEnUrMcfFgIZ4njMKTQCM4ZFUPAieyLx4f52HuDopp3e5JyIMfW+KFcNIpKwCsak

          oSoKtIUOsUJK7qBVZxcrIyeQV2qcYOeZhtS5wBqIwOAhFwlCET7Ze58QHmS48slj

          S9K0JAcps2xdnGu0fkzhSQxY8GPQNFTlr6rYld5+ID/hHeS76gq0YG3q6RLWRkHf

          4eTkRjivAlExrFzKcljC4axKQlnOvVAzz+Gm32U0xPBF4ByePVxCJUHw1TsyTmel

          RxNEp7yHoXcwn+fXna+t5JWh1gxUZty3

          -----END CERTIFICATE-----

          '
      kind: ConfigMap
      metadata:
        name: osd-ldap-ca-configmap
        namespace: openshift-config
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: sre-build-test
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-build-test
        labels:
          openshift.io/cluster-monitoring: 'true'
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: sre-build-test
        namespace: openshift-build-test
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: sre-build-test
      rules:
      - apiGroups:
        - ''
        resources:
        - namespaces
        verbs:
        - create
        - delete
      - apiGroups:
        - build.openshift.io
        resources:
        - buildconfigs
        - builds
        verbs:
        - create
        - list
      - apiGroups:
        - image.openshift.io
        resources:
        - imagestreams
        verbs:
        - create
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: sre-build-test
      roleRef:
        kind: ClusterRole
        name: sre-build-test
        apiGroup: rbac.authorization.k8s.io
      subjects:
      - kind: ServiceAccount
        name: sre-build-test
        namespace: openshift-build-test
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        name: sre-build-test
        namespace: openshift-build-test
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: sre-build-test
      subjects:
      - kind: ServiceAccount
        name: sre-build-test
        namespace: openshift-build-test
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        name: sre-build-test
        namespace: openshift-build-test
      rules:
      - apiGroups:
        - batch
        resources:
        - jobs
        verbs:
        - list
        - delete
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: sre-build-test
        namespace: openshift-build-test
      spec:
        failedJobsHistoryLimit: 5
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Forbid
        schedule: 11 * * * *
        jobTemplate:
          spec:
            template:
              spec:
                affinity:
                  nodeAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                      nodeSelectorTerms:
                      - matchExpressions:
                        - key: node-role.kubernetes.io/infra
                          operator: Exists
                tolerations:
                - operator: Exists
                  key: node-role.kubernetes.io/infra
                  effect: NoSchedule
                serviceAccountName: sre-build-test
                restartPolicy: Never
                containers:
                - name: sre-build-test
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  imagePullPolicy: Always
                  env:
                  - name: POD_NAME
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.name
                  - name: POD_NS
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
                  command:
                  - /bin/bash
                  - -c
                  - "# ensure we fail if something exits non-zero\nset -o errexit\n\
                    set -o nounset\nset -o pipefail\n\n# cleanup traps on exiting,\
                    \ so these always run\ncleanup () {\n  echo \"$(date): Done, deleting\
                    \ build NS=$NS\"\n  oc delete ns \"${NS}\"\n}\ntrap \"cleanup\"\
                    \ EXIT SIGINT\n\n# set NS to include job name, to ease linking\
                    \ namespace to a specific job\nJOB_PREFIX=sre-build-test\nNS=\"\
                    ${POD_NS}-${POD_NAME##${JOB_PREFIX}-}\"\nJOB_NAME=$(echo \"${POD_NAME}\"\
                    \ | rev | cut -d- -f2- | rev)\n\nGET_FAILED_JOBS=$(cat <<END\n\
                    import json,sys\nr = json.load(sys.stdin)\n# create a list of\
                    \ jobs\njobs = [ job['metadata']['name'] for job in r['items']\
                    \ if\n  # no jobs are currently running \n  ( not 'active' in\
                    \ job['status']) and\n  # if '.status.failed' exists on job\n\
                    \  'failed' in job['status'] and\n  # if job failed count is bigger\
                    \ than backoffLimit\n  #\n  # this check is because the failed\
                    \ tries can be one less than limit\n  # see code in https://github.com/kubernetes/kubernetes/blob/master/pkg/controller/job/job_controller.go#L509\n\
                    \  # if this changes we should consider using an easier implementation\n\
                    \  job['spec']['backoffLimit'] - 1 <= job['status']['failed']]\n\
                    print(\" \".join(jobs))\nEND\n)\noc create ns \"${NS}\"\n\n# run\
                    \ build\noc -n \"${NS}\" new-build nodejs~https://github.com/openshift/nodejs-ex\
                    \ --name=\"${JOB_PREFIX}\"\necho \"$(date): Waiting for build\
                    \ to complete.\"\nwhile :\ndo\n  ST=$(oc -n \"${NS}\" get build\
                    \ -o custom-columns=STATUS:.status.phase --no-headers)\n  case\
                    \ ${ST} in\n    \"\")\n      # if build status is blank, assume\
                    \ we are still starting the build\n      ST=\"Starting\"\n   \
                    \   ;;\n    Failed)\n      echo \"$(date): Build Failed\" >&2\n\
                    \      exit 1\n      ;;\n    Cancelled)\n      echo \"$(date):\
                    \ Build was Cancelled\" >&2\n      exit 1\n      ;;\n    Complete)\n\
                    \      echo \"$(date): Build Complete\"\n      # Get all job names\
                    \ that have exceeded failed retries\n      JOBS=$(oc -n \"${POD_NS}\"\
                    \ get job -o json)\n      JOBS_TO_DELETE=$(echo \"${JOBS}\" |\
                    \ python -c \"$GET_FAILED_JOBS\")\n\n      if [[ -n \"${JOBS_TO_DELETE}\"\
                    \ ]] ; then\n        echo \"$(date): Selected jobs for deletion:\
                    \ ${JOBS_TO_DELETE}\"\n        echo \"${JOBS_TO_DELETE}\" | xargs\
                    \ oc -n \"${POD_NS}\" delete job\n      fi\n      break\n    \
                    \  ;;\n  esac\n  echo \"$(date): Build is ${ST}; checking build\
                    \ again in 15 seconds, NS=${NS}\"\n  sleep 15\ndone\nexit 0\n"
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-alerts-stuck-builds
          role: alert-rules
        name: sre-alerts-stuck-builds
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-alerts-stuck-builds
          rules:
          - alert: StuckNewBuilds3MinSRE
            expr: count(openshift_build_active_time_seconds{phase="New",exported_namespace=~"^openshift-build-test.*"}
              < time() - 180) > 0
            labels:
              severity: warning
              namespace: openshift-monitoring
          - alert: StuckPendingBuilds3MinSRE
            expr: count(openshift_build_active_time_seconds{phase="Pending",exported_namespace=~"^openshift-build-test.*"}
              < time() - 180) > 0
            labels:
              severity: warning
              namespace: openshift-monitoring
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: sre-prometheus
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-alertmanager-silences-active
          role: alert-rules
        name: sre-alertmanager-silences-active
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-alertmanager-silences-active
          rules:
          - alert: AlertmanagerSilencesActiveSRE
            expr: avg without (instance,pod,endpoint,job,service,state,container)(alertmanager_silences{state="active"})
              > 0 unless (count(cluster_version{type="updating"}) > 0 or sum by(namespace)
              (time() - kube_pod_created{namespace="openshift-monitoring",pod=~"osd-cluster-ready.*"}
              < 4500))
            for: 15m
            labels:
              severity: warning
              namespace: openshift-monitoring
            annotations:
              message: Active AlertManager silences have been detected on the cluster
                for the last 15 minutes. As a result, active alerts may potentially
                not be being reported back.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-configure-alertmanager-operator-offline-alerts
          role: alert-rules
        name: sre-configure-alertmanager-operator-offline-alerts
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-configure-alertmanager-operator-offline-alerts
          rules:
          - alert: ConfigureAlertmanagerOperatorOfflineSRE
            expr: absent(up{service="configure-alertmanager-operator"})
            for: 15m
            labels:
              severity: critical
              namespace: openshift-monitoring
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-control-plane-resizing-alerts
          role: alert-rules
        name: sre-control-plane-resizing-alerts
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-control-plane-resizing-recording.rules
          rules:
          - expr: label_replace(cluster:nodes_roles, "instance", "$1", "node", "(.*)")
              * on(instance) group_left node_memory_MemTotal_bytes
            record: sre:node_roles:memory_total_bytes
          - expr: count(cluster:nodes_roles{label_node_role_kubernetes_io!~"(master|infra)"})
            record: sre:node_workers:count
          - expr: ( avg(sre:node_roles:memory_total_bytes{label_node_role_kubernetes_io="master"})
              < 16*1024*1024*1024 AND sre:node_workers:count > 25 AND sre:node_workers:count
              <= 100 ) OR ( avg(sre:node_roles:memory_total_bytes{label_node_role_kubernetes_io="master"})
              < 32*1024*1024*1024 AND sre:node_workers:count > 100 AND sre:node_workers:count
              <= 250 ) OR ( avg(sre:node_roles:memory_total_bytes{label_node_role_kubernetes_io="master"})
              < 64*1024*1024*1024 AND sre:node_workers:count > 250 )
            record: sre:node_masters:need_resize
        - name: sre-control-plane-resizing-alerts
          rules:
          - alert: MasterNodesNeedResizingSRE
            expr: sre:node_masters:need_resize > 0
            for: 15m
            labels:
              severity: warning
              namespace: openshift-monitoring
            annotations:
              message: The cluster's master instance has been undersized for 15 minutes
                and should be vertically scaled to support the existing workers.  See
                linked SOP for details.  Critical alert will be raised at 2 hours.
          - alert: MasterNodesNeedResizingSRE
            expr: sre:node_masters:need_resize > 0
            for: 2h
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              message: The cluster's master instance has been undersized for 2 hours
                and must be vertically scaled to support the existing workers.  See
                linked SOP for details.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-csv-abnormal
          role: alert-rules
        name: sre-csv-abnormal
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-csv-abnormal-alerts
          rules:
          - alert: CsvAbnormalReplacingOver30MinSRE
            expr: csv_abnormal{phase=~"(^Replacing$|^Failed$|^Unknown$)",exported_namespace=~"(^openshift.*|^kube.*|^redhat.*|^default$)"}
            for: 30m
            labels:
              severity: warning
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: 'CSV {{ $labels.name }} version {{ $labels.version }} is in
                an abnormal state. Reason: {{ $labels.reason }}'
              link: https://github.com/openshift/ops-sop/blob/master/v4/alerts/CsvAbnormalSRE.md
          - alert: CsvAbnormalReplacingOver4HrSRE
            expr: csv_abnormal{phase=~"(^Replacing$|^Failed$|^Unknown$)",exported_namespace=~"(^openshift.*|^kube.*|^redhat.*|^default$)"}
            for: 4h
            labels:
              severity: critical
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: 'CSV {{ $labels.name }} version {{ $labels.version }} is in
                an abnormal state. Reason: {{ $labels.reason }}'
              link: https://github.com/openshift/ops-sop/blob/master/v4/alerts/CsvAbnormalSRE.md
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-dns-alerts
          role: alert-rules
        name: sre-dns-alerts
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-dns-alerts
          rules:
          - alert: DNSErrors05MinSRE
            expr: rate(dns_failure_failure_total[5m]) > 0
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              message: DNS checks have been failing for the past 5 minutes on pod-
                {{ $labels.pod }}
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-elasticsearch-jobs
          role: alert-rules
        name: sre-elasticsearch-jobs
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-elasticsearch-jobs
          rules:
          - alert: ElasticsearchJobFailedSRE
            expr: kube_job_failed{job="kube-state-metrics",namespace="openshift-logging",job_name=~"^elasticsearch.*"}
              > 1
            for: 15m
            labels:
              severity: warning
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: Elasticsearch job {{ $labels.job_name }} has failed 2 or more
                times in the last 15 minutes in namespace {{ $labels.namespace }}.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-excessive-memory
          role: alert-rules
        name: sre-excessive-memory
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-excessive-memory
          rules:
          - alert: ExcessiveContainerMemoryWarningSRE
            expr: container_memory_rss{namespace=~"(^openshift.*|^kube.*|^default$)",namespace!="openshift-customer-monitoring",container_name!="",container_name!="POD",pod!~"(^prometheus-k8s-.*|^elasticsearch-.*)"}/1024/1024/1024>3
            for: 30m
            labels:
              severity: warning
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: System container {{ $labels.namespace }}/{{ $labels.pod_name
                }}/{{ $labels.container_name }} is using in excess of 3G of memory
                for over 30 minutes.
          - alert: ExcessiveContainerMemoryCriticalSRE
            expr: container_memory_rss{namespace=~"(^openshift.*|^kube.*|^default$)",namespace!="openshift-customer-monitoring",container_name!="",container_name!="POD",pod!~"(^prometheus-k8s-.*|^elasticsearch-.*)"}/1024/1024/1024>5
            for: 30m
            labels:
              severity: critical
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: System container {{ $labels.namespace }}/{{ $labels.pod_name
                }}/{{ $labels.container_name }} is using in excess of 5G of memory
                for over 30 minutes.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-haproxy-reload-fail
          role: alert-rules
        name: sre-haproxy-reload-fail
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-haproxy-reload-fails
          rules:
          - alert: HAProxyReloadFailSRE
            expr: increase(template_router_reload_fails[5m]) > 0
            for: 15m
            labels:
              severity: warning
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: HAProxy reloads have failed on {{ $labels.pod }}. Router is
                not respecting recently created or modified routes
              link: https://github.com/openshift/ops-sop/blob/master/v4/alerts/HAProxyReloadFailSRE.md
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-managed-upgrade-operator-alerts
          role: alert-rules
        name: sre-managed-upgrade-operator-alerts
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-managed-upgrade-operator-alerts
          rules:
          - alert: UpgradeConfigValidationFailedSRE
            expr: upgradeoperator_upgradeconfig_validation_failed > 0
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              summary: Upgrade config validation failed
              description: Upgrade config validation failed
          - alert: UpgradeClusterCheckFailedSRE
            expr: upgradeoperator_cluster_check_failed > 0
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              summary: cluster check failed
              description: basic cluster checks failed on either before the upgrade
                or after the upgrade
          - alert: UpgradeNodeScalingFailedSRE
            expr: upgradeoperator_scaling_failed > 0
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              summary: node scaling failed
              description: The extra machine/node was not ready before the upgrade
                started
          - alert: UpgradeClusterVerificationFailedSRE
            expr: upgradeoperator_cluster_verification_failed > 0
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              summary: cluster verification failed
              description: Some of the infra components which are running on the cluster
                are not working well after the upgrade
          - alert: UpgradeControlPlaneUpgradeTimeoutSRE
            expr: upgradeoperator_controlplane_timeout > 0
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              summary: Controlplane upgrade timeout for {{ $labels.version }}
              description: controlplane upgrade for {{ $labels.version }} cannot be
                finished in the given time period
          - alert: UpgradeNodeUpgradeTimeoutSRE
            expr: upgradeoperator_worker_timeout > 0
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              summary: Nodes upgrade timeout for {{ $labels.version }}
              description: nodes upgrade for {{ $labels.version }} cannot be finished
                after the silence expired
          - alert: UpgradeNodeDrainFailedSRE
            expr: upgradeoperator_node_drain_timeout > 0
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              summary: Node drain failed in the given time period which is not caused
                by the PDB
              description: node drain takes too long and cannot be finished in the
                given time period during cluster upgrade
          - alert: UpgradeConfigSyncFailureOver1HrSRE
            expr: upgradeoperator_upgradeconfig_synced > 0
            for: 1h
            labels:
              severity: warning
              namespace: openshift-monitoring
            annotations:
              summary: UpgradeConfig has not successfully synced in 1 hour.
              description: This clusters UpgradeConfig has not been synced in 1 hour
                and may be out of date
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-managed-velero-operator-alerts
          role: alert-rules
        name: sre-managed-velero-operator-alerts
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-managed-velero-operator-alerts
          rules:
          - alert: VeleroHourlyObjectBackupsMissedConsecutively
            expr: 'time() - clamp_min(velero_backup_last_successful_timestamp{namespace="openshift-velero",schedule="hourly-object-backup"},

              scalar(max(kube_deployment_created{namespace="openshift-velero",deployment="velero"})))
              > 10800 + 600

              '
            labels:
              severity: warning
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: Consecutive hourly Velero backups have not successfully completed
          - alert: VeleroDailyFullBackupMissed
            expr: 'time() - clamp_min(velero_backup_last_successful_timestamp{namespace="openshift-velero",schedule="daily-full-backup"},

              scalar(max(kube_deployment_created{namespace="openshift-velero",deployment="velero"})))
              > 86400 + 600

              '
            labels:
              severity: warning
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: The daily Velero backup has not successfully completed
          - alert: VeleroWeeklyFullBackupMissed
            expr: 'time() - clamp_min(velero_backup_last_successful_timestamp{namespace="openshift-velero",schedule="weekly-full-backup"},

              scalar(max(kube_deployment_created{namespace="openshift-velero",deployment="velero"})))
              > 604800 + 600

              '
            labels:
              severity: warning
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: The weekly Velero backup has not successfully completed
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-node-unschedulable
          role: alert-rules
        name: sre-node-unschedulable
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-node-unschedulable
          rules:
          - alert: KubeNodeUnschedulableSRE
            expr: kube_node_spec_unschedulable > 0
            for: 1h
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              message: The node {{ $labels.node }} has been unscedulable for more
                than an hour.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: rhmi-sre-cluster-admins
          role: alert-rules
        name: rhmi-sre-cluster-admins
        namespace: openshift-monitoring
      spec:
        groups:
        - name: rhmi-sre-cluster-admins
          rules:
          - alert: ElevatingClusterAdminRHMISRE
            expr: openshift_group_user_account{group="layered-sre-cluster-admins"}
              == 1
            for: 130m
            labels:
              severity: warning
              namespace: redhat-rhmi
            annotations:
              message: RHMI SRE "{{ $labels.user }}" elevated to cluster-admin({{
                $labels.group }}) more than 2 hours.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: rhoam-sre-cluster-admins
          role: alert-rules
        name: rhoam-sre-cluster-admins
        namespace: openshift-monitoring
      spec:
        groups:
        - name: rhoam-sre-cluster-admins
          rules:
          - alert: ElevatingClusterAdminRHOAMSRE
            expr: openshift_group_user_account{group="rhoam-sre-cluster-admins"} ==
              1
            for: 130m
            labels:
              severity: warning
              namespace: redhat-rhoam
            annotations:
              message: RHOAM SRE "{{ $labels.user }}" elevated to cluster-admin({{
                $labels.group }}) more than 2 hours.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-router-health
          role: alert-rules
        name: sre-router-health
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-router-health
          rules:
          - alert: RouterAvailabilityLT50PctSRE
            expr: "(sum(avg_over_time(kube_replicationcontroller_status_ready_replicas[1h]))\
              \ by (replicationcontroller,namespace) \n/\non(replicationcontroller,namespace)\n\
              max(kube_replicationcontroller_status_replicas{namespace=\"default\"\
              ,replicationcontroller=~\"router.?-.*\"} >0) by (replicationcontroller,namespace))\
              \ < 0.5\n"
            labels:
              severity: warning
              namespace: openshift-monitoring
          - alert: RouterAvailabilityLT30PctSRE
            expr: "(sum(avg_over_time(kube_replicationcontroller_status_ready_replicas[1h]))\
              \ by (replicationcontroller,namespace) \n/\non(replicationcontroller,namespace)\n\
              max(kube_replicationcontroller_status_replicas{namespace=\"default\"\
              ,replicationcontroller=~\"router.?-.*\"} >0) by (replicationcontroller,namespace))\
              \ < 0.3\n"
            labels:
              severity: critical
              namespace: openshift-monitoring
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: k8s
          role: alert-rules
        name: sre-uptime-sla
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-uptime-sla
          rules:
          - alert: SLAUptimeSRE
            annotations:
              message: The API server has had 100 percent request failures for 300
                seconds.
            expr: '(sum(rate(apiserver_request_total{job="apiserver", code=~"(400|5..)"}[5m]))
              / sum(rate(apiserver_request_total{job="apiserver", code=~"([1-5]..)"}[5m]))
              >= 1)

              '
            for: 5m
            labels:
              severity: critical
              namespace: openshift-monitoring
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: osd-sre-cluster-admins
          role: alert-rules
        name: osd-sre-cluster-admins
        namespace: openshift-monitoring
      spec:
        groups:
        - name: osd-sre-cluster-admins
          rules:
          - alert: ElevatingClusterAdminSRE
            expr: openshift_group_user_account{group="osd-sre-cluster-admins"} ==
              1
            for: 130m
            labels:
              severity: warning
              namespace: openshift-monitoring
            annotations:
              message: SRE "{{ $labels.user }}" elevated to cluster-admin({{ $labels.group
                }}) more than 2 hours.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-kubequotaexceeded
          role: alert-rules
        name: sre-kubequotaexceeded
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-kubequotaexceeded
          rules:
          - alert: KubeQuotaExceededSRE
            expr: 'kube_resourcequota{namespace=~"(^kube$|^kube-.*|^openshift$|^openshift-.*|^default$)",job="kube-state-metrics",
              type="used"}

              / ignoring(instance, job, type)

              (kube_resourcequota{namespace=~"(^kube$|^kube-.*|^openshift$|^openshift-.*|^default$)",job="kube-state-metrics",
              type="hard"} > 0)

              > 1

              '
            for: 30m
            labels:
              severity: warning
              namespace: openshift-monitoring
            annotations:
              message: Quota limit exceeded in namespace {{ $labels.namespace }}.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-pruning
          role: alert-rules
        name: sre-pruning
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-pruning
          rules:
          - alert: PruningCronjobErrorSRE
            expr: kube_cronjob_status_active{namespace="openshift-sre-pruning"}>0
            for: 30m
            labels:
              severity: critical
              namespace: openshift-sre-pruning
            annotations:
              message: SRE Pruning Job {{ $labels.namespace }}/{{ $labels.cronjob
                }} is taking more than thirty minutes to complete.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-pv
          role: alert-rules
        name: sre-pv
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-pv-customer
          rules:
          - alert: KubePersistentVolumeUsageCriticalCustomer
            expr: '100

              * kubelet_volume_stats_available_bytes{job="kubelet",namespace!~"(^openshift-.*|^kube-.*|^default$|^redhat-.*)"}

              / kubelet_volume_stats_capacity_bytes{job="kubelet",namespace!~"(^openshift-.*|^kube-.*|^default$|^redhat-.*)"}

              < 3

              '
            labels:
              severity: critical
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: The customer PersistentVolume claimed by {{ $labels.persistentvolumeclaim
                }} in Namespace {{ $labels.namespace }} is only {{ printf "%0.2f"
                $value }}% free.
          - alert: KubePersistentVolumeFullInFourDaysCustomer
            expr: '100

              * (kubelet_volume_stats_available_bytes{job="kubelet",namespace!~"(^openshift-.*|^kube-.*|^default$|^redhat-.*)"}

              / kubelet_volume_stats_capacity_bytes{job="kubelet",namespace!~"(^openshift-.*|^kube-.*|^default$|^redhat-.*)"})

              < 15 and predict_linear(kubelet_volume_stats_available_bytes{job="kubelet",namespace!~"(^openshift-.*|^kube-.*|^default$|^redhat-.*)"}[6h],

              4 * 24 * 3600) < 0

              '
            labels:
              severity: warning
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: Based on recent sampling, the customer PersistentVolume claimed
                by {{ $labels.persistentvolumeclaim }} in Namespace {{ $labels.namespace
                }} is expected to fill up within four days. Currently {{ printf "%0.2f"
                $value }}% is available.
        - name: sre-pv-lp
          rules:
          - alert: KubePersistentVolumeUsageCriticalLayeredProduct
            expr: '100

              * kubelet_volume_stats_available_bytes{job="kubelet",namespace=~"(^redhat-.*)",namespace!~"(^redhat-rhmi.*)"}

              / kubelet_volume_stats_capacity_bytes{job="kubelet",namespace=~"(^redhat-.*)",namespace!~"(^redhat-rhmi.*)"}

              < 3

              '
            labels:
              severity: critical
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: The customer PersistentVolume claimed by {{ $labels.persistentvolumeclaim
                }} in Namespace {{ $labels.namespace }} is only {{ printf "%0.2f"
                $value }}% free.
          - alert: KubePersistentVolumeFullInFourDaysLayeredProduct
            expr: '100

              * (kubelet_volume_stats_available_bytes{job="kubelet",namespace=~"(^redhat-.*)",namespace!~"(^redhat-rhmi.*)"}

              / kubelet_volume_stats_capacity_bytes{job="kubelet",namespace=~"(^redhat-.*)",namespace!~"(^redhat-rhmi.*)"})

              < 15 and predict_linear(kubelet_volume_stats_available_bytes{job="kubelet",namespace=~"(^redhat-.*)",namespace!~"(^redhat-rhmi.*)"}[6h],

              4 * 24 * 3600) < 0

              '
            labels:
              severity: warning
              namespace: '{{ $labels.namespace }}'
            annotations:
              message: Based on recent sampling, the customer PersistentVolume claimed
                by {{ $labels.persistentvolumeclaim }} in Namespace {{ $labels.namespace
                }} is expected to fill up within four days. Currently {{ printf "%0.2f"
                $value }}% is available.
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-telemeter-client
          role: alert-rules
        name: sre-telemeter-client
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-telemeter-client
          rules:
          - alert: MetricsClientSendFailingSRE
            expr: sum by (job) (rate(metricsclient_request_send{status_code!="200"}[10m]))
              / sum by (job) (rate(metricsclient_request_send[10m])) > (16.12 - (1-0.90000))
              and sum by (job) (rate(metricsclient_request_send{status_code!="200"}[2h]))
              / sum by (job) (rate(metricsclient_request_send[2h])) > (16.12 - (1-0.90000))
            for: 10m
            labels:
              severity: critical
              namespace: openshift-monitoring
            annotations:
              description: Telemeter client is experiencing a high error rate over
                the past hour
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: sre-prometheus-aws
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        hive.openshift.io/cluster-platform: aws
    resourceApplyMode: Sync
    resources:
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-cloud-ingress-operator-offline-alerts
          role: alert-rules
        name: sre-cloud-ingress-operator-offline-alerts
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-cloud-ingress-operator-offline-alerts
          rules:
          - alert: CloudIngressOperatorOfflineSRE
            expr: absent(up{service="localmetrics-cloud-ingress-operator", namespace="openshift-cloud-ingress-operator"})
            for: 15m
            labels:
              severity: critical
              namespace: openshift-monitoring
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-ebs-iops-burstbalance
          role: alert-rules
        name: sre-ebs-iops-burstbalance
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-ebs-iops-burstbalance
          rules:
          - alert: EbsVolumeBurstBalanceLT40PctSRE
            expr: avg(ebs_iops_credits) < 40
            for: 60m
            labels:
              severity: warning
              namespace: openshift-monitoring
          - alert: EbsVolumeBurstBalanceLT20PctSRE
            expr: avg(ebs_iops_credits) < 20
            for: 60m
            labels:
              severity: critical
              namespace: openshift-monitoring
    - apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        labels:
          prometheus: sre-alerts-stuck-volumes
          role: alert-rules
        name: sre-alerts-stuck-volumes
        namespace: openshift-monitoring
      spec:
        groups:
        - name: sre-alerts-stuck-volumes
          rules:
          - alert: EbsVolumeStuckAttaching5MinSRE
            expr: ebs_volume_state{ebs_volume_state="attaching"} > 0
            for: 5m
            labels:
              severity: warning
              namespace: openshift-monitoring
          - alert: EbsVolumeStuckAttaching10MinSRE
            expr: ebs_volume_state{ebs_volume_state="attaching"} > 0
            for: 10m
            labels:
              severity: critical
              namespace: openshift-monitoring
          - alert: EbsVolumeStuckDetaching5MinSRE
            expr: ebs_volume_state{ebs_volume_state="detaching"} > 0
            for: 5m
            labels:
              severity: warning
              namespace: openshift-monitoring
          - alert: EbsVolumeStuckDetaching10MinSRE
            expr: ebs_volume_state{ebs_volume_state="detaching"} > 0
            for: 10m
            labels:
              severity: critical
              namespace: openshift-monitoring
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: sre-pruning
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-sre-pruning
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: sre-pruner-buildsdeploys-cr
      rules:
      - apiGroups:
        - ''
        resources:
        - pods
        - replicationcontrollers
        verbs:
        - list
        - get
      - apiGroups:
        - ''
        resources:
        - replicationcontrollers
        verbs:
        - delete
      - apiGroups:
        - apps.openshift.io
        resources:
        - deploymentconfigs
        verbs:
        - get
        - list
      - apiGroups:
        - build.openshift.io
        resources:
        - buildconfigs
        - builds
        verbs:
        - list
        - get
      - apiGroups:
        - build.openshift.io
        resources:
        - builds
        verbs:
        - delete
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: sre-pruner-buildsdeploys-pruning
      roleRef:
        kind: ClusterRole
        name: sre-pruner-buildsdeploys-cr
        apiGroup: rbac.authorization.k8s.io
      subjects:
      - kind: ServiceAccount
        name: sre-pruner-sa
        namespace: openshift-sre-pruning
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: sre-pruner-sa
        namespace: openshift-sre-pruning
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: builds-pruner
        namespace: openshift-sre-pruning
      spec:
        failedJobsHistoryLimit: 5
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Replace
        schedule: 0 */1 * * *
        jobTemplate:
          spec:
            template:
              spec:
                affinity:
                  nodeAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - preference:
                        matchExpressions:
                        - key: node-role.kubernetes.io/infra
                          operator: Exists
                      weight: 1
                tolerations:
                - effect: NoSchedule
                  key: node-role.kubernetes.io/infra
                  operator: Exists
                serviceAccountName: sre-pruner-sa
                restartPolicy: Never
                containers:
                - name: builds-pruner
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  imagePullPolicy: Always
                  command:
                  - oc
                  - adm
                  - prune
                  - builds
                  - --keep-younger-than=24h
                  - --keep-complete=1
                  - --keep-failed=1
                  - --confirm
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: deployments-pruner
        namespace: openshift-sre-pruning
      spec:
        failedJobsHistoryLimit: 5
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Replace
        schedule: 0 */1 * * *
        jobTemplate:
          spec:
            template:
              spec:
                affinity:
                  nodeAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - preference:
                        matchExpressions:
                        - key: node-role.kubernetes.io/infra
                          operator: Exists
                      weight: 1
                tolerations:
                - effect: NoSchedule
                  key: node-role.kubernetes.io/infra
                  operator: Exists
                serviceAccountName: sre-pruner-sa
                restartPolicy: Never
                containers:
                - name: deployments-pruner
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  imagePullPolicy: Always
                  command:
                  - oc
                  - adm
                  - prune
                  - deployments
                  - --keep-complete=1
                  - --keep-younger-than=24h
                  - --keep-failed=1
                  - --confirm
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: sre-pruning-images
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: NotIn
        values:
        - '4.0'
        - '4.1'
        - '4.2'
        - '4.3'
        - '4.4'
        - '4.5'
    resourceApplyMode: Sync
    patches:
    - apiVersion: imageregistry.operator.openshift.io/v1
      applyMode: AlwaysApply
      kind: ImagePruner
      name: cluster
      namespace: openshift-image-registry
      patch: '{"spec":{"keepYoungerThan":86400000000000, "ignoreInvalidImageReferences":
        true, "schedule": "0 */1 * * *", "suspend": false, "affinity": {"nodeAffinity":
        {"preferredDuringSchedulingIgnoredDuringExecution": [{"preference": {"matchExpressions":
        [{"key": "node-role.kubernetes.io/infra", "operator": "Exists"}]}, "weight":
        1}]}}, "tolerations": [{"effect": "NoSchedule", "key": "node-role.kubernetes.io/infra",
        "operator": "Exists"}]}}'
      patchType: merge
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: sre-pruning-images-pre-4.6
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
      matchExpressions:
      - key: hive.openshift.io/version-major-minor
        operator: In
        values:
        - '4.0'
        - '4.1'
        - '4.2'
        - '4.3'
        - '4.4'
        - '4.5'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: sre-pruner-images
      roleRef:
        kind: ClusterRole
        name: system:image-pruner
        apiGroup: rbac.authorization.k8s.io
      subjects:
      - kind: ServiceAccount
        name: sre-pruner-sa
        namespace: openshift-sre-pruning
    - apiVersion: batch/v1beta1
      kind: CronJob
      metadata:
        name: image-pruner
        namespace: openshift-sre-pruning
      spec:
        failedJobsHistoryLimit: 5
        successfulJobsHistoryLimit: 3
        concurrencyPolicy: Replace
        schedule: 30 */1 * * *
        jobTemplate:
          spec:
            template:
              spec:
                affinity:
                  nodeAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                    - preference:
                        matchExpressions:
                        - key: node-role.kubernetes.io/infra
                          operator: Exists
                      weight: 1
                tolerations:
                - effect: NoSchedule
                  key: node-role.kubernetes.io/infra
                  operator: Exists
                serviceAccountName: sre-pruner-sa
                restartPolicy: Never
                containers:
                - name: image-pruner
                  image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                  imagePullPolicy: Always
                  args:
                  - /bin/bash
                  - -c
                  - oc adm prune images --token=$$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
                    --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
                    --keep-younger-than=24h --keep-tag-revisions=5 --ignore-invalid-refs=true
                    --confirm
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: velero-configuration
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: managed.openshift.io/v1alpha2
      kind: VeleroInstall
      metadata:
        name: cluster
        namespace: openshift-velero
    - apiVersion: velero.io/v1
      kind: Schedule
      metadata:
        name: daily-full-backup
        namespace: openshift-velero
      spec:
        schedule: 0 1 * * *
        template:
          includedNamespaces:
          - '*'
          excludedResources:
          - imagetags.image.openshift.io
          - images.image.openshift.io
          - oauthaccesstokens.oauth.openshift.io
          - oauthauthorizetokens.oauth.openshift.io
          - templateinstances.template.openshift.io
          - clusterserviceversions.operators.coreos.com
          - packagemanifests.packages.operators.coreos.com
          - operatorgroups.operators.coreos.com
          - subscriptions.operators.coreos.com
          - servicebrokers.servicecatalog.k8s.io
          - servicebindings.servicecatalog.k8s.io
          - serviceclasses.servicecatalog.k8s.io
          - serviceinstances.servicecatalog.k8s.io
          - serviceplans.servicecatalog.k8s.io
          - events.events.k8s.io
          - events
          ttl: 168h0m0s
    - apiVersion: velero.io/v1
      kind: Schedule
      metadata:
        name: hourly-object-backup
        namespace: openshift-velero
      spec:
        schedule: 17 * * * *
        template:
          includedNamespaces:
          - '*'
          excludedResources:
          - imagetags.image.openshift.io
          - images.image.openshift.io
          - oauthaccesstokens.oauth.openshift.io
          - oauthauthorizetokens.oauth.openshift.io
          - templateinstances.template.openshift.io
          - clusterserviceversions.operators.coreos.com
          - packagemanifests.packages.operators.coreos.com
          - operatorgroups.operators.coreos.com
          - subscriptions.operators.coreos.com
          - servicebrokers.servicecatalog.k8s.io
          - servicebindings.servicecatalog.k8s.io
          - serviceclasses.servicecatalog.k8s.io
          - serviceinstances.servicecatalog.k8s.io
          - serviceplans.servicecatalog.k8s.io
          - events.events.k8s.io
          - events
          snapshotVolumes: false
          ttl: 24h0m0s
    - apiVersion: velero.io/v1
      kind: Schedule
      metadata:
        name: weekly-full-backup
        namespace: openshift-velero
      spec:
        schedule: 0 2 * * 1
        template:
          includedNamespaces:
          - '*'
          excludedResources:
          - imagetags.image.openshift.io
          - images.image.openshift.io
          - oauthaccesstokens.oauth.openshift.io
          - oauthauthorizetokens.oauth.openshift.io
          - templateinstances.template.openshift.io
          - clusterserviceversions.operators.coreos.com
          - packagemanifests.packages.operators.coreos.com
          - operatorgroups.operators.coreos.com
          - subscriptions.operators.coreos.com
          - servicebrokers.servicecatalog.k8s.io
          - servicebindings.servicecatalog.k8s.io
          - serviceclasses.servicecatalog.k8s.io
          - serviceinstances.servicecatalog.k8s.io
          - serviceplans.servicecatalog.k8s.io
          - events.events.k8s.io
          - events
          ttl: 720h0m0s
- apiVersion: hive.openshift.io/v1
  kind: SelectorSyncSet
  metadata:
    labels:
      managed.openshift.io/gitHash: ${IMAGE_TAG}
      managed.openshift.io/gitRepoName: ${REPO_NAME}
      managed.openshift.io/osd: 'true'
    name: velero-configuration-hive-specific
  spec:
    clusterDeploymentSelector:
      matchLabels:
        api.openshift.com/managed: 'true'
        ext-managed.openshift.io/hive-shard: 'true'
    resourceApplyMode: Sync
    resources:
    - apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          managed.openshift.io/aggregate-to-dedicated-admins: cluster
        name: velero-schedule-admins-cluster
      rules:
      - apiGroups:
        - velero.io
        attributeRestrictions: null
        resources:
        - schedules
        verbs:
        - '*'
    - apiVersion: velero.io/v1
      kind: Schedule
      metadata:
        name: 5min-object-backup
        namespace: openshift-velero
      spec:
        schedule: '*/5 * * * *'
        template:
          includedNamespaces:
          - '*'
          excludedResources:
          - imagetags.image.openshift.io
          - images.image.openshift.io
          - oauthaccesstokens.oauth.openshift.io
          - oauthauthorizetokens.oauth.openshift.io
          - templateinstances.template.openshift.io
          - clusterserviceversions.operators.coreos.com
          - packagemanifests.packages.operators.coreos.com
          - operatorgroups.operators.coreos.com
          - subscriptions.operators.coreos.com
          - servicebrokers.servicecatalog.k8s.io
          - servicebindings.servicecatalog.k8s.io
          - serviceclasses.servicecatalog.k8s.io
          - serviceinstances.servicecatalog.k8s.io
          - serviceplans.servicecatalog.k8s.io
          - events.events.k8s.io
          - events
          snapshotVolumes: false
          ttl: 0h25m0s
- apiVersion: v1
  data:
    environment: stage
  kind: ConfigMap
  metadata:
    name: hive-environment
    namespace: openshift-config

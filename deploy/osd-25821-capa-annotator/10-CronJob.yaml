apiVersion: batch/v1
kind: CronJob
metadata:
  name: capa-annotator
  namespace: openshift-capa-annotator
  annotations:
    kubernetes.io/description: "Patches 4.17 Manifest works to fixed CAPI version https://issues.redhat.com/browse/OSD-25821"
spec:
  schedule: "*/5 * * * *" # Every five minutes
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      template:
        metadata:
          name: capa-annotator
          namespace: openshift-capa-annotator
          annotations:
            kubernetes.io/description: "Patches 4.17 Manifest works to fixed CAPI version https://issues.redhat.com/browse/OSD-25821"
        spec:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - preference:
                  matchExpressions:
                  - key: node-role.kubernetes.io/infra
                    operator: Exists
                weight: 1
          tolerations:
            - effect: NoSchedule
              key: node-role.kubernetes.io/infra
              operator: Exists
          containers:
          - name: capa-annotator
            image: image-registry.openshift-image-registry.svc:5000/openshift/tools:latest
            imagePullPolicy: Always
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              runAsNonRoot: true
            command:
            - /bin/bash
            args:
            - -c
            - |
              # CAPI IMAGE - 4.17.4
              IMAGE="quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:f614ef855220f2381217c31b8cb94c05ef20edf3ca23b5efa0be1b957cdde3a4"
              # Get all manifestwork objects and extract their names
              managedclusters=$(oc get managedclusters -l openshiftVersion-major-minor=4.17 -o jsonpath='{range .items[*]}{.metadata.name}{"\n"}{end}')
              # Loop through each manifestwork object
              for clusterID in ${managedclusters[@]};do 
                # Extract namespace and name
                namespace=$(oc get managedclusters $clusterID -o json | jq -r '.metadata.labels["api.openshift.com/management-cluster"]')
                kinds=$(oc get manifestwork -n $namespace $clusterID -o json | jq -r '.spec.workload.manifests[].kind')
                num=0 
                for kind in $kinds;do 
                  if [[ $kind == "HostedCluster" ]]; then
                      echo $clusterID
                      #~1 escapes / in bash
                      json_payload='[{"op":"replace","path":"/spec/workload/manifests/'"$num"'/metadata/annotations/hypershift.openshift.io~1capi-provider-aws-image","value":"'"$IMAGE"'"}]'
                      echo "oc patch manifestwork $clusterID -n $namespace --type='json' -p "$json_payload""
                      oc patch manifestwork $clusterID -n $namespace --type='json' -p "$json_payload"
                      echo "-------------------------------------------------------------------------"
                      break
                  fi
                (( num++))
                done
              done
          serviceAccountName: capa-annotator
          automountServiceAccountToken: true
          restartPolicy: Never